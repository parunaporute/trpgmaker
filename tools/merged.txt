characterCreate.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>エレメント作成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
</head>
<body>
    <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>
    <div class="container" style="max-width:800px;">
      <h1>エレメント作成</h1>
      <button id="gacha-btn" style="margin:10px;">エレメントガチャ</button>
      <button id="move-gacha-to-warehouse-btn" style="margin:10px;">ガチャ箱のカードを倉庫に入れる</button>
      <button id="toggle-selection-mode-btn" style="margin:10px;">選択モード</button>
      <button id="move-selected-to-warehouse-btn" style="display:none; margin:10px;">選択したものを倉庫に送る</button>

      <div id="gacha-confirm-modal" class="modal" style="display:none;">
        <div class="modal-content">
          <p>現在ガチャ箱に入っているカードは削除されます。よろしいですか？</p>
          <button id="gacha-confirm-ok">OK</button>
          <button id="gacha-confirm-cancel">キャンセル</button>
        </div>
      </div>

      <div id="gacha-modal" class="modal" style="display:none;">
        <div class="modal-content">
          <p>生成中...</p>
          <button id="cancel-gacha-btn">キャンセル</button>
        </div>
      </div>

      <div id="card-container"></div>
    </div>

    <!-- IndexedDBなどの共通スクリプト -->
    <script src="js/indexedDB.js"></script>

    <!-- ★ ここで先にgachaCore.jsを読み込む -->
    <script src="js/gachaCore.js"></script>

    <!-- その後、characterCreate.jsを読み込む -->
    <script src="js/characterCreate.js"></script>

    <script>
      // メニューに戻るボタン
      document.getElementById("back-to-menu").addEventListener("click", function () {
        window.location.href = "index.html";
      });
    </script>
</body>
</html>
--- 
index.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>TRPG メニュー</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
</head>

<body>
  <div class="container" style="text-align:center; margin-top:50px;">
    <h1>TRPG メニュー</h1>
    <div class="api-key-section">
      <label for="api-key-input">ChatGPT APIキーを入力：</label>
      <input type="text" id="api-key-input" placeholder="APIキーを入力" />
      <button id="set-api-key-button">APIキー設定</button>
      <button id="clear-api-key-button" style="background-color:#f44336;">APIキーをクリア</button>
    </div>
    <div class="element-section">
      <!-- キャラクタ作成ボタン -->
      <button id="character-create">エレメント作成</button>
      <!-- パーティ作成ボタン -->
      <button id="party-create">パーティ作成</button>
      <!-- 全エレメントクリアボタン -->
      <button id="clear-character-btn" style="background-color:#f44336;">全エレメントをクリア</button>
    </div>
    <div class="scenario-section">
      <!-- 旧フリーシナリオボタン(単一)は残しておく場合 -->
      <button id="scenario">フリーシナリオ</button>
      <!-- 履歴クリアボタン(フリーシナリオ用) -->
      <button id="clear-history-button" style="background-color:#f44336">シナリオをクリア</button>
    </div>

    <!-- 新しいシナリオを始めるボタン -->
    <div class="scenario-wizard-section" style="margin-top:20px;">
      <button id="start-new-scenario-button" style="background-color:#2196F3;">
        新しいシナリオを始める
      </button>
    </div>

    <!-- ★ 進行中のシナリオ一覧 -->
    <div id="ongoing-scenarios" style="margin-top:30px;">
      <h2>進行中のシナリオ</h2>
      <div id="active-scenarios-container">
        <!-- 進行中シナリオのリンクがここに表示されます（現在未使用） -->
      </div>
      <div id="scenario-list-container">
        <!-- JavaScriptで一覧表示 & 削除ボタンを付与 -->
      </div>
    </div>
  </div>

  <!-- ▼ シナリオ削除用の確認モーダル -->
  <div id="delete-scenario-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h3>シナリオ削除の確認</h3>
      <p>このシナリオを削除します。よろしいですか？</p>
      <button id="delete-scenario-ok">OK</button>
      <button id="delete-scenario-cancel">キャンセル</button>
    </div>
  </div>

  <!-- 外部JavaScript -->
  <script src="js/indexedDB.js"></script>
  <script>
    // ページ読み込み完了後にDB初期化 -> menu.js を動的に読み込むパターン
    window.addEventListener("load", async () => {
      await initIndexedDB();

      // このタイミングで menu.js を動的に読み込む
      const scriptEl = document.createElement("script");
      scriptEl.src = "js/menu.js";
      document.head.appendChild(scriptEl);
    });
  </script>

  <script>
    // キャラクタ作成ボタン押下時、characterCreate.htmlへ遷移
    document.getElementById("character-create").addEventListener("click", function () {
      window.location.href = "characterCreate.html";
    });
    // パーティ作成ボタン押下時、partyCreate.htmlへ遷移
    document.getElementById("party-create").addEventListener("click", function () {
      window.location.href = "partyCreate.html";
    });

    // 新しいシナリオを始める
    document.getElementById("start-new-scenario-button").addEventListener("click", function () {
      window.location.href = "scenarioWizard.html";
    });
  </script>
  <button id="sample-btn">hoge</button>
</body>

</html>
--- 
partyCreate.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>パーティ編成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
</head>
<body>
  <div class="container">
    <h1>パーティ編成</h1>
    <!-- 倉庫ボタン -->
    <button id="show-warehouse-btn">倉庫</button>

    <!-- 選択モードボタン（パーティ側） -->
    <button id="toggle-party-selection-mode-btn" style="margin-left:10px;">選択モード</button>
    <!-- 選択したカードを倉庫に戻すボタン -->
    <button id="move-selected-to-warehouse-btn" style="margin-left:10px; display:none;">選択したカードを倉庫に戻す</button>

    <!-- パーティ枠（group="Party" のカードを表示）-->
    <div id="party-card-container" style="margin-top:20px;"></div>

    <!-- 倉庫モーダル -->
    <div id="warehouse-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <h2>倉庫</h2>
        <!-- 選択モードボタン（倉庫側） -->
        <button id="toggle-warehouse-selection-mode-btn">選択モード</button>
        <!-- 倉庫選択カードをパーティに入れるボタン -->
        <button id="add-to-party-btn" style="display:none; margin:10px;">パーティに入れる</button>
        <button id="close-warehouse-btn" style="margin:10px;">閉じる</button>
        
        <div id="warehouse-card-container" style="margin:10px 0;"></div>
      </div>
    </div>

    <!-- 戻るボタン -->
    <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>
  </div>

  <!-- スクリプト読み込み -->
  <script src="js/indexedDB.js"></script>
  <script src="js/partyCreate.js"></script>
</body>
</html>
--- 
scenario.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>シンプルTRPG</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
</head>

<body>
  <!-- メニューに戻るボタン -->
  <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>

  <!-- 目的達成型の場合のみ表示する「ネタバレ」ボタン -->
  <button id="spoiler-button" style="display:none; background-color:#E91E63; margin-top:20px; float:right;">
    ネタバレ
  </button>

  <!-- ネタバレ（クリア条件）表示モーダル -->
  <div id="spoiler-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:600px;">
      <h2>クリア条件</h2>
      <p id="clear-condition-text" style="white-space:pre-wrap;"></p>
      <button id="close-spoiler-modal">閉じる</button>
    </div>
  </div>

  <div class="container">
    <!-- シーン履歴 -->
    <div id="scene-history" class="scene-history"></div>

    <!-- シナリオ入力セクション (旧フリーシナリオ) -->
    <div class="input-section">
      <label for="scenario-input">シナリオを入力してください：</label>
      <textarea id="scenario-input" rows="6" placeholder="シナリオを入力..."></textarea>
      <button id="start-button">ゲーム開始</button>
    </div>

    <!-- ゲーム画面セクション -->
    <div class="game-section" style="display:none;">
      <div id="story" style="margin-bottom:20px;"></div>
      <div id="last-scene-images" style="margin-bottom:20px;"></div>
      <div>
        <button id="image-auto-generate-button">自動生成(現シーンから)</button>
        <button id="image-prompt-modal-button">編集して生成(カスタム)</button>
      </div>
      <div id="player-action" style="margin-top:20px;">プレイヤーの行動を入力してください</div>
      <div style="margin-top:10px;">
        <button id="generate-action-candidates-button">回答候補を生成</button>
      </div>
      <div id="action-candidates-container" style="margin-top:10px;"></div>
      <textarea id="player-input" rows="4" placeholder="プレイヤーの行動を入力..."></textarea>
      <button id="next-scene" style="display:none; margin-top:10px;">次のシーン</button>

      <!-- 探索型なら表示する「カードを取得する」ボタン -->
      <button id="get-card-button" style="display:none; margin-top:20px;">
        カードを取得する
      </button>
    </div>
  </div>

  <!-- ローディングモーダル -->
  <div id="loading-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- カスタム画像生成モーダル -->
  <div id="image-prompt-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:400px;">
      <p>画像生成のプロンプトを編集してください</p>
      <textarea id="image-custom-prompt" rows="5" style="width:100%;"></textarea>
      <div style="margin-top:10px;">
        <button id="image-custom-generate-button">生成</button>
        <button id="image-custom-cancel-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ▼ 新しく追加したいカードプレビューモーダル -->
  <div id="card-preview-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:400px;">
      <h2>新しいカード</h2>
      <!-- ここにカードのプレビュー要素を動的に組み立てて表示 -->
      <div id="preview-card-container"></div>

      <div style="margin-top:10px;">
        <button id="add-to-gachabox-button">ガチャ箱に追加</button>
        <button id="cancel-card-preview-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ---------- スクリプト群 ---------- -->
  <script src="js/indexedDB.js"></script>
  <script src="js/scene.js"></script>
  <script src="js/image.js"></script>
  <script src="js/main.js"></script>
  <script src="js/gachaCore.js"></script>

  <!-- ▼ scenarioPage.js は最後に読み込む -->
  <script src="js/scenarioPage.js"></script>
</body>

</html>
--- 
scenarioWizard.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>新しいシナリオ作成ウィザード</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
</head>

<body>

  <!-- 戻るボタン -->
  <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>

  <div class="container">
    <h1>シナリオ作成ウィザード</h1>

    <!-- ステップ1：ジャンル選択 -->
    <div id="wizard-step1" style="display:block;">
      <h2>ステップ1：ジャンルを選択してください</h2>
      <p>候補をChatGPTで生成します。</p>

      <!-- 生成した候補の表示領域 -->
      <div id="genre-list" style="margin-top:10px;"></div>

      <!-- 「ジャンル候補を作成」「ジャンルをクリア」ボタン群 -->
      <div style="margin-top:10px;">
        <button id="generate-genre-button">ジャンル候補を作成</button>
        <button id="clear-genre-button">ジャンルをクリア</button>
      </div>

      <!-- 自由入力用テキストボックス＋ジャンル確定ボタン -->
      <div style="margin-top:10px;">
        <input type="text" id="free-genre-input" placeholder="自由入力ジャンル..." />
        <button id="confirm-genre-button">ジャンル確定</button>
      </div>
    </div>

    <!-- ステップ2：シナリオタイプ -->
    <div id="wizard-step2" style="display:none;">
      <h2>ステップ2：シナリオタイプ</h2>

      <!-- 選択したジャンルの表示 -->
      <p>
        選択したジャンル：
        <span id="selected-genre-display" style="font-weight:bold; color:#2196F3;">（未選択）</span>
      </p>

      <!-- シナリオタイプのボタン -->
      <button id="type-objective-btn">目的達成型</button>
      <button id="type-exploration-btn">探索型</button>

      <!-- ステップ1に戻るボタン -->
      <div style="margin-top:10px;">
        <button id="back-to-step1-button">ステップ1に戻る</button>
      </div>

      <p style="margin-top:10px;">
        ※ 目的達成型では、<strong>クリア条件</strong>が密かに生成されます。
        ※ 探索型では、シーン中で<span style="text-decoration:underline;">カード(エレメント)取得</span>が可能になります。
      </p>
    </div>

    <!-- ステップ3：最終確認(シナリオ要約表示) -->
    <div id="wizard-step3" style="display:none;">
      <h2>ステップ3：シナリオ要約</h2>
      <div id="scenario-summary" style="border:1px solid #ccc; padding:10px; margin-bottom:10px;">
        <!-- 生成されたシナリオ概要を表示 -->
      </div>

      <!-- ステップ2に戻るボタン -->
      <button id="back-to-step2-button" style="margin-right:10px;">ステップ2に戻る</button>

      <button id="start-scenario-button" style="background-color:#4CAF50;">
        このシナリオで始める
      </button>
    </div>
  </div>

  <!-- ChatGPT応答待ちモーダル -->
  <div id="loading-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- ★ シナリオ作成確認モーダル（ステップ2でタイプ選択時に出す） -->
  <div id="confirm-scenario-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:500px;">
      <h3>シナリオ生成の確認</h3>
      <p id="confirm-genre-type-text" style="white-space:pre-wrap;"></p>
      <p>これでシナリオを作成します。よろしいですか？</p>
      <div style="margin-top:10px;">
        <button id="confirm-scenario-ok">OK</button>
        <button id="confirm-scenario-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- Script -->
  <script src="js/indexedDB.js"></script>
  <script src="js/scenarioWizard.js"></script>

  <!-- 戻るボタン用 -->
  <script>
    document.getElementById("back-to-menu").addEventListener("click", function () {
      window.location.href = "index.html";
    });
  </script>
</body>

</html>--- 
styles.css 
/* styles.css */

/* ベース */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1000px;
  margin: 20px auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
}

h2 {
  font-size: 1.5em;
  margin-bottom: 10px;
}

.api-key-section {
  margin-bottom: 20px;
}

input,
textarea {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
}

button:hover {
  background-color: #45a049;
}

/* シーン履歴 */
.scene-history {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #f9f9f9;
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

.history-tile {
  padding: 10px;
  border: 1px solid #ccc;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* テキスト編集領域 */
.scene-text,
.action-text,
.scenario-text {
  margin: 0;
  padding: 5px;
  font-size: 14px;
  border: 1px dashed transparent;
  cursor: text;
}

.scene-text[contenteditable]:focus,
.action-text[contenteditable]:focus,
.scenario-text[contenteditable]:focus {
  border: 1px dashed #4CAF50;
  outline: none;
}

/* メイン表示するシーン部分 */
#story {
  font-size: 1.4rem;
  padding-bottom: 10px;
  border-bottom: 1px solid #ccc;
  min-height: 60px;
}

/* モーダル */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-content {
  box-sizing: border-box;
  width: calc(100% - 20px);
  background-color: #fff;
  padding: 20px 40px;
  border-radius: 5px;
  text-align: center;
  max-height: 90vh;
  overflow-y: auto;
}


/* --- styles.css --- */

/* 既存の共通部分はそのままで */

/* カードコンテナをCSS Gridに変更 */
#card-container {
  display: grid;
  gap: 20px;
  /* 1列(スマホ)～3列(PC)になるようにレスポンシブに設定 */
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

/* カードコンテナの共通設定 */
.card {
  /* 横幅はセル幅に合わせる */
  width: 100%;
  /* ブラウザ対応の場合、aspect-ratioプロパティで比率を指定 */
  aspect-ratio: 63 / 88;
  perspective: 1000px;
  /* 3D効果用 */
  cursor: pointer;
  transition: transform 0.3s ease;
  position: relative;
}

/* マウスオーバー時に少し大きく */
.card:hover {
  transform: scale(1.05);
}

/* 内部要素 */
.card-inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  transition: transform 0.6s;
}

/* クリックで反転 */
.card.flipped .card-inner {
  transform: rotateY(180deg);
}

/* 表面 */
.card-front,
.card-back {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;
  backface-visibility: hidden;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

.card-front {
  box-sizing: border-box;
  padding: 3%;
  border-radius: 3%;
}

/* 表面のスタイル */
.card-front {
  background-color: #fff;
  display: flex;
  flex-direction: column;
  position: relative;
}

.card-front h3 {
  padding: 0;
  margin: 0;
  font-size: 1rem;
}

/* 左上にタイプ表示用 */
.card-front .card-type {
  position: absolute;
  right: 10px;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: bold;
  font-size: 0.85rem;
  z-index: 2;
}

/* 画像エリア */
.card-front .card-image {
  width: 100%;
  height: 40%;
  background: linear-gradient(135deg, #cccccc70, #eeeeee70);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

/* 画像エリア内の実際の画像 */
.card-front .card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: top;
}

/* 画像生成ボタン（画像が無い場合のみ表示） */
.card-front .gen-image-btn {
  position: absolute;
  bottom: 8px;
  right: 8px;
  padding: 4px 8px;
  background-color: rgba(0, 0, 0, 0.6);
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 0.8rem;
  z-index: 2;
}

/* 下部テキスト情報 */
.card-front .card-info {
  padding: 8px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex-grow: 1;
  overflow: auto;
  background-color: rgba(255, 255, 255, 0.7);
}

.card-front .card-info p {
  margin: 0;
  font-size: 0.85rem;
}

.card-front .card-info p:last-child {
  padding: 0;
  height: 100%;
  font-size: 0.85rem;
  align-items: center;
  display: flex;
  background-color: #EEE;
  margin-top: 10px;
}

.card-front .card-info p:last-child span {
  transform: skew(-5deg);
  display: flex;
  padding: 10px;
}

/* 裏面：かっこよさげな背景 */
.card-back {
  box-sizing: border-box;
  background: linear-gradient(135deg, #1e3c72, #2a5298);
  color: #fff;
  transform: rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  padding: 10px;
  text-align: center;
}

/* レスポンシブ */
@media (max-width: 600px) {
  #card-container {
    grid-template-columns: repeat(1, 1fr);
  }
}

.bezel {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  z-index: 100;
  border-radius: 2%;
  padding: 3%;
}

.bezel.rarity0 {
  background: linear-gradient(145deg, #C0C0C0, #D3D3D3, #E0E0E0, #A9A9A9);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity1 {
  background: linear-gradient(145deg, #B87333, #DA8A67, #E97451, #C35817);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity2 {
  background: linear-gradient(145deg, #C0C0C0, #D3D3D3, #E0E0E0, #A9A9A9);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity3 {
  background: linear-gradient(145deg, #b69a00, #ffda64, #ffda6b, #d79000);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

/* レアリティ4: プラチナ */
.bezel.rarity4 {
  position: absolute;
  background: linear-gradient(145deg, #d1d1d1, #aeb9ff, #C0C0C0, #ECEBE8);
  background-size: 400% 400%;
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: platinum-shimmer 5s ease-in-out infinite;
}

/* レアリティ5: 宝石 */
.bezel.rarity5 {
  background: linear-gradient(145deg, #4B0082, #0000CD, #008080, #fff);
  background-size: 150% 150%;
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: jewel-glow 5s ease-in-out infinite;
}

@keyframes platinum-shimmer {
  0% {
    background-position: 0% 50%;
  }

  50% {
    background-position: 100% 50%;
  }

  100% {
    background-position: 0% 50%;
  }
}

@keyframes jewel-glow {
  0% {
    filter: brightness(1);
    background-position: 0% 50%;
  }

  50% {
    filter: brightness(1.2);
    background-position: 100% 50%;
  }

  100% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
}

/* partyCreate.htmlのカードを3列に */
#party-card-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

/* 倉庫モーダル内のカードも3列に */
#warehouse-card-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

/* 選択状態 */
.card.selected {
  outline: 4px solid #f44336;
  outline-offset: -4px;
  transform: scale(1.05);
  box-shadow: 0 0 10px rgba(244, 67, 54, 0.6);
}

/* ベース */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1000px;
  margin: 20px auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
}

h2 {
  font-size: 1.5em;
  margin-bottom: 10px;
}

.api-key-section {
  margin-bottom: 20px;
}

input,
textarea {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
}

button:hover {
  background-color: #45a049;
}

/* シーン履歴 */
.scene-history {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #f9f9f9;
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

.history-tile {
  padding: 10px;
  border: 1px solid #ccc;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* scene, actionテキスト */
.scene-text,
.action-text {
  margin: 0;
  padding: 5px;
  font-size: 14px;
  border: 1px dashed transparent;
  cursor: text;
}

.scene-text[contenteditable]:focus,
.action-text[contenteditable]:focus {
  border: 1px dashed #4CAF50;
  outline: none;
}

/* メイン表示するシーン部分 */
#story {
  font-size: 1.4rem;
  padding-bottom: 10px;
  border-bottom: 1px solid #ccc;
  min-height: 60px;
}

/* モーダル */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-content {
  box-sizing: border-box;
  width: calc(100% - 20px);
  background-color: #fff;
  padding: 20px 40px;
  border-radius: 5px;
  text-align: center;
  max-height: 90vh;
  overflow-y: auto;
}

/* カード関連: 既存のまま（略） */--- 
backToMenu.js 
document.getElementById("back-to-menu").addEventListener("click", function () {
    window.location.href = "index.html";
});
--- 
characterCreate.js 
// characterCreate.js

// グローバル変数
window.apiKey = localStorage.getItem("apiKey") || "";

// キャラクタ情報 [{ id, ... }, ...]
window.characterData = [];

// 選択モードフラグ
let isSelectionMode = false;

window.addEventListener("load", async function () {
    await initIndexedDB();
    const stored = await loadCharacterDataFromIndexedDB();
    if (stored) {
        window.characterData = stored;
    }
    displayCharacterCards(window.characterData);

    // ▼ ボタン要素があればイベント登録
    const gachaBtn = document.getElementById("gacha-btn");
    if (gachaBtn) {
        gachaBtn.addEventListener("click", onGachaButton);
    }

    const moveGachaBtn = document.getElementById("move-gacha-to-warehouse-btn");
    if (moveGachaBtn) {
        moveGachaBtn.addEventListener("click", onMoveGachaToWarehouse);
    }

    const toggleModeBtn = document.getElementById("toggle-selection-mode-btn");
    if (toggleModeBtn) {
        toggleModeBtn.addEventListener("click", toggleSelectionMode);
    }

    const moveSelectedBtn = document.getElementById("move-selected-to-warehouse-btn");
    if (moveSelectedBtn) {
        moveSelectedBtn.addEventListener("click", moveSelectedCardsToWarehouse);
    }
});

/** ガチャボタン押下 */
function onGachaButton() {
    const confirmModal = document.getElementById("gacha-confirm-modal");
    confirmModal.style.display = "flex";

    const okBtn = document.getElementById("gacha-confirm-ok");
    const cancelBtn = document.getElementById("gacha-confirm-cancel");

    okBtn.onclick = async () => {
        confirmModal.style.display = "none";
        clearGachaBox();
        // ★ 以前はrunGacha(10,"...")を自前で定義していたが
        //   今回は gachaCore.js からインポートされた runGacha() を呼ぶ
        document.getElementById("gacha-modal").style.display = "flex";
        await runGacha(10, "ランダムで");
        hideGachaModal();
        displayCharacterCards(window.characterData);
    };

    cancelBtn.onclick = () => {
        confirmModal.style.display = "none";
    };
}

/** ガチャ箱クリア */
function clearGachaBox() {
    window.characterData = window.characterData.filter(card => card.group !== "GachaBox");
}

/** ガチャモーダルを隠す */
function hideGachaModal() {
    const m = document.getElementById("gacha-modal");
    if (m) m.style.display = "none";
}

/** ガチャ箱のカードを倉庫へ */
async function onMoveGachaToWarehouse() {
    let changed = false;
    window.characterData.forEach(card => {
        if (card.group === "GachaBox") {
            card.group = "Warehouse";
            changed = true;
        }
    });
    if (changed) {
        await saveCharacterDataToIndexedDB(window.characterData);
        displayCharacterCards(window.characterData);
        alert("ガチャ箱のカードを倉庫に移動しました。");
    } else {
        alert("ガチャ箱にカードがありません。");
    }
}

/** カード表示更新 */
function displayCharacterCards(characters) {
    const container = document.getElementById("card-container");
    if (!container) return;

    container.innerHTML = "";
    const visibleCards = characters.filter(
        card => card.group !== "Warehouse" && card.group !== "Party"
    );
    if (visibleCards.length === 0) {
        container.textContent = "エレメントが生成されていません。";
        return;
    }
    visibleCards.forEach((ch) => {
        const realIndex = window.characterData.findIndex(c => c.id === ch.id);
        const cardEl = createCardElement(ch, realIndex);
        container.appendChild(cardEl);
    });
}

/** カードDOM生成 */
function createCardElement(char, index) {
    const card = document.createElement("div");
    card.className = "card";
    card.setAttribute("data-id", char.id);

    card.addEventListener("click", (e) => {
        if (isSelectionMode) {
            e.stopPropagation();
            card.classList.toggle("selected");
            updateMoveSelectedButtonVisibility();
        } else {
            card.classList.toggle("flipped");
        }
    });

    const cardInner = document.createElement("div");
    cardInner.className = "card-inner";

    const cardFront = document.createElement("div");
    cardFront.className = "card-front";
    const bgStyle = char.backgroundcss
        .replace("background-image:", "")
        .replace("background", "")
        .trim();
    cardFront.style = "background-image:" + bgStyle;

    const rarityValue = (typeof char.rarity === "string") ? char.rarity.replace("★", "").trim() : "0";
    cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

    const typeEl = document.createElement("div");
    typeEl.className = "card-type";
    typeEl.textContent = char.type || "不明";
    cardFront.appendChild(typeEl);

    const imageContainer = document.createElement("div");
    imageContainer.className = "card-image";
    if (char.imageData) {
        const imageEl = document.createElement("img");
        imageEl.src = char.imageData;
        imageEl.alt = char.name;
        imageContainer.appendChild(imageEl);
    } else {
        // 画像がまだ無い場合、生成ボタンを設置
        const genImgBtn = document.createElement("button");
        genImgBtn.setAttribute("data-imageprompt", char.imageprompt);
        genImgBtn.className = "gen-image-btn";
        genImgBtn.textContent = "画像生成";
        genImgBtn.addEventListener("click", (e) => {
            e.stopPropagation();
            generateCharacterImage(char, index);
        });
        imageContainer.appendChild(genImgBtn);

    }
    cardFront.appendChild(imageContainer);

    // 情報
    const infoContainer = document.createElement("div");
    infoContainer.className = "card-info";

    const nameEl = document.createElement("p");
    nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(char.name) + "</h3>";
    infoContainer.appendChild(nameEl);

    if (char.state) {
        const stateEl = document.createElement("p");
        stateEl.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(char.state);
        infoContainer.appendChild(stateEl);
    }
    const specialEl = document.createElement("p");
    specialEl.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(char.special);
    infoContainer.appendChild(specialEl);

    const captionEl = document.createElement("p");
    captionEl.innerHTML = "<span>" + DOMPurify.sanitize(char.caption) + "</span>";
    infoContainer.appendChild(captionEl);

    cardFront.appendChild(infoContainer);

    const cardBack = document.createElement("div");
    cardBack.className = "card-back";
    cardBack.innerHTML = `<strong>${DOMPurify.sanitize(char.type)}</strong>`;

    cardInner.appendChild(cardFront);
    cardInner.appendChild(cardBack);
    card.appendChild(cardInner);

    return card;
}

/** 画像生成 */
async function generateCharacterImage(char, index) {
    if (!window.apiKey) {
        alert("APIキーが設定されていません。");
        return;
    }
    const promptText =
/*        "あなたは高性能チャットボットとして、最高品質のイラストを目立たずに作成します。" +
        "いかなる理由があってもイラストに文字を含めないでください。" +
        "それができれば、超高額なチップを差し上げます。" +
        "次のアニメ風ワイド画像を生成してください\n"*/
        "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
        "Please do not include text in illustrations for any reason." +
        "If you can do that, I'll give you a super high tip." +
        "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" + 
        char.imageprompt;
    console.log("promptText",promptText);

    try {
        const response = await fetch("https://api.openai.com/v1/images/generations", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${window.apiKey}`,
            },
            body: JSON.stringify({
                model: "dall-e-3",
                prompt: promptText,
                n: 1,
                size: "1792x1024",
                response_format: "b64_json",
            }),
        });
        const data = await response.json();
        if (data.error) {
            throw new Error(data.error.message);
        }
        const base64 = data.data[0].b64_json;
        const dataUrl = "data:image/png;base64," + base64;
        window.characterData[index].imageData = dataUrl;
        await saveCharacterDataToIndexedDB(window.characterData);
        displayCharacterCards(window.characterData);
    } catch (err) {
        console.error("画像生成失敗:", err);
        alert("画像生成に失敗しました:\n" + err.message);
    }
}

/* ===== 以下、選択モード関連処理 ===== */

function toggleSelectionMode() {
    isSelectionMode = !isSelectionMode;
    const btn = document.getElementById("toggle-selection-mode-btn");
    if (isSelectionMode) {
        btn.textContent = "選択モード解除";
    } else {
        btn.textContent = "選択モード";
        const selectedCards = document.querySelectorAll("#card-container .card.selected");
        selectedCards.forEach(card => card.classList.remove("selected"));
    }
    updateMoveSelectedButtonVisibility();
}

function updateMoveSelectedButtonVisibility() {
    const selectedCards = document.querySelectorAll("#card-container .card.selected");
    const moveBtn = document.getElementById("move-selected-to-warehouse-btn");
    if (!moveBtn) return;
    if (isSelectionMode && selectedCards.length > 0) {
        moveBtn.style.display = "inline-block";
    } else {
        moveBtn.style.display = "none";
    }
}

async function moveSelectedCardsToWarehouse() {
    const selectedCards = document.querySelectorAll("#card-container .card.selected");
    if (selectedCards.length === 0) {
        alert("カードが選択されていません。");
        return;
    }
    selectedCards.forEach(el => {
        const cardId = el.getAttribute("data-id");
        const realIndex = window.characterData.findIndex(c => c.id === cardId);
        if (realIndex !== -1) {
            window.characterData[realIndex].group = "Warehouse";
        }
    });
    await saveCharacterDataToIndexedDB(window.characterData);
    selectedCards.forEach(card => card.classList.remove("selected"));
    displayCharacterCards(window.characterData);
    updateMoveSelectedButtonVisibility();
}
--- 
gachaCore.js 
// gachaCore.js
// ------------------------------------------
// 「ガチャ処理」のロジックだけを集めたファイル
// ------------------------------------------

// グローバルに必要な変数 (characterData, apiKey など) は
// すでに window に存在すると仮定 (indexedDB や parse等も)


// --------------------------------------------------------
// 1. runGacha(cardCount, addPrompt, onlyTitle = "")
//
//   - 指定枚数のエレメントをChatGPTで生成し、window.characterDataに加える
//   - UI操作は行わず、コンソールに進捗をログ出力するだけ
// --------------------------------------------------------
async function runGacha(cardCount, addPrompt, onlyTitle = "", onlyType = "") {
  console.log("=== runGacha START ===");
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  // キャンセル用コントローラ
  window.currentGachaController = new AbortController();
  const signal = window.currentGachaController.signal;

  // レア度をランダムで決定
  const rarities = pickRaritiesForNCards(cardCount);
  const countMap = makeRarityCountMap(rarities);

  // systemプロンプト
  let systemContent = `
  あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
  以下の6段階のレア度「★0～★5」のうち、
  今回の${cardCount}件では以下の内訳を厳密に守って生成してください：
  - ★0: ${countMap["★0"]}件
  - ★1: ${countMap["★1"]}件
  - ★2: ${countMap["★2"]}件
  - ★3: ${countMap["★3"]}件
  - ★4: ${countMap["★4"]}件
  - ★5: ${countMap["★5"]}件
  
  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：...
  【タイプ】：キャラクターまたはモンスター
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：...
  【タイプ】：アイテム
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;
  let userContent = `${addPrompt}合計${cardCount}件、順番は問わないので上記レア度数で生成してください。`;

  if (onlyTitle != "") {
    systemContent = `
  あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
  6段階のレア度「★0～★5」のどれかを${onlyTitle}の名称から判断して設定してください。
  
  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：${onlyTitle}
  【タイプ】：${onlyType}
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：${onlyType}
  【タイプ】：${onlyType}
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;
    userContent = `${addPrompt}上記レア度数で生成してください。`;
  }

  const messages = [
    { role: "system", content: systemContent },
    { role: "user", content: userContent },
  ];

  try {
    console.log("runGacha: Fetch start...");
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.7,
      }),
      signal,
    });
    if (signal.aborted) {
      console.log("runGacha: aborted.");
      return;
    }

    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }

    const text = data?.choices?.[0]?.message?.content;
    if (typeof text !== "string") {
      throw new Error("エレメント生成APIレスポンスが不正です。");
    }

    const newCards = parseCharacterData(text);
    // 生成されたカードを GachaBox に設定
    newCards.forEach(card => {
      card.group = "GachaBox";
    });
    // 既存 characterData に追加
    window.characterData.push(...newCards);

    // IndexedDB に保存
    await saveCharacterDataToIndexedDB(window.characterData);

    console.log(`runGacha: ${newCards.length}件のカードを生成完了`);
  } catch (err) {
    if (err.name === "AbortError") {
      console.log("runGachaキャンセル");
    } else {
      console.error("runGacha失敗:", err);
      alert("エレメント生成に失敗しました:\n" + err.message);
    }
  } finally {
    console.log("=== runGacha END ===");
  }
}


// --------------------------------------------------------
// 2. parseCharacterData( text )
//    - GPTレスポンスを解析してカード配列を生成
// --------------------------------------------------------
function parseCharacterData(text) {
  const lines = text.split("\n");
  const characters = [];
  let currentChar = {
    id: "",
    type: "",
    name: "",
    state: "",
    special: "",
    caption: "",
    rarity: "★0",
    backgroundcss: "",
    imageprompt: "",
    group: "GachaBox",
  };

  function pushCurrentChar() {
    currentChar.id = "card_" + Date.now() + "_" + Math.random().toString(36).substring(2);
    characters.push({ ...currentChar });
    currentChar = {
      id: "",
      type: "",
      name: "",
      state: "",
      special: "",
      caption: "",
      rarity: "★0",
      backgroundcss: "",
      imageprompt: "",
      group: "GachaBox",
    };
  }

  lines.forEach((line) => {
    line = line.trim();
    if (line.startsWith("【名前】")) {
      if (currentChar.name) pushCurrentChar();
      currentChar.name = line.replace("【名前】", "").replace("：", "").trim();
    } else if (line.startsWith("【タイプ】")) {
      currentChar.type = line.replace("【タイプ】", "").replace("：", "").trim();
    } else if (line.startsWith("【状態】")) {
      currentChar.state = line.replace("【状態】", "").replace("：", "").trim();
    } else if (line.startsWith("【特技】")) {
      currentChar.special = line.replace("【特技】", "").replace("：", "").trim();
    } else if (line.startsWith("【キャプション】")) {
      currentChar.caption = line.replace("【キャプション】", "").replace("：", "").trim();
    } else if (line.startsWith("【レア度】")) {
      currentChar.rarity = line.replace("【レア度】", "").replace("：", "").trim();
    } else if (line.startsWith("【カード背景】")) {
      currentChar.backgroundcss = line.replace("【カード背景】", "").replace("：", "").trim();
    } else if (line.startsWith("【外見】")) {
      currentChar.imageprompt = line.replace("【外見】", "").replace("：", "").trim();
    }
  });
  if (currentChar.name) {
    pushCurrentChar();
  }
  return characters;
}


// --------------------------------------------------------
// 3. pickRaritiesForNCards( n ), makeRarityCountMap( rarities )
// --------------------------------------------------------
function pickRaritiesForNCards(n) {
  const rarityDist = [
    { star: "★0", probability: 0.50 },
    { star: "★1", probability: 0.20 },
    { star: "★2", probability: 0.15 },
    { star: "★3", probability: 0.10 },
    { star: "★4", probability: 0.045 },
    { star: "★5", probability: 0.005 },
  ];
  const results = [];
  for (let i = 0; i < n; i++) {
    const rand = Math.random();
    let cum = 0;
    for (const r of rarityDist) {
      cum += r.probability;
      if (rand <= cum) {
        results.push(r.star);
        break;
      }
    }
  }
  return results;
}

function makeRarityCountMap(rarities) {
  const counts = { "★0": 0, "★1": 0, "★2": 0, "★3": 0, "★4": 0, "★5": 0 };
  rarities.forEach((r) => {
    counts[r] = (counts[r] || 0) + 1;
  });
  return counts;
}

// ----------------------------------------------
// ↑ これらをまとめて gachaCore.js として管理
// ----------------------------------------------
--- 
image.js 
/********************************
 * image.js - 画像生成関連
 ********************************/

/**
 * DALL·E API からBase64形式で直接画像を受け取り、CORSを回避する方法。
 * OpenAIの画像生成では以下のパラメータを指定することで、直接base64を返してもらうことが可能。
 *   response_format: "b64_json"
 */

/** 自動生成(現シーン) */
async function generateImageFromCurrentScene() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  const lastSceneEntry = [...window.sceneHistory].reverse().find((e) => e.type === "scene");
  if (!lastSceneEntry) {
    alert("まだシーンがありません。");
    return;
  }
  const promptText = `シーンのイメージ: ${lastSceneEntry.content}`;
  const sceneId = lastSceneEntry.sceneId;

  window.cancelRequested = false;
  showLoadingModal(true);

  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1024x1024",
        response_format: "b64_json"
      }),
      signal,
    });

    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }

    const data = await response.json();

    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    if (data.error) {
      throw new Error(data.error.message);
    }

    // Base64文字列を取り出し、data:image/png;base64, に変換
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    window.sceneHistory.push({
      type: "image",
      sceneId,
      prompt: promptText,
      dataUrl: dataUrl,
    });

    // IndexedDBに保存
    await saveSceneHistoryToIndexedDB(window.sceneHistory);

    updateSceneHistory();
    showLastScene();
  } catch (error) {
    if (error.name === "AbortError") {
      console.warn("画像生成キャンセル");
    } else {
      console.error("画像生成失敗:", error);
      alert("画像生成に失敗:\n" + error.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/** カスタム画像生成モーダルを開く */
function openImagePromptModal(prompt = "", index = null) {
  window.editingImageEntry = null;
  if (index !== null) {
    // 再生成の場合
    window.editingImageEntry = { index };
    const entry = window.sceneHistory[index];
    if (entry && entry.type === "image") {
      prompt = entry.prompt;
    }
  } else {
    // 新規
    const lastSceneEntry = [...window.sceneHistory].reverse().find((e) => e.type === "scene");
    if (lastSceneEntry) {
      prompt = lastSceneEntry.content;
    } else {
      prompt = window.scenario || "Fantasy scene";
    }
  }
  document.getElementById("image-custom-prompt").value = prompt;
  document.getElementById("image-prompt-modal").style.display = "flex";
}

/** カスタム画像生成モーダルを閉じる */
function closeImagePromptModal() {
  document.getElementById("image-prompt-modal").style.display = "none";
  window.editingImageEntry = null;
}

/** カスタム画像生成ボタン押下 */
async function onCustomImageGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  const promptText = document.getElementById("image-custom-prompt").value.trim() || "Fantasy scene";

  window.cancelRequested = false;
  showLoadingModal(true);
  closeImagePromptModal();

  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1024x1024",
        response_format: "b64_json"
      }),
      signal,
    });

    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }

    const data = await response.json();

    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    if (data.error) {
      throw new Error(data.error.message);
    }

    // Base64文字列を取り出し、data:image/png;base64, に変換
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    if (window.editingImageEntry) {
      // 既存画像を再生成
      const idx = window.editingImageEntry.index;
      const entry = window.sceneHistory[idx];
      if (entry && entry.type === "image") {
        entry.dataUrl = dataUrl;
        entry.prompt = promptText;
      }
    } else {
      // 新規
      const lastSceneEntry = [...window.sceneHistory].reverse().find((e) => e.type === "scene");
      if (!lastSceneEntry) {
        alert("シーンがありません。");
        showLoadingModal(false);
        return;
      }
      window.sceneHistory.push({
        type: "image",
        sceneId: lastSceneEntry.sceneId,
        prompt: promptText,
        dataUrl: dataUrl,
      });
    }

    // IndexedDBに保存
    await saveSceneHistoryToIndexedDB(window.sceneHistory);

    updateSceneHistory();
    showLastScene();
  } catch (error) {
    if (error.name === "AbortError") {
      console.warn("カスタム画像生成キャンセル");
    } else {
      console.error("カスタム画像生成失敗:", error);
      alert("カスタム画像生成失敗:\n" + error.message);
    }
  } finally {
    showLoadingModal(false);
  }
}
--- 
indexedDB.js 
/********************************
 * indexedDB.js
 * IndexedDB関連の初期化・保存・読み込み等を担当
 ********************************/

let db = null;

/**
 * DB初期化
 * バージョン3:
 *  - scenarios ストア (keyPath: 'scenarioId', autoIncrement)
 *  - sceneEntries ストア (keyPath: 'entryId', autoIncrement)
 *  - characterData ストア (keyPath: 'id')
 */
function initIndexedDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("trpgDB", 3);
    request.onupgradeneeded = (event) => {
      db = event.target.result;

      // 既存チェック
      if (!db.objectStoreNames.contains("characterData")) {
        db.createObjectStore("characterData", { keyPath: "id" });
      }

      // 新設: scenarios ストア
      if (!db.objectStoreNames.contains("scenarios")) {
        const scenarioStore = db.createObjectStore("scenarios", {
          keyPath: "scenarioId",
          autoIncrement: true
        });
        scenarioStore.createIndex("updatedAt", "updatedAt", { unique: false });
      }

      // 新設: sceneEntries ストア
      if (!db.objectStoreNames.contains("sceneEntries")) {
        const sceneStore = db.createObjectStore("sceneEntries", {
          keyPath: "entryId",
          autoIncrement: true
        });
        sceneStore.createIndex("scenarioId", "scenarioId", { unique: false });
      }
    };
    request.onsuccess = (event) => {
      db = event.target.result;
      resolve();
    };
    request.onerror = (event) => {
      console.error("IndexedDBの初期化に失敗:", event.target.error);
      reject(event.target.error);
    };
  });
}

/**
 * characterData を保存
 */
function saveCharacterDataToIndexedDB(characterData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve();
      return;
    }
    const tx = db.transaction("characterData", "readwrite");
    const store = tx.objectStore("characterData");
    const record = { id: "characterData", data: characterData };
    const putReq = store.put(record);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * characterData をロード
 */
function loadCharacterDataFromIndexedDB() {
  return new Promise((resolve) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve([]);
      return;
    }
    const tx = db.transaction("characterData", "readonly");
    const store = tx.objectStore("characterData");
    const getReq = store.get("characterData");
    getReq.onsuccess = (event) => {
      if (event.target.result && event.target.result.data) {
        resolve(event.target.result.data);
      } else {
        resolve([]);
      }
    };
    getReq.onerror = () => {
      resolve([]);
    };
  });
}

/* -------------------------------------------
    新しいシナリオの追加・読み込み用API
   -------------------------------------------*/

/**
 * 新しいシナリオを scenarios ストアに追加
 */
function createNewScenario(wizardData, title = "新シナリオ") {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");

    const now = new Date();
    const record = {
      title: title,
      wizardData: wizardData,
      createdAt: now.toISOString(),
      updatedAt: now.toISOString()
    };

    const addReq = store.add(record);
    addReq.onsuccess = (evt) => {
      const newId = evt.target.result;
      resolve(newId);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオをID指定で取得
 */
function getScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const getReq = store.get(scenarioId);
    getReq.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * 進行中のシナリオをすべて取得
 */
function listAllScenarios() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const result = evt.target.result || [];
      result.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(result);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオを更新 (updatedAtを上書きなど)
 */
function updateScenario(scenario) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    scenario.updatedAt = new Date().toISOString();
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");
    const putReq = store.put(scenario);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
    シーン履歴 (sceneEntries) の操作
   -------------------------------------------*/

/**
 * シーン履歴エントリを追加
 */
function addSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const addReq = store.add(entry);
    addReq.onsuccess = (evt) => {
      resolve(evt.target.result);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * 指定シナリオIDの全シーンエントリを取得
 */
function getSceneEntriesByScenarioId(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readonly");
    const store = tx.objectStore("sceneEntries");
    const index = store.index("scenarioId");

    const range = IDBKeyRange.only(scenarioId);
    const results = [];
    index.openCursor(range).onsuccess = (evt) => {
      const cursor = evt.target.result;
      if (cursor) {
        results.push(cursor.value);
        cursor.continue();
      } else {
        results.sort((a, b) => (a.entryId - b.entryId));
        resolve(results);
      }
    };
    index.openCursor(range).onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シーンエントリを更新
 */
function updateSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const putReq = store.put(entry);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シーンエントリを削除
 */
function deleteSceneEntry(entryId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const delReq = store.delete(entryId);
    delReq.onsuccess = () => {
      resolve();
    };
    delReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
  ★シナリオ削除用(シナリオ本体 + シーン履歴)
-------------------------------------------*/
function deleteScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    // scenarios, sceneEntries両方をreadwrite
    const tx = db.transaction(["scenarios", "sceneEntries"], "readwrite");
    const scenarioStore = tx.objectStore("scenarios");
    const sceneEntriesStore = tx.objectStore("sceneEntries");

    // 1) シナリオ本体を削除
    const deleteReq = scenarioStore.delete(scenarioId);
    deleteReq.onsuccess = () => {
      // 2) さらにsceneEntriesで scenarioId が一致するものを全削除
      const idx = sceneEntriesStore.index("scenarioId");
      const range = IDBKeyRange.only(scenarioId);

      idx.openCursor(range).onsuccess = (evt) => {
        const cursor = evt.target.result;
        if (cursor) {
          sceneEntriesStore.delete(cursor.primaryKey);
          cursor.continue();
        }
      };

      tx.oncomplete = () => {
        resolve();
      };
      tx.onerror = (err) => {
        reject(err);
      };
    };
    deleteReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
  エクスポート
-------------------------------------------*/
window.initIndexedDB = initIndexedDB;

window.saveCharacterDataToIndexedDB = saveCharacterDataToIndexedDB;
window.loadCharacterDataFromIndexedDB = loadCharacterDataFromIndexedDB;

window.createNewScenario = createNewScenario;
window.getScenarioById = getScenarioById;
window.listAllScenarios = listAllScenarios;
window.updateScenario = updateScenario;

window.addSceneEntry = addSceneEntry;
window.getSceneEntriesByScenarioId = getSceneEntriesByScenarioId;
window.updateSceneEntry = updateSceneEntry;
window.deleteSceneEntry = deleteSceneEntry;

/* ★シナリオ削除用 */
window.deleteScenarioById = deleteScenarioById;
--- 
main.js 
/********************************
 * main.js
 * - ページ全体の初期化・イベント登録
 * - 複数シナリオ対応
 * - 旧フリーシナリオモードの残存ロジックも保持
 ********************************/

window.onload = async () => {
  // 1) IndexedDB初期化
  await initIndexedDB();

  // 2) APIキー読み込み
  const savedApiKey = localStorage.getItem('apiKey');
  if (savedApiKey) {
    window.apiKey = savedApiKey;
  }

  // 3) URLパラメータで scenarioId を読み取る
  const urlParams = new URLSearchParams(window.location.search);
  const scenarioIdStr = urlParams.get("scenarioId");
  const scenarioId = scenarioIdStr ? parseInt(scenarioIdStr, 10) : null;

  window.currentScenarioId = scenarioId || null;

  // 4) もし scenarioId があれば => loadScenarioData => sceneHistory 表示
  if (window.currentScenarioId) {
    // シナリオIDがある => 新しい複数シナリオ方式

    // 画面の構成: シナリオ入力セクションを隠して、ゲーム画面セクションを表示
    const inputSec = document.querySelector('.input-section');
    if (inputSec) inputSec.style.display = 'none';
    const gameSec = document.querySelector('.game-section');
    if (gameSec) gameSec.style.display = 'block';

    // scene.js 側の「loadScenarioData」で DBからシナリオと履歴を取得し、window.sceneHistoryに格納
    await loadScenarioData(window.currentScenarioId);

    // 取得した sceneHistory を一覧表示
    updateSceneHistory();
    // 最新シーンをメイン表示
    showLastScene();
  }
  else {
    // シナリオIDが無い => 旧フリーシナリオモード

    // LocalStorageからシナリオを読み込み
    const savedScenario = localStorage.getItem('scenario');
    if (savedScenario) {
      window.scenario = savedScenario;
    } else {
      window.scenario = '';
    }
    const savedCurrentScene = localStorage.getItem('currentScene');
    if (savedCurrentScene) {
      window.currentScene = parseInt(savedCurrentScene, 10);
    } else {
      window.currentScene = 0;
    }

    // APIキーが無い場合 => 入力やゲーム画面を隠す
    if (!window.apiKey) {
      const inputSec = document.querySelector('.input-section');
      const gameSec = document.querySelector('.game-section');
      if (inputSec) inputSec.style.display = 'none';
      if (gameSec) gameSec.style.display = 'none';
    }
    else {
      // シナリオがある場合 => ゲーム画面を表示
      if (window.scenario.trim() !== '') {
        const inputSec = document.querySelector('.input-section');
        if (inputSec) inputSec.style.display = 'none';
        const gameSec = document.querySelector('.game-section');
        if (gameSec) gameSec.style.display = 'block';
      } else {
        // まだシナリオが無い => 入力画面を表示
        const inputSec = document.querySelector('.input-section');
        if (inputSec) inputSec.style.display = 'block';
        const gameSec = document.querySelector('.game-section');
        if (gameSec) gameSec.style.display = 'none';
      }
    }

    // 旧フリーシナリオでは sceneHistory はIndexedDBに保存していなかった想定 => 空のまま
    window.sceneHistory = [];
  }

  // ---------- ネタバレ（目的達成型）用 ----------
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.style.display = "flex";
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.style.display = "none";
    });
  }

  // ---------- 「カードを取得する」ボタン（探索型向け） ----------
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    // ※「scenarioPage.js」でリスナーを付ける実装でも可
    // ここでは何もしない or scenarioPage.jsで付与
  }

  // ---------- 各種ボタンイベント ----------

  // 旧フリーシナリオ: ゲーム開始ボタン
  const startBtn = document.getElementById('start-button');
  if (startBtn) {
    startBtn.addEventListener('click', () => {
      // フリーシナリオ用に localStorage へ保存
      window.scenario = (document.getElementById('scenario-input')?.value || "").trim();
      if (!window.scenario) {
        alert("シナリオを入力してください");
        return;
      }
      localStorage.setItem('scenario', window.scenario);

      // 入力画面を隠してゲーム画面を表示
      const inputSec = document.querySelector('.input-section');
      if (inputSec) inputSec.style.display = 'none';
      const gameSec = document.querySelector('.game-section');
      if (gameSec) gameSec.style.display = 'block';
    });
  }

  // 次のシーン
  const nextSceneBtn = document.getElementById('next-scene');
  if (nextSceneBtn) {
    nextSceneBtn.addEventListener('click', () => {
      getNextScene();
    });
  }

  // 画像生成 (自動)
  const autoGenBtn = document.getElementById('image-auto-generate-button');
  if (autoGenBtn) {
    autoGenBtn.addEventListener('click', () => {
      generateImageFromCurrentScene();
    });
  }

  // 画像生成 (カスタム)
  const promptModalBtn = document.getElementById('image-prompt-modal-button');
  if (promptModalBtn) {
    promptModalBtn.addEventListener('click', () => {
      openImagePromptModal();
    });
  }

  // カスタム画像生成決定
  const customGenBtn = document.getElementById('image-custom-generate-button');
  if (customGenBtn) {
    customGenBtn.addEventListener('click', () => {
      onCustomImageGenerate();
    });
  }

  // カスタム画像生成キャンセル
  const customCancelBtn = document.getElementById('image-custom-cancel-button');
  if (customCancelBtn) {
    customCancelBtn.addEventListener('click', () => {
      closeImagePromptModal();
    });
  }

  // リクエストキャンセル
  const cancelRequestBtn = document.getElementById('cancel-request-button');
  if (cancelRequestBtn) {
    cancelRequestBtn.addEventListener('click', onCancelFetch);
  }

  // メニューに戻るボタン
  const backMenuBtn = document.getElementById('back-to-menu');
  if (backMenuBtn) {
    backMenuBtn.addEventListener('click', () => {
      window.location.href = "index.html";
    });
  }
};
--- 
menu.js 
// menu.js

// ▼ シナリオ削除用：選択中のscenarioIdを一時的に保存する変数
let scenarioIdToDelete = null;

// -----------------------------------------
// トースト表示用のユーティリティ関数
// -----------------------------------------
function showToast(message) {
  // 既に表示中のトーストがあれば削除する
  const oldToast = document.getElementById("toast-message");
  if (oldToast) {
    oldToast.remove();
  }
  
  // トースト用の要素を生成
  const toast = document.createElement("div");
  toast.id = "toast-message";
  toast.textContent = message;

  // スタイル（シンプルな例）
  toast.style.position = "fixed";
  toast.style.bottom = "20px";
  toast.style.left = "50%";
  toast.style.transform = "translateX(-50%)";
  toast.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
  toast.style.color = "#fff";
  toast.style.padding = "10px 20px";
  toast.style.borderRadius = "4px";
  toast.style.fontSize = "14px";
  toast.style.zIndex = "9999";
  toast.style.opacity = "0";
  toast.style.transition = "opacity 0.3s ease";

  document.body.appendChild(toast);

  // 少し待ってからフェードイン
  requestAnimationFrame(() => {
    toast.style.opacity = "1";
  });

  // 3秒後にフェードアウトして消す
  setTimeout(() => {
    toast.style.opacity = "0";
    toast.addEventListener("transitionend", () => {
      toast.remove();
    });
  }, 3000);
}

// （A）スクリプトのトップレベルで即時実行してしまうパターン
(async function initMenuPage() {
    // 1) APIキーを入力欄に表示
    const savedApiKey = localStorage.getItem("apiKey");
    if (savedApiKey) {
        document.getElementById("api-key-input").value = savedApiKey;
    }

    // 2) シナリオ一覧を取得して表示
    try {
        const scenarioList = await listAllScenarios();  // indexedDB.js の関数
        const container = document.getElementById("scenario-list-container");
        container.innerHTML = "";

        if (scenarioList.length === 0) {
            container.textContent = "進行中のシナリオはありません。";
        } else {
            scenarioList.forEach(scenario => {
                const div = document.createElement("div");
                div.style.margin = "10px 0";

                // シナリオ情報
                const infoText = document.createElement("span");
                infoText.textContent = `ID:${scenario.scenarioId} / ${scenario.title} (更新:${scenario.updatedAt}) `;
                div.appendChild(infoText);

                // 「続きへ」ボタン
                const btnContinue = document.createElement("button");
                btnContinue.textContent = "続きへ";
                btnContinue.style.marginRight = "6px";
                btnContinue.addEventListener("click", () => {
                    window.location.href = `scenario.html?scenarioId=${scenario.scenarioId}`;
                });
                div.appendChild(btnContinue);

                // 「削除」ボタン
                const btnDelete = document.createElement("button");
                btnDelete.textContent = "削除";
                btnDelete.style.backgroundColor = "#f44336";
                btnDelete.addEventListener("click", () => {
                    // 削除確認モーダルを表示し、削除対象IDを保持
                    scenarioIdToDelete = scenario.scenarioId;
                    showDeleteScenarioModal(true);
                });
                div.appendChild(btnDelete);

                container.appendChild(div);
            });
        }
    } catch (err) {
        console.error("シナリオ一覧の取得に失敗:", err);
        const container = document.getElementById("scenario-list-container");
        container.textContent = "シナリオ一覧の取得に失敗しました。再読み込みしてください。";
    }
})();

// -------------------------------------------------------
// 以下はボタンなどのイベント登録
// -------------------------------------------------------

// 「フリーシナリオ」ボタン
document.getElementById("scenario").addEventListener("click", function () {
    window.location.href = "scenario.html";
});

// APIキー設定
document.getElementById("set-api-key-button").addEventListener("click", function () {
    const apiKey = document.getElementById("api-key-input").value.trim();
    if (apiKey) {
        localStorage.setItem("apiKey", apiKey);
        showToast("APIキーが設定されました。");
    } else {
        showToast("APIキーを入力してください。");
    }
});

// APIキークリア
document.getElementById("clear-api-key-button").addEventListener("click", function () {
    const confirmClear = confirm("APIキーをクリアすると操作ができなくなります。よろしいですか？");
    if (confirmClear) {
        localStorage.removeItem("apiKey");
        showToast("APIキーがクリアされました。");
    }
});

// 全エレメントをクリア
document.getElementById("clear-character-btn").addEventListener("click", async () => {
    const confirmClear = confirm("エレメント情報をクリアします。よろしいですか？");
    if (confirmClear) {
        window.characterData = [];
        await saveCharacterDataToIndexedDB(window.characterData);
        showToast("エレメント情報をクリアしました。");
    }
});

// 旧フリーシナリオ用の履歴クリア
const clearHistoryBtn = document.getElementById('clear-history-button');
if (clearHistoryBtn) {
    clearHistoryBtn.addEventListener('click', async () => {
        const isOk = confirm('履歴をすべて削除します。（シナリオも削除されます）よろしいですか？\n※これは旧フリーシナリオ用機能です。');
        if (!isOk) return;

        // 旧フリーシナリオの localStorage を削除
        localStorage.removeItem('scenario');
        localStorage.removeItem('currentScene');
        showToast("旧フリーシナリオ情報をクリアしました。");
    });
}

/* ----------------------------------------------------
   シナリオ削除用モーダルの制御 (index.html 内に実装)
---------------------------------------------------- */
function showDeleteScenarioModal(show) {
    const modal = document.getElementById("delete-scenario-modal");
    if (!modal) return;
    modal.style.display = show ? "flex" : "none";
}

// モーダル内「OK」ボタン
document.getElementById("delete-scenario-ok").addEventListener("click", async () => {
    if (scenarioIdToDelete == null) {
        showDeleteScenarioModal(false);
        return;
    }
    try {
        await deleteScenarioById(scenarioIdToDelete);  // indexedDB.js の関数
        showToast(`シナリオ(ID:${scenarioIdToDelete})を削除しました。`);
    } catch (err) {
        console.error(err);
        showToast("シナリオ削除に失敗:\n" + err.message);
    }
    scenarioIdToDelete = null;
    showDeleteScenarioModal(false);

    // 一覧を再描画するためページをリロード
    location.reload();
});

// モーダル内「キャンセル」ボタン
document.getElementById("delete-scenario-cancel").addEventListener("click", () => {
    scenarioIdToDelete = null;
    showDeleteScenarioModal(false);
});

document.getElementById("sample-btn").addEventListener("click", () => {
    showToast("ほげ");
});
--- 
partyCreate.js 
// partyCreate.js

// グローバル変数
window.partySelectionMode = false;    // パーティ側の選択モードフラグ
window.warehouseSelectionMode = false; // 倉庫側の選択モードフラグ

window.addEventListener("load", async function(){
    await initIndexedDB();
    const stored = await loadCharacterDataFromIndexedDB();
    if(stored) {
      window.characterData = stored;
    } else {
      window.characterData = [];
    }

    // パーティ表示
    renderParty();

    // 倉庫モーダル管理
    document.getElementById("show-warehouse-btn").addEventListener("click", () => {
      showWarehouseModal();
    });

    // 倉庫モーダルを閉じる
    document.getElementById("close-warehouse-btn").addEventListener("click", () => {
      document.getElementById("warehouse-modal").style.display = "none";
      // 倉庫側の選択をリセット
      warehouseSelectionMode = false;
      document.getElementById("toggle-warehouse-selection-mode-btn").textContent = "選択モード";
      document.getElementById("add-to-party-btn").style.display = "none";
      // 全カードの selected を外す
      const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
      selectedCards.forEach(el => el.classList.remove("selected"));
    });

    // 「選択モード（パーティ側）」ボタン
    document.getElementById("toggle-party-selection-mode-btn").addEventListener("click", () => {
      window.partySelectionMode = !window.partySelectionMode;
      const btn = document.getElementById("toggle-party-selection-mode-btn");
      if(partySelectionMode) {
        btn.textContent = "選択モード解除";
      } else {
        btn.textContent = "選択モード";
        // 解除時、選択を全リセット
        const selectedCards = document.querySelectorAll("#party-card-container .card.selected");
        selectedCards.forEach(el => el.classList.remove("selected"));
      }
      updatePartyMoveButtonVisibility();
    });

    // 「パーティ選択カードを倉庫に戻す」ボタン
    document.getElementById("move-selected-to-warehouse-btn").addEventListener("click", async () => {
      const selectedCards = document.querySelectorAll("#party-card-container .card.selected");
      if(selectedCards.length === 0) {
        alert("カードが選択されていません。");
        return;
      }
      selectedCards.forEach(el => {
        const cardId = el.getAttribute("data-id");
        const idx = window.characterData.findIndex(c => c.id === cardId);
        if(idx !== -1) {
          window.characterData[idx].group = "Warehouse";
        }
      });
      await saveCharacterDataToIndexedDB(window.characterData);
      // 選択解除 & 再描画
      selectedCards.forEach(el => el.classList.remove("selected"));
      renderParty();
      updatePartyMoveButtonVisibility();
    });

    // 「選択モード（倉庫側）」ボタン
    document.getElementById("toggle-warehouse-selection-mode-btn").addEventListener("click", () => {
      window.warehouseSelectionMode = !window.warehouseSelectionMode;
      const btn = document.getElementById("toggle-warehouse-selection-mode-btn");
      if(warehouseSelectionMode) {
        btn.textContent = "選択モード解除";
      } else {
        btn.textContent = "選択モード";
        // 解除時、選択を全リセット
        const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
        selectedCards.forEach(el => el.classList.remove("selected"));
      }
      updateWarehouseAddButtonVisibility();
    });

    // 「倉庫選択カードをパーティへ」ボタン
    document.getElementById("add-to-party-btn").addEventListener("click", async () => {
      const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
      if(selectedCards.length === 0) {
        alert("カードが選択されていません。");
        return;
      }
      selectedCards.forEach(el => {
        const cardId = el.getAttribute("data-id");
        const realIndex = window.characterData.findIndex(c => c.id === cardId);
        if(realIndex !== -1){
          window.characterData[realIndex].group = "Party";
        }
      });

      await saveCharacterDataToIndexedDB(window.characterData);
      // 選択解除
      selectedCards.forEach(el => el.classList.remove("selected"));
      // 倉庫再描画 & パーティ再描画
      showWarehouseModal();
      renderParty();
      updateWarehouseAddButtonVisibility();
    });

    // 戻るボタン
    document.getElementById("back-to-menu").addEventListener("click", () => {
      window.location.href = "index.html";
    });
});


/** パーティのカードを表示 */
function renderParty(){
  const partyContainer = document.getElementById("party-card-container");
  partyContainer.innerHTML = "";
  // group==="Party" のみ抽出
  const partyCards = window.characterData.filter(c => c.group === "Party");

  if(partyCards.length === 0){
    partyContainer.textContent = "パーティにカードがありません。";
    return;
  }

  partyCards.forEach((card) => {
    const cardEl = createPartyCardElement(card);
    partyContainer.appendChild(cardEl);
  });
}

/** パーティカード生成 */
function createPartyCardElement(card){
  const cardEl = document.createElement("div");
  cardEl.className = "card";
  cardEl.setAttribute("data-id", card.id);

  // クリック時の動作
  cardEl.addEventListener("click", (e) => {
    if(window.partySelectionMode) {
      e.stopPropagation();
      cardEl.classList.toggle("selected");
      updatePartyMoveButtonVisibility();
    } else {
      // 通常時はカードを反転
      cardEl.classList.toggle("flipped");
    }
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";

  const bgStyle = card.backgroundcss
      .replace("background-image:", "")
      .replace("background", "")
      .trim();
  cardFront.style = "background-image:" + bgStyle;

  const rarityValue = (typeof card.rarity === "string") ? card.rarity.replace("★", "").trim() : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = card.type || "不明";
  cardFront.appendChild(typeEl);

  const imageContainer = document.createElement("div");
  imageContainer.className = "card-image";
  if(card.imageData){
    const imageEl = document.createElement("img");
    imageEl.src = card.imageData;
    imageEl.alt = card.name;
    imageContainer.appendChild(imageEl);
  }
  cardFront.appendChild(imageContainer);

  const infoContainer = document.createElement("div");
  infoContainer.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(card.name) + "</h3>";
  infoContainer.appendChild(nameEl);

  if (card.state) {
    const stateEl = document.createElement("p");
    stateEl.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(card.state);
    infoContainer.appendChild(stateEl);
  }
  const specialEl = document.createElement("p");
  specialEl.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(card.special);
  infoContainer.appendChild(specialEl);

  const captionEl = document.createElement("p");
  captionEl.innerHTML = "<span>" + DOMPurify.sanitize(card.caption) + "</span>";
  infoContainer.appendChild(captionEl);

  cardFront.appendChild(infoContainer);

  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  cardEl.appendChild(cardInner);

  return cardEl;
}

/** 倉庫モーダルを表示 */
function showWarehouseModal(){
  const modal = document.getElementById("warehouse-modal");
  modal.style.display = "flex";

  const warehouseContainer = document.getElementById("warehouse-card-container");
  warehouseContainer.innerHTML = "";

  // group==="Warehouse" のみ
  const warehouseCards = window.characterData.filter(c => c.group === "Warehouse");
  if(warehouseCards.length === 0) {
    warehouseContainer.textContent = "倉庫にカードがありません。";
    return;
  }

  warehouseCards.forEach((card) => {
    const cardEl = createWarehouseCardElement(card);
    warehouseContainer.appendChild(cardEl);
  });
  updateWarehouseAddButtonVisibility();
}

/** 倉庫カード生成 */
function createWarehouseCardElement(card){
  const cardEl = document.createElement("div");
  cardEl.className = "card";
  cardEl.setAttribute("data-id", card.id);

  // クリック時
  cardEl.addEventListener("click", (e) => {
    if(window.warehouseSelectionMode) {
      e.stopPropagation();
      cardEl.classList.toggle("selected");
      updateWarehouseAddButtonVisibility();
    } else {
      cardEl.classList.toggle("flipped");
    }
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";
  const bgStyle = card.backgroundcss
      .replace("background-image:", "")
      .replace("background", "")
      .trim();
  cardFront.style = "background-image:" + bgStyle;

  const rarityValue = (typeof card.rarity === "string") ? card.rarity.replace("★", "").trim() : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = card.type || "不明";
  cardFront.appendChild(typeEl);

  const imageContainer = document.createElement("div");
  imageContainer.className = "card-image";
  if(card.imageData){
    const imageEl = document.createElement("img");
    imageEl.src = card.imageData;
    imageEl.alt = card.name;
    imageContainer.appendChild(imageEl);
  }
  cardFront.appendChild(imageContainer);

  const infoContainer = document.createElement("div");
  infoContainer.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(card.name) + "</h3>";
  infoContainer.appendChild(nameEl);

  if (card.state) {
    const stateEl = document.createElement("p");
    stateEl.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(card.state);
    infoContainer.appendChild(stateEl);
  }
  const specialEl = document.createElement("p");
  specialEl.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(card.special);
  infoContainer.appendChild(specialEl);

  const captionEl = document.createElement("p");
  captionEl.innerHTML = "<span>" + DOMPurify.sanitize(card.caption) + "</span>";
  infoContainer.appendChild(captionEl);

  cardFront.appendChild(infoContainer);

  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  cardEl.appendChild(cardInner);

  return cardEl;
}

/** パーティへ入れるボタンの表示・非表示制御（倉庫側） */
function updateWarehouseAddButtonVisibility(){
  const addBtn = document.getElementById("add-to-party-btn");
  if(!warehouseSelectionMode) {
    // 選択モードOFF時は非表示
    addBtn.style.display = "none";
    return;
  }
  // 選択モードON
  const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
  if(selectedCards.length > 0){
    addBtn.style.display = "inline-block";
  } else {
    addBtn.style.display = "none";
  }
}

/** 倉庫に戻すボタンの表示・非表示制御（パーティ側） */
function updatePartyMoveButtonVisibility(){
  const moveBtn = document.getElementById("move-selected-to-warehouse-btn");
  if(!partySelectionMode){
    moveBtn.style.display = "none";
    return;
  }
  const selectedCards = document.querySelectorAll("#party-card-container .card.selected");
  if(selectedCards.length > 0) {
    moveBtn.style.display = "inline-block";
  } else {
    moveBtn.style.display = "none";
  }
}
--- 
scenarioPage.js 
/********************************
 * scenarioPage.js
 * シナリオページ固有のUI操作
 * - 「回答候補を生成」機能
 * - 「カードを取得する」ボタンでプレビューモーダルを表示
 ********************************/

window.addEventListener("load", async () => {
  // 1. IndexedDB 初期化
  await initIndexedDB();

  // 2. もしwindow.characterDataが無ければ空配列を用意
  if (!window.characterData) {
    window.characterData = [];
  }

  // 3. IndexedDBからキャラクタ配列をロードし、上書き
  const stored = await loadCharacterDataFromIndexedDB();
  if (stored && stored.length > 0) {
    window.characterData = stored;
  }

  console.log(
    "scenarioPage.js: IndexedDB init & characterData loaded. length=",
    window.characterData.length
  );

  // メニューに戻るボタン（シナリオ画面 → index.html）
  const backToMenuBtn = document.getElementById("back-to-menu");
  if (backToMenuBtn) {
    backToMenuBtn.addEventListener("click", () => {
      window.location.href = "index.html";
    });
  }

  // ネタバレ（目的達成型）
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.style.display = "flex";
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.style.display = "none";
    });
  }

  // -----------------------------
  // 「カードを取得する」ボタン押下 → プレビューモーダル
  // -----------------------------
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    getCardButton.addEventListener("click", async () => {
      // 1) 最新シーンからカード化に使えそうな情報を要約
      const sceneSummary = await getLastSceneSummary();

      // シーン要約中から【名前】や【タイプ】【外見】等を抜き出す（サンプル実装）
      const lines = sceneSummary.split("\n");
      let onlyTitle = "", onlyType = "", addPrompt = "";
      lines.forEach((line) => {
        const trimLine = line.trim();
        if (trimLine.startsWith("【名前】")) {
          onlyTitle = trimLine.replace("【名前】", "").replace("：", "").trim();
        } else if (trimLine.startsWith("【タイプ】")) {
          onlyType = trimLine.replace("【タイプ】", "").replace("：", "").trim();
        } else if (trimLine.startsWith("【外見】")) {
          addPrompt = trimLine.replace("【外見】", "").replace("：", "").trim();
        }
      });

      // 2) プレビューモーダルを表示（テキストでの説明）
      const previewModal = document.getElementById("card-preview-modal");
      const previewContainer = document.getElementById("preview-card-container");
      if (!previewModal || !previewContainer) return;

      // いったん内部をクリア
      previewContainer.innerHTML = "";

      // ここでは仮に「このカードの概要」をテキストで表示するサンプル
      const preText = document.createElement("p");
      preText.textContent = 
        `【名前】：${onlyTitle || "(未取得)"}\n` +
        `【タイプ】：${onlyType || "(未取得)"}\n` +
        `【外見(生成プロンプト)】：${addPrompt || "(未取得)"}\n\n` +
        "この内容でカードを生成しますか？"
      ;
      preText.style.whiteSpace = "pre-wrap";
      previewContainer.appendChild(preText);

      // モーダルを表示
      previewModal.style.display = "flex";

      // 「ガチャ箱に追加」ボタン
      const addBtn = document.getElementById("add-to-gachabox-button");
      if (addBtn) {
        addBtn.onclick = async () => {
          previewModal.style.display = "none";
          // 実際にカードを生成（1枚）してガチャ箱へ
          const gachaModal = document.getElementById("gacha-modal");
          if (gachaModal) {
            gachaModal.style.display = "flex";
          }
          try {
            await runGacha(1, addPrompt, onlyTitle, onlyType);
            alert("新しいカードをガチャ箱に追加しました。\n「エレメント作成」画面で確認できます。");
          } catch (err) {
            console.error(err);
            alert("カード生成に失敗しました:\n" + err.message);
          } finally {
            if (gachaModal) {
              gachaModal.style.display = "none";
            }
          }
        };
      }

      // 「キャンセル」ボタン
      const cancelBtn = document.getElementById("cancel-card-preview-button");
      if (cancelBtn) {
        cancelBtn.onclick = () => {
          previewModal.style.display = "none";
        };
      }
    });
  }

  // -----------------------------
  // 「回答候補を生成」ボタン
  // -----------------------------
  const generateActionCandidatesBtn = document.getElementById("generate-action-candidates-button");
  if (generateActionCandidatesBtn) {
    generateActionCandidatesBtn.addEventListener("click", onGenerateActionCandidates);
  }
});

/**
 * 回答候補（プレイヤー行動案）を生成
 */
async function onGenerateActionCandidates() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  // 最新シーンを取得
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === 'scene');
  const lastSceneText = lastSceneEntry ? lastSceneEntry.content : "(シーンがありません)";

  window.cancelRequested = false;
  showLoadingModal(true);

  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const prompt = `
      あなたはTRPGのゲームマスターです。
      次のシーンは下記の描写です。
      ---
      ${lastSceneText}
      ---
      この状況でプレイヤーが取り得る行動案を5つほど提案してください。
      箇条書き形式で短めにお願いします。
    `;

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method:"POST",
      headers:{
        "Content-Type":"application/json",
        "Authorization":`Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role:"system", content:"あなたは優秀なTRPGのアシスタントです。"},
          { role:"user", content: prompt }
        ],
        temperature:0.7
      }),
      signal
    });

    const data = await response.json();
    if(data.error){
      throw new Error(data.error.message);
    }

    const content = data.choices[0].message.content.trim();
    // 「1. ～」のような形式で来るので行ごとにボタン生成
    const lines = content.split("\n").map(l=>l.trim()).filter(l=>l);

    const container = document.getElementById("action-candidates-container");
    if(!container) return;
    container.innerHTML = "";

    lines.forEach(line => {
      const btn = document.createElement("button");
      btn.textContent = line.replace(/^\d+\.\s*/, "");  // 行頭の "1. "などを削除
      btn.style.display = "block";
      btn.style.margin = "5px 0";

      // クリックで #player-input に反映
      btn.addEventListener("click", ()=>{
        const playerInput = document.getElementById("player-input");
        if(playerInput){
          playerInput.value = btn.textContent;
        }
      });

      container.appendChild(btn);
    });

  } catch(err){
    if(err.name === "AbortError"){
      console.log("回答候補生成キャンセル");
    } else {
      console.error(err);
      alert("回答候補の生成に失敗しました:\n" + err.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/**
 * 最新シーンの内容を ChatGPT で要約し、カード用の【名前】【タイプ】【外見】を抽出する。
 */
async function getLastSceneSummary() {
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  if (!lastSceneEntry) return "シーンがありません。";

  const fullText = lastSceneEntry.content;

  const systemPrompt = `あなたは優秀なカード作成用プロンプト製造者です。以下のフォーマットでプロンプトを製造してください。
【名前】：...
【タイプ】：キャラクター、モンスター、アイテムのいずれか
【外見】：...
`;
  const userPrompt = `
以下のシナリオの1シーンから、エレメントにできそうな対象を1つだけ取り出し、
カード用の【名前】【タイプ】【外見】を生成してください。
---
${fullText}
---
`;

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ]
      }),
    });

    const data = await response.json();
    if (data.error) throw new Error(data.error.message);

    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("要約取得失敗:", err);
    return "(要約失敗)";
  }
}

/** ローディングモーダルの表示/非表示 */
function showLoadingModal(show){
  const modal = document.getElementById("loading-modal");
  if(!modal) return;
  modal.style.display = show ? "flex" : "none";
}

/** リクエストを中断 */
function onCancelFetch(){
  if(window.currentRequestController){
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}
--- 
scenarioWizard.js 
/********************************
 * scenarioWizard.js
 * 新しいシナリオ作成ウィザード (複数シナリオ対応)
 ********************************/

let wizardData = {
  genre: "",
  scenarioType: "",      // "objective" or "exploration"
  clearCondition: "",    // 目的達成型ならChatGPTから取得
  scenarioSummary: ""    // 全体のシナリオ要約
};

window.addEventListener("load", async function () {
  await initIndexedDB();
  loadWizardDataFromLocalStorage();

  // イベント設定
  document.getElementById("generate-genre-button").addEventListener("click", onGenerateGenre);
  document.getElementById("clear-genre-button").addEventListener("click", onClearGenre);
  document.getElementById("confirm-genre-button").addEventListener("click", onConfirmGenre);

  document.getElementById("type-objective-btn").addEventListener("click", () => onSelectScenarioType("objective"));
  document.getElementById("type-exploration-btn").addEventListener("click", () => onSelectScenarioType("exploration"));

  document.getElementById("back-to-step1-button").addEventListener("click", onBackToStep1);
  document.getElementById("back-to-step2-button").addEventListener("click", onBackToStep2FromStep3);

  document.getElementById("start-scenario-button").addEventListener("click", onStartScenario);
  document.getElementById("cancel-request-button").addEventListener("click", onCancelFetch);

  // モーダルのOK/Cancel
  document.getElementById("confirm-scenario-ok").addEventListener("click", onConfirmScenarioModalOK);
  document.getElementById("confirm-scenario-cancel").addEventListener("click", onConfirmScenarioModalCancel);

  updateSelectedGenreDisplay();
});

/* ---- ステップ1 ---- */
async function onGenerateGenre() {
  const genreListDiv = document.getElementById("genre-list");
  const apiKey = localStorage.getItem("apiKey") || "";
  if (!apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }

  showLoadingModal(true);
  window.currentRequestController = new AbortController();
  const signal = window.currentRequestController.signal;

  try {
    const messages = [
      { role: "system", content: "あなたはTRPGのプロです。ジャンルを5つ提案してください。" },
      { role: "user", content: "SF, 中世ファンタジー, 現代など、TRPGに使いやすいジャンル候補を5つ、箇条書きで出してください。" }
    ];
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: messages,
        temperature: 0.7
      }),
      signal
    });

    const data = await response.json();
    if (data.error) throw new Error(data.error.message);

    const content = data.choices[0].message.content;
    const lines = content.split("\n").map(l => l.trim()).filter(l => l);

    // appendでボタンを追加
    lines.forEach(line => {
      const btn = document.createElement("button");
      btn.classList.add("candidate-button");
      btn.textContent = line.replace(/^\d+\.\s*/, "");
      btn.style.display = "block";
      btn.style.margin = "5px 0";

      btn.addEventListener("click", () => {
        wizardData.genre = btn.textContent;
        saveWizardDataToLocalStorage();
        highlightSelectedButton(genreListDiv, btn);
        // ステップ1→ステップ2
        document.getElementById("wizard-step1").style.display = "none";
        document.getElementById("wizard-step2").style.display = "block";
        updateSelectedGenreDisplay();
      });
      genreListDiv.appendChild(btn);
    });
  } catch (err) {
    if (err.name === "AbortError") {
      console.log("ジャンル生成キャンセル");
    } else {
      console.error(err);
      alert("ジャンル生成に失敗しました:\n" + err.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

function onClearGenre() {
  const genreListDiv = document.getElementById("genre-list");
  genreListDiv.innerHTML = "";
  wizardData.genre = "";
  document.getElementById("free-genre-input").value = "";
  saveWizardDataToLocalStorage();
}

function onConfirmGenre() {
  const freeInput = document.getElementById("free-genre-input");
  const txt = (freeInput.value || "").trim();
  if (!txt) {
    alert("ジャンルを入力してください。");
    return;
  }
  wizardData.genre = txt;
  saveWizardDataToLocalStorage();

  // ステップ1→ステップ2
  document.getElementById("wizard-step1").style.display = "none";
  document.getElementById("wizard-step2").style.display = "block";
  updateSelectedGenreDisplay();
}

/* ---- ステップ2 ---- */

// シナリオタイプ選択時→いきなり生成せず、モーダルを出す
function onSelectScenarioType(type) {
  wizardData.scenarioType = type;
  saveWizardDataToLocalStorage();

  // モーダルのテキストを更新
  const textEl = document.getElementById("confirm-genre-type-text");
  textEl.textContent = `ジャンル: ${wizardData.genre}\nシナリオタイプ: ${type === "objective" ? "目的達成型" : "探索型"}`;
  // モーダル表示
  const modal = document.getElementById("confirm-scenario-modal");
  modal.style.display = "flex";
}

// モーダル: OK
async function onConfirmScenarioModalOK() {
  // モーダルを閉じる
  const modal = document.getElementById("confirm-scenario-modal");
  modal.style.display = "none";

  // ここでシナリオ生成開始
  if (wizardData.scenarioType === "objective") {
    await generateScenarioSummaryAndClearCondition();
  } else {
    await generateScenarioSummary();
  }

  // ステップ2→ステップ3
  document.getElementById("wizard-step2").style.display = "none";
  document.getElementById("wizard-step3").style.display = "block";
}

// モーダル: キャンセル
function onConfirmScenarioModalCancel() {
  const modal = document.getElementById("confirm-scenario-modal");
  modal.style.display = "none";
  // ステップ2に留まる
}

function onBackToStep1() {
  document.getElementById("wizard-step2").style.display = "none";
  document.getElementById("wizard-step1").style.display = "block";
}

/* ---- ステップ3 ---- */

// 「ステップ2に戻る」
function onBackToStep2FromStep3() {
  document.getElementById("wizard-step3").style.display = "none";
  document.getElementById("wizard-step2").style.display = "block";
}

// 「このシナリオで始める」 => 新しいシナリオIDを発行し、scenario.html へ
async function onStartScenario() {
  try {
    // シナリオ名を何にするか？ ひとまずジャンルか、あるいは "新シナリオ"
    let title = wizardData.genre || "新シナリオ";

    // シナリオをDBに追加
    const scenarioId = await createNewScenario(wizardData, title);

    // scenario.html?scenarioId=xxx に飛ぶ
    window.location.href = `scenario.html?scenarioId=${scenarioId}`;
  } catch (err) {
    console.error("シナリオ作成失敗:", err);
    alert("シナリオを開始できませんでした:\n" + err.message);
  }
}

/* ---- シナリオ生成 (GPT呼び出し) ---- */
async function generateScenarioSummaryAndClearCondition() {
  wizardData.scenarioSummary = "";
  wizardData.clearCondition = "";
  saveWizardDataToLocalStorage();

  const apiKey = localStorage.getItem("apiKey") || "";
  if (!apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }

  showLoadingModal(true);
  window.currentRequestController = new AbortController();
  const signal = window.currentRequestController.signal;

  try {
    const prompt = `
      あなたはTRPG用のシナリオ作成に長けたアシスタントです。
      ジャンルは「${wizardData.genre}」、シナリオタイプは「目的達成型」です。
      以下を生成してください：
      1. シナリオの概要（短め）
      2. このシナリオのクリア条件（【クリア条件】という見出しで書いてください）
         ただし、【クリア条件】はプレイヤーに公開しません。
    `;
    const messages = [
      { role: "system", content: "あなたは優秀なTRPGシナリオメーカーです。" },
      { role: "user", content: prompt }
    ];

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.7
      }),
      signal
    });
    const data = await response.json();
    if (data.error) throw new Error(data.error.message);

    const text = data.choices[0].message.content;
    let clearConditionPart = "";
    let summaryPart = text;
    if (text.includes("【クリア条件】")) {
      const arr = text.split("【クリア条件】");
      summaryPart = arr[0].trim();
      clearConditionPart = arr[1] ? arr[1].trim() : "";
    }
    wizardData.scenarioSummary = summaryPart;
    wizardData.clearCondition = clearConditionPart;
  } catch (err) {
    if (err.name === "AbortError") {
      console.log("目的達成型シナリオ生成キャンセル");
    } else {
      console.error(err);
      alert("目的達成型シナリオ生成に失敗:\n" + err.message);
    }
  } finally {
    showLoadingModal(false);
    saveWizardDataToLocalStorage();
    updateSummaryUI();
  }
}

async function generateScenarioSummary() {
  wizardData.scenarioSummary = "";
  saveWizardDataToLocalStorage();

  const apiKey = localStorage.getItem("apiKey") || "";
  if (!apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }

  showLoadingModal(true);
  window.currentRequestController = new AbortController();
  const signal = window.currentRequestController.signal;

  try {
    const prompt = `
      あなたはTRPG用のシナリオ作成に長けたアシスタントです。
      ジャンルは「${wizardData.genre}」、シナリオタイプは「探索型」です。
      ストーリー内でエレメントを手に入れることができるようにしてください。
      概要は短めで、プレイヤーが興味を持ちそうな設定を盛り込んでください。
    `;
    const messages = [
      { role: "system", content: "あなたは優秀なTRPGシナリオメーカーです。" },
      { role: "user", content: prompt }
    ];

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.7
      }),
      signal
    });
    const data = await response.json();
    if (data.error) throw new Error(data.error.message);

    wizardData.scenarioSummary = data.choices[0].message.content;
  } catch (err) {
    if (err.name === "AbortError") {
      console.log("探索型シナリオ生成キャンセル");
    } else {
      console.error(err);
      alert("探索型シナリオ生成に失敗:\n" + err.message);
    }
  } finally {
    showLoadingModal(false);
    saveWizardDataToLocalStorage();
    updateSummaryUI();
  }
}

/* ---- 表示更新 ---- */
function updateSummaryUI() {
  const summaryDiv = document.getElementById("scenario-summary");
  const scenario = wizardData.scenarioSummary || "（シナリオ概要なし）";
  summaryDiv.textContent = scenario;
}

function updateSelectedGenreDisplay() {
  const displayEl = document.getElementById("selected-genre-display");
  if (!displayEl) return;
  if (wizardData.genre) {
    displayEl.textContent = wizardData.genre;
  } else {
    displayEl.textContent = "（未選択）";
  }
}

/* ---- localStorage ---- */
function loadWizardDataFromLocalStorage() {
  const dataStr = localStorage.getItem("wizardData");
  if (!dataStr) return;
  try {
    const obj = JSON.parse(dataStr);
    wizardData = obj;
  } catch (e) {
    console.warn("wizardData parse失敗", e);
  }
}

function saveWizardDataToLocalStorage() {
  localStorage.setItem("wizardData", JSON.stringify(wizardData));
}

/* ---- モーダル操作 ---- */
function showLoadingModal(show) {
  const modal = document.getElementById("loading-modal");
  if (!modal) return;
  modal.style.display = show ? "flex" : "none";
}

function onCancelFetch() {
  if (window.currentRequestController) {
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}

/** ハイライト */
function highlightSelectedButton(container, targetBtn) {
  const allBtns = container.querySelectorAll(".candidate-button");
  allBtns.forEach(b => b.style.backgroundColor = "");
  targetBtn.style.backgroundColor = "#8BC34A";
}
--- 
scene.js 
/********************************
 * scene.js - シナリオ/シーン管理関連 (複数シナリオ対応)
 ********************************/

// グローバル変数
window.apiKey = '';
// 旧フリーシナリオ用
window.scenario = '';
window.currentScene = 0;
window.sceneHistory = [];

// 複数シナリオ用
window.currentScenarioId = null;      // URL param
window.currentScenario = null;        // { scenarioId, title, wizardData... }

window.currentRequestController = null;
window.cancelRequested = false;
window.editingImageEntry = null;

/** ユニークIDを生成(シーン区別用) */
function generateUniqueId() {
  return Date.now() + '_' + Math.random().toString(36).slice(2, 9);
}

/** 指定シナリオをロードし、sceneHistoryに展開 */
async function loadScenarioData(scenarioId) {
  try {
    // シナリオ情報を取得
    const scenario = await getScenarioById(scenarioId);
    if (!scenario) {
      alert("指定されたシナリオIDが存在しません。");
      return;
    }
    window.currentScenario = scenario;

    // シナリオのWizardDataから scenarioType, clearCondition を復元
    const wd = scenario.wizardData || {};
    window.scenarioType = wd.scenarioType; // "objective" or "exploration"
    window.clearCondition = wd.clearCondition || "";

    // シーンエントリを読み込む
    const entries = await getSceneEntriesByScenarioId(scenarioId);
    // sceneHistory相当の配列を構築
    window.sceneHistory = entries.map(e => {
      return {
        entryId: e.entryId,
        type: e.type,
        sceneId: e.sceneId,
        content: e.content,
        dataUrl: e.dataUrl,
        prompt: e.prompt
      };
    });

    // 目的達成型ならネタバレボタン表示
    if (window.scenarioType === "objective") {
      const sb = document.getElementById("spoiler-button");
      if (sb) sb.style.display = "inline-block";
      // ネタバレモーダルの文言
      const spTxt = document.getElementById("clear-condition-text");
      if (spTxt) {
        spTxt.textContent = window.clearCondition || "（クリア条件なし）";
      }
    }
    // 探索型なら「カードを取得する」ボタン表示
    else if (window.scenarioType === "exploration") {
      const gcb = document.getElementById("get-card-button");
      if (gcb) gcb.style.display = "inline-block";
    }

  } catch (err) {
    console.error("シナリオ読み込み失敗:", err);
    alert("シナリオ読み込み失敗:\n" + err.message);
  }
}

/** 新しいシーンを追加 (ChatGPT呼び出し) */
async function getNextScene() {
  if (!window.apiKey) {
    alert('APIキーが設定されていません。');
    return;
  }
  const playerInput = document.getElementById('player-input').value.trim();

  // シーンが既にある場合のみ、プレイヤー行動が未入力ならアラート
  const hasScene = window.sceneHistory.some(e => e.type === 'scene');
  if (hasScene && !playerInput) {
    alert('プレイヤーの行動を入力してください');
    return;
  }

  window.cancelRequested = false;
  showLoadingModal(true);

  const messages = [
    { role: 'system', content: 'あなたはTRPGのゲームマスターです。HTMLタグOK。' },
  ];

  // 複数シナリオの場合 => scenarioWizardで作った要約などをベースに
  if (window.currentScenario) {
    const wizardData = window.currentScenario.wizardData || {};
    const scenarioSummary = wizardData.scenarioSummary || "(概要なし)";
    messages.push({ role: 'user', content: `シナリオ概要:${scenarioSummary}` });
  } else {
    // 旧フリーシナリオ
    messages.push({ role: 'user', content: `シナリオ概要:${window.scenario}` });
  }

  // 過去のシーン履歴をすべて messages に
  window.sceneHistory.forEach(e => {
    if (e.type === 'scene') {
      messages.push({ role: 'assistant', content: e.content });
    } else if (e.type === 'action') {
      messages.push({ role: 'user', content: `プレイヤーの行動:${e.content}` });
    }
  });

  // 今回のプレイヤー行動
  if (playerInput) {
    messages.push({ role: 'user', content: `プレイヤーの行動:${playerInput}` });
  }

  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages
      }),
      signal
    });
    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    const data = await response.json();
    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    if (data.error) {
      throw new Error(data.error.message);
    }

    // 次のシーン内容
    const nextScene = data.choices[0].message.content;

    // 1) (プレイヤー行動があったなら) actionをsceneHistoryへ
    if (playerInput) {
      const actionEntry = {
        scenarioId: window.currentScenarioId || 0, // 0は旧フリー
        type: 'action',
        content: playerInput,
        sceneId: null
      };
      const newActionId = await addSceneEntry(actionEntry);
      window.sceneHistory.push({
        entryId: newActionId,
        type: 'action',
        content: playerInput,
      });
      // 入力欄クリア
      document.getElementById('player-input').value = '';
    }

    // 2) sceneを追加
    const newSceneIdStr = generateUniqueId();
    const sceneEntry = {
      scenarioId: window.currentScenarioId || 0,
      type: 'scene',
      sceneId: newSceneIdStr,
      content: nextScene
    };
    const newSceneEntryId = await addSceneEntry(sceneEntry);
    window.sceneHistory.push({
      entryId: newSceneEntryId,
      type: 'scene',
      sceneId: newSceneIdStr,
      content: nextScene
    });

    updateSceneHistory();
    showLastScene();

    // シナリオ本体の updatedAt も更新
    if (window.currentScenario) {
      await updateScenario({
        ...window.currentScenario,
        updatedAt: new Date().toISOString()
      });
    }

  } catch (error) {
    if (error.name === 'AbortError') {
      console.warn('シーン取得キャンセル');
    } else {
      console.error('シーン取得失敗:', error);
      alert('シーン取得に失敗:\n' + error.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/**
 * シーン履歴をUIに反映
 * ただし「最新の1件」は表示しないという仕様のため、表示配列から除外します。
 */
function updateSceneHistory() {
  const historyContainer = document.getElementById('scene-history');
  if (!historyContainer) return;

  // いったんクリア
  historyContainer.innerHTML = '';

  // 「最新の1件」は履歴表示しない
  if (window.sceneHistory.length <= 1) {
    // 1件以下なら何も表示しない
    return;
  }

  // 末尾1件を除いたエントリを表示対象に
  const displayEntries = window.sceneHistory.slice(0, -1);

  displayEntries.forEach((entry) => {
    if (entry.type === 'scene') {
      // シーン表示
      const tile = document.createElement('div');
      tile.className = 'history-tile';

      // シーン削除ボタン
      const deleteBtn = document.createElement('button');
      deleteBtn.textContent = '削除';
      deleteBtn.style.marginBottom = '5px';
      deleteBtn.addEventListener('click', async () => {
        if (!window.apiKey) return;

        const delSceneId = entry.sceneId;
        const toRemoveIds = [entry.entryId];
        // 紐づく画像も削除
        window.sceneHistory.forEach(e => {
          if (e.type === 'image' && e.sceneId === delSceneId) {
            toRemoveIds.push(e.entryId);
          }
        });
        // DB削除
        for (const rid of toRemoveIds) {
          await deleteSceneEntry(rid);
        }
        // メモリ上も除外
        window.sceneHistory = window.sceneHistory.filter(e => !toRemoveIds.includes(e.entryId));

        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(deleteBtn);

      // シーン本文
      const sceneText = document.createElement('p');
      sceneText.className = 'scene-text';
      sceneText.setAttribute('contenteditable', window.apiKey ? 'true' : 'false');
      sceneText.innerHTML = DOMPurify.sanitize(entry.content);
      sceneText.addEventListener('blur', async () => {
        if (!window.apiKey) return;
        entry.content = sceneText.textContent.trim();
        // DB更新
        const updated = {
          entryId: entry.entryId,
          scenarioId: window.currentScenarioId || 0,
          type: 'scene',
          sceneId: entry.sceneId,
          content: entry.content
        };
        await updateSceneEntry(updated);
      });
      tile.appendChild(sceneText);

      historyContainer.appendChild(tile);

    } else if (entry.type === 'action') {
      // プレイヤー行動
      const tile = document.createElement('div');
      tile.className = 'history-tile';

      const deleteBtn = document.createElement('button');
      deleteBtn.textContent = '削除';
      deleteBtn.style.marginBottom = '5px';
      deleteBtn.addEventListener('click', async () => {
        if (!window.apiKey) return;

        await deleteSceneEntry(entry.entryId);
        window.sceneHistory = window.sceneHistory.filter(e => e.entryId !== entry.entryId);

        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(deleteBtn);

      const actionText = document.createElement('p');
      actionText.className = 'action-text';
      actionText.setAttribute('contenteditable', window.apiKey ? 'true' : 'false');
      actionText.innerHTML = DOMPurify.sanitize(entry.content);
      actionText.addEventListener('blur', async () => {
        if (!window.apiKey) return;
        entry.content = actionText.textContent.trim();
        // DB更新
        const updated = {
          entryId: entry.entryId,
          scenarioId: window.currentScenarioId || 0,
          type: 'action',
          content: entry.content
        };
        await updateSceneEntry(updated);
      });
      tile.appendChild(actionText);

      historyContainer.appendChild(tile);

    } else if (entry.type === 'image') {
      // 画像
      const tile = document.createElement('div');
      tile.className = 'history-tile';

      const img = document.createElement('img');
      img.src = entry.dataUrl;
      img.alt = '生成画像';
      img.style.maxWidth = '100%';
      tile.appendChild(img);

      // 画像再生成
      const regenBtn = document.createElement('button');
      regenBtn.textContent = '再生成';
      regenBtn.addEventListener('click', () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(entry);
        if (idx >= 0) {
          openImagePromptModal(entry.prompt, idx);
        }
      });
      tile.appendChild(regenBtn);

      // 画像削除
      const imgDeleteBtn = document.createElement('button');
      imgDeleteBtn.textContent = '画像だけ削除';
      imgDeleteBtn.addEventListener('click', async () => {
        if (!window.apiKey) return;
        await deleteSceneEntry(entry.entryId);
        window.sceneHistory = window.sceneHistory.filter(e => e.entryId !== entry.entryId);
        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(imgDeleteBtn);

      historyContainer.appendChild(tile);
    }
  });

  historyContainer.scrollTop = historyContainer.scrollHeight;
}

/** 最新シーンをメイン表示 */
function showLastScene() {
  const storyDiv = document.getElementById('story');
  const lastSceneImagesDiv = document.getElementById('last-scene-images');
  if (!storyDiv || !lastSceneImagesDiv) return;

  const nextSceneBtn = document.getElementById('next-scene');
  const playerInput = document.getElementById('player-input');
  const playerActionLabel = document.getElementById('player-action');

  // 最新シーンを探す
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === 'scene');

  if (lastSceneEntry) {
    storyDiv.innerHTML = DOMPurify.sanitize(lastSceneEntry.content);
    lastSceneImagesDiv.innerHTML = '';

    // 同じsceneIdの画像をまとめて表示
    const images = window.sceneHistory.filter(e => e.type === 'image' && e.sceneId === lastSceneEntry.sceneId);
    images.forEach(imgEntry => {
      const container = document.createElement('div');
      container.style.marginBottom = '10px';

      const img = document.createElement('img');
      img.src = imgEntry.dataUrl;
      img.alt = 'シーン画像';
      img.style.maxWidth = '100%';
      container.appendChild(img);

      // 再生成
      const regenBtn = document.createElement('button');
      regenBtn.textContent = '再生成';
      regenBtn.addEventListener('click', () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(imgEntry);
        if (idx >= 0) {
          openImagePromptModal(imgEntry.prompt, idx);
        }
      });
      container.appendChild(regenBtn);

      // 画像削除
      const delBtn = document.createElement('button');
      delBtn.textContent = '画像削除';
      delBtn.addEventListener('click', async () => {
        if (!window.apiKey) return;
        await deleteSceneEntry(imgEntry.entryId);
        window.sceneHistory = window.sceneHistory.filter(e => e.entryId !== imgEntry.entryId);
        showLastScene();
        updateSceneHistory();
      });
      container.appendChild(delBtn);

      lastSceneImagesDiv.appendChild(container);
    });

    if (window.apiKey) {
      nextSceneBtn.style.display = 'inline-block';
      playerInput.style.display = 'inline-block';
      playerActionLabel.textContent = 'プレイヤーがどんな行動を取るか？';
    } else {
      nextSceneBtn.style.display = 'none';
      playerInput.style.display = 'none';
      playerActionLabel.textContent = '';
    }
  } else {
    // シーンがまだ無い場合
    storyDiv.innerHTML = '';
    lastSceneImagesDiv.innerHTML = '';

    // ウィザードで作成したシナリオなら要約を表示
    if (window.currentScenario && window.currentScenario.wizardData) {
      const summary = window.currentScenario.wizardData.scenarioSummary || "（シナリオ概要なし）";
      storyDiv.innerHTML = `
          <div style="margin-bottom: 10px; font-weight: bold;">
            ${DOMPurify.sanitize(summary)}
          </div>
        `;
    }

    if (window.apiKey) {
      nextSceneBtn.style.display = 'inline-block';
      playerInput.style.display = 'block';
      playerActionLabel.textContent = '最初のシーンを作るために行動を入力してください。';
    } else {
      nextSceneBtn.style.display = 'none';
      playerInput.style.display = 'none';
      playerActionLabel.textContent = '';
    }
  }
}

/** ローディングモーダル表示/非表示 */
function showLoadingModal(show) {
  const modal = document.getElementById('loading-modal');
  if (!modal) return;
  modal.style.display = show ? 'flex' : 'none';
}

/** キャンセルボタン */
function onCancelFetch() {
  window.cancelRequested = true;
  if (window.currentRequestController) {
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}
--- 
