貴方は会社の中で一番のエンジニアです。
・初期状態でscene-historyは非表示とする
・scenario画面では、アプリケーションバーに「履歴」ボタンをJavascriptで追加する
・ボタンのアイコンのクラスはicon-newspaperとする。アイコンだけではわかりにくいので隣に「履歴」という文字もいれる
・このボタンはトグルになっていて、scene-historyの表示と非表示を切り替えることができる
・scene-historyの表示非表示状態はindexedDBのシナリオに保存しておく
以上を実施し、編集しないファイルを除き完全なコードを下さい。しかしながら、最高の成果物を出すために、少しでも不明な点があれば質問をください。
scenario.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>シンプルTRPG</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <!-- 黒背景 + 白文字ベースのCSS -->
  <link rel="stylesheet" href="styles.css" />
  <!-- サニタイズ -->
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
  <!-- 背景管理用 -->
  <script src="js/background.js"></script>
  <!-- 雑多 -->
  <script src="js/common.js"></script>

</head>

<body>
<div class="application-bar">
  

    <!-- メニューに戻るボタン -->
    <button id="back-to-menu"><div class="iconmoon icon-home3"></div></button>
    <!-- 背景を変更するボタン -->
    <button id="change-bg-button"><div class="iconmoon icon-picture"></div></button>
    <!-- ▼ 背景選択モーダル -->
    <div id="bg-modal" class="modal">
      <div class="modal-content bg-modal-content">
        <h2>背景選択</h2>
        <div id="bg-stock-container" class="bg-stock-grid"></div>
        <div class="c-flexbox">
          <button id="bg-none-button" class="btn-secondary">背景無し</button>
          <button id="bg-generate-button">生成する</button>
        </div>
        <div class="c-flexbox">
          <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
        </div>
      </div>
    </div>
    <div id="bg-generate-modal" class="modal">
      <div class="modal-content">
        <p>背景画像を生成中...</p>
      </div>
    </div>
  </div>
  <!-- ▼ トークン調整ボタン -->
  <!--button id="token-adjust-button"-->
    トークン調整
  </button>
  <!-- トークン調整モーダル -->
  <div id="token-adjust-modal" class="modal">
    <div class="modal-content" style="max-width:500px;">
      <h2>英語データの生成</h2>
      <p id="token-adjust-message"></p>
      <button id="token-adjust-ok-button">OK</button>
      <button id="token-adjust-cancel-button">キャンセル</button>
      <p id="token-adjust-progress" style="margin-top:20px;white-space:pre;"></p>
    </div>
  </div>

  <!-- ネタバレボタン（目的達成型のみ表示） -->
  <!--button id="spoiler-button" style="display:none; background-color:#E91E63; margin-top:20px; float:right;">
    ネタバレ
  </button-->

  <!-- ネタバレモーダル -->
  <div id="spoiler-modal" class="modal">
    <div class="modal-content">
      <h2>クリア条件</h2>
      <p id="clear-condition-text" style="white-space:pre-wrap;"></p>
      <button id="close-spoiler-modal">閉じる</button>
    </div>
  </div>

  <div class="container">
    <!-- シーン履歴 -->
    <div id="scene-history" class="scene-history"></div>

    <!-- ゲーム画面セクション -->
    <div class="game-section" style="display:none;">
      <div id="story" style="margin-bottom:20px;"></div>
      <div id="last-scene-images" style="margin-bottom:20px;"></div>

      <!-- 画像生成ボタン -->
      <div class="r-flexbox">
        <button id="image-auto-generate-button">挿絵生成</button>
        <!--button id="image-prompt-modal-button">編集して生成(カスタム)</button-->
      </div>

      <div id="player-action">プレイヤーの行動を入力してください</div>
      <!-- 回答候補を生成ボタンとチェックボックス -->
      <div style="margin-top:10px;display: flex;">
        <button id="generate-action-candidates-button">回答候補を生成</button>
        <label style="margin-left:10px;display: flex;">
          <input type="checkbox" id="auto-generate-candidates-checkbox" />
          <p style="width: 100%;">自動的に生成する</p>
        </label>
      </div>
      <div id="action-candidates-container" style="margin-top:10px;"></div>

      <div id="action-candidates-container" style="margin-top:10px;"></div>

      <textarea id="player-input" rows="4" placeholder="プレイヤーの行動を入力..."></textarea>

      <div class="s-flexbox">
        <button id="next-scene">次のシーン</button>

        <!-- パーティーを確認ボタン -->
        <button id="show-party-button">パーティーを確認</button>
      </div>

    </div>
    <div class="c-flexbox">
      <!-- ▼ エンディング関連ボタン&モーダル（追加） -->
      <button id="ending-button" style="display:none;">エンディング</button>
      <button id="clear-ending-button" style="display:none;">クリア・エンディング</button>

    </div>

  </div>

  <!-- 全セクションを閲覧するボタン -->
  <button id="view-all-sections-button">全セクションを閲覧する</button>

  <!-- 全セクション表示モーダル -->
  <div id="all-sections-modal" class="modal">
    <div class="modal-content">
      <h2>全セクション一覧</h2>
      <div id="all-sections-content" style="white-space:pre-wrap; text-align:left;"></div>
      <button id="close-all-sections-modal" style="margin-top:10px;">閉じる</button>
    </div>
  </div>

  <!-- ローディングモーダル -->
  <div id="loading-modal" class="modal">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- カスタム画像生成モーダル -->
  <div id="image-prompt-modal" class="modal">
    <div class="modal-content" style="max-width:400px;">
      <p>画像生成のプロンプトを編集してください</p>
      <textarea id="image-custom-prompt" rows="5" style="width:100%;"></textarea>
      <div style="margin-top:10px;">
        <button id="image-custom-generate-button">生成</button>
        <button id="image-custom-cancel-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- カードプレビューモーダル -->
  <div id="card-preview-modal" class="modal">
    <div class="modal-content" style="max-width:400px;">
      <h2>新しいカード</h2>
      <div id="preview-card-container"></div>

      <div style="margin-top:10px;">
        <button id="add-to-gachabox-button">倉庫に追加</button>
        <button id="cancel-card-preview-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- パーティ表示用モーダル -->
  <div id="party-modal" class="modal">
    <div class="modal-content">
      <h2>パーティ確認</h2>
      <button id="close-party-modal">閉じる</button>
      <div id="party-modal-card-container"></div>
    </div>
  </div>

  <!-- 探索型の場合のみ表示される「カードを取得」ボタン -->
  <button id="get-card-button" style="display:none;">
    カードを取得する
  </button>

  <div id="ending-modal" class="modal">
    <div class="modal-content" style="padding: 10vw;">
      <h2 id="ending-modal-title"></h2>
      <div id="ending-modal-story" style="white-space:pre-wrap; text-align:left; margin-top:10px;"></div>
      <button id="ending-modal-close-button" style="margin-top:10px;">閉じる</button>
      <button id="ending-modal-regenerate-button" style="margin-top:10px;">再生成</button>
    </div>
  </div>
  <!-- ▲ エンディング関連ここまで -->

  <!-- スクリプト群 -->
  <script src="js/indexedDB.js"></script>
  <script src="js/scene.js"></script>
  <script src="js/main.js"></script>
  <script src="js/gachaCore.js"></script>
  <script src="js/scenarioPage.js"></script>

  <script>
    window.addEventListener("load", async () => {
      await initIndexedDB();
      await initBackground("scenario");
    });

    // ▼ 「編集して生成(カスタム)」ボタンをクリック → openImagePromptModal() 呼び出し
    window.addEventListener("DOMContentLoaded", () => {
      const customBtn = document.getElementById("image-prompt-modal-button");
      if (customBtn) {
        customBtn.addEventListener("click", () => {
          openImagePromptModal();
        });
      }
    });
    window.addEventListener('DOMContentLoaded', () => {
      const autoCbx = document.getElementById("auto-generate-candidates-checkbox");
      if (autoCbx) {
        // 初期状態読み込み
        autoCbx.checked = (localStorage.getItem("autoGenerateCandidates") === "true");

        // 変更時に保存
        autoCbx.addEventListener("change", () => {
          localStorage.setItem("autoGenerateCandidates", autoCbx.checked);
        });
      }
    });
  </script>
</body>

</html>--- 
indexedDB.js 
/********************************
 * indexedDB.js
 * IndexedDB関連の初期化・保存・読み込み等を担当
 ********************************/

let db = null;

/**
 * DB初期化
 * バージョン12:
 *  - scenariosストアに "bookShelfFlag" と "hideFromHistoryFlag" を追加扱い
 */
function initIndexedDB() {
  return new Promise((resolve, reject) => {
    // バージョンを 12 に上げる
    const request = indexedDB.open("trpgDB", 12);

    request.onupgradeneeded = (event) => {
      db = event.target.result;

      // characterData
      if (!db.objectStoreNames.contains("characterData")) {
        db.createObjectStore("characterData", { keyPath: "id" });
      }

      // scenarios
      if (!db.objectStoreNames.contains("scenarios")) {
        const scenarioStore = db.createObjectStore("scenarios", {
          keyPath: "scenarioId",
          autoIncrement: true
        });
        scenarioStore.createIndex("updatedAt", "updatedAt", { unique: false });
      } else {
        // 既に "scenarios" ストアがある場合、
        // 実際には "hideFromHistoryFlag" フィールドを後付けするが
        // IndexedDB はスキーマとしてのフィールド定義は行わないため
        // onupgradeneeded の中で特別な操作は不要
      }

      // sceneEntries
      let sceneStore;
      if (!db.objectStoreNames.contains("sceneEntries")) {
        sceneStore = db.createObjectStore("sceneEntries", {
          keyPath: "entryId",
          autoIncrement: true
        });
        sceneStore.createIndex("scenarioId", "scenarioId", { unique: false });
      } else {
        sceneStore = request.transaction.objectStore("sceneEntries");
      }
      // content_en用index(重複可)
      if (sceneStore && !sceneStore.indexNames.contains("content_en")) {
        try {
          sceneStore.createIndex("content_en", "content_en", { unique: false });
        } catch (e) {
          console.warn("content_enのIndex作成に失敗:", e);
        }
      }

      // wizardState
      if (!db.objectStoreNames.contains("wizardState")) {
        db.createObjectStore("wizardState", { keyPath: "id" });
      }

      // parties
      if (!db.objectStoreNames.contains("parties")) {
        const partyStore = db.createObjectStore("parties", {
          keyPath: "partyId",
          autoIncrement: true
        });
        partyStore.createIndex("updatedAt", "updatedAt", { unique: false });
      }

      // bgImages
      if (!db.objectStoreNames.contains("bgImages")) {
        db.createObjectStore("bgImages", {
          keyPath: "id",
          autoIncrement: true
        });
      }

      // sceneSummaries
      if (!db.objectStoreNames.contains("sceneSummaries")) {
        const sumStore = db.createObjectStore("sceneSummaries", {
          keyPath: "summaryId",
          autoIncrement: true
        });
        sumStore.createIndex("chunkIndex", "chunkIndex", { unique: true });
      }

      // endings
      if (!db.objectStoreNames.contains("endings")) {
        db.createObjectStore("endings", { keyPath: ["scenarioId", "type"] });
      }

      // avatarData
      if (!db.objectStoreNames.contains("avatarData")) {
        db.createObjectStore("avatarData", { keyPath: "id" });
      }
    };

    request.onsuccess = (event) => {
      db = event.target.result;
      resolve();
    };
    request.onerror = (event) => {
      console.error("IndexedDBの初期化に失敗:", event.target.error);
      reject(event.target.error);
    };
  });
}

/**
 * 新しいシナリオを作成
 */
function createNewScenario(wizardData, title = "新シナリオ") {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");

    const now = new Date();
    const record = {
      title: title,
      wizardData: wizardData,
      createdAt: now.toISOString(),
      updatedAt: now.toISOString(),
      bookShelfFlag: false,        // 新規はデフォルトOFF
      hideFromHistoryFlag: false   // 新規はデフォルトOFF
    };

    const addReq = store.add(record);
    addReq.onsuccess = (evt) => {
      const newId = evt.target.result;
      resolve(newId);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオを更新
 */
function updateScenario(scenario, noUpdateDateTimeFlag) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    if (!noUpdateDateTimeFlag) {
      scenario.updatedAt = new Date().toISOString();
    }
    // フラグが無い場合は false で補正
    if (typeof scenario.bookShelfFlag === "undefined") {
      scenario.bookShelfFlag = false;
    }
    if (typeof scenario.hideFromHistoryFlag === "undefined") {
      scenario.hideFromHistoryFlag = false;
    }
    // ★ もし本棚用として登録されていて shelfOrder が未設定なら、現在時刻を数値で設定
    if (scenario.bookShelfFlag && typeof scenario.shelfOrder !== "number") {
      scenario.shelfOrder = Date.now();
    }

    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");
    const putReq = store.put(scenario);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオをID指定で取得
 */
function getScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const getReq = store.get(scenarioId);
    getReq.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオを全件取得
 */
function listAllScenarios() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const result = evt.target.result || [];
      // 既存データにフラグがない場合は false に補正
      result.forEach(sc => {
        sc.bookShelfFlag = sc.bookShelfFlag || false;
        sc.hideFromHistoryFlag = sc.hideFromHistoryFlag || false;
      });
      // ※ 本来は updatedAt でソートしているが、本棚ページでは独自の並び順で処理するためここではそのまま返す
      result.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(result);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

/** シナリオ削除 */
function deleteScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction(["scenarios", "sceneEntries"], "readwrite");
    const scenarioStore = tx.objectStore("scenarios");
    const sceneEntriesStore = tx.objectStore("sceneEntries");

    // 1) シナリオ本体を削除
    const deleteReq = scenarioStore.delete(scenarioId);
    deleteReq.onsuccess = () => {
      // 2) sceneEntriesで scenarioId === scenarioId のものを削除
      const idx = sceneEntriesStore.index("scenarioId");
      const range = IDBKeyRange.only(scenarioId);

      idx.openCursor(range).onsuccess = (evt) => {
        const cursor = evt.target.result;
        if (cursor) {
          sceneEntriesStore.delete(cursor.primaryKey);
          cursor.continue();
        }
      };

      tx.oncomplete = () => {
        resolve();
      };
      tx.onerror = (err) => {
        reject(err);
      };
    };
    deleteReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* シーン履歴: add/update/get/delete */
function addSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const addReq = store.add(entry);
    addReq.onsuccess = (evt) => {
      resolve(evt.target.result);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

function updateSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const putReq = store.put(entry);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

function getSceneEntriesByScenarioId(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readonly");
    const store = tx.objectStore("sceneEntries");
    const index = store.index("scenarioId");

    const range = IDBKeyRange.only(scenarioId);
    const results = [];
    index.openCursor(range).onsuccess = (evt) => {
      const cursor = evt.target.result;
      if (cursor) {
        results.push(cursor.value);
        cursor.continue();
      } else {
        results.sort((a, b) => (a.entryId - b.entryId));
        resolve(results);
      }
    };
    index.openCursor(range).onerror = (err) => {
      reject(err);
    };
  });
}

function deleteSceneEntry(entryId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const delReq = store.delete(entryId);
    delReq.onsuccess = () => {
      resolve();
    };
    delReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* ---------- シーン要約関連 ---------- */
function addSceneSummaryRecord(summaryObj) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneSummaries", "readwrite");
    const store = tx.objectStore("sceneSummaries");
    const addReq = store.add(summaryObj);
    addReq.onsuccess = (evt) => resolve(evt.target.result);
    addReq.onerror = (err) => reject(err);
  });
}

function getSceneSummaryByChunkIndex(chunkIndex) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneSummaries", "readonly");
    const store = tx.objectStore("sceneSummaries");
    const idx = store.index("chunkIndex");
    const req = idx.get(chunkIndex);
    req.onsuccess = () => {
      resolve(req.result || null);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

function updateSceneSummaryRecord(summaryObj) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneSummaries", "readwrite");
    const store = tx.objectStore("sceneSummaries");
    const putReq = store.put(summaryObj);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

function deleteSceneSummaryByChunkIndex(chunkIndex) {
  return new Promise(async (resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    try {
      const sumRec = await getSceneSummaryByChunkIndex(chunkIndex);
      if (!sumRec) {
        return resolve();
      }
      const tx = db.transaction("sceneSummaries", "readwrite");
      const store = tx.objectStore("sceneSummaries");
      const delReq = store.delete(sumRec.summaryId);
      delReq.onsuccess = () => resolve();
      delReq.onerror = (err) => reject(err);
    } catch (e) {
      reject(e);
    }
  });
}

/* ---------- パーティ関連 ---------- */
window.initIndexedDB = initIndexedDB;

window.createNewScenario = createNewScenario;
window.updateScenario = updateScenario;
window.getScenarioById = getScenarioById;
window.listAllScenarios = listAllScenarios;
window.deleteScenarioById = deleteScenarioById;

window.addSceneEntry = addSceneEntry;
window.updateSceneEntry = updateSceneEntry;
window.getSceneEntriesByScenarioId = getSceneEntriesByScenarioId;
window.deleteSceneEntry = deleteSceneEntry;

window.addSceneSummaryRecord = addSceneSummaryRecord;
window.getSceneSummaryByChunkIndex = getSceneSummaryByChunkIndex;
window.updateSceneSummaryRecord = updateSceneSummaryRecord;
window.deleteSceneSummaryByChunkIndex = deleteSceneSummaryByChunkIndex;

/** キャラデータ関連 */
window.saveCharacterDataToIndexedDB = function (characterData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve();
      return;
    }
    const tx = db.transaction("characterData", "readwrite");
    const store = tx.objectStore("characterData");
    const record = { id: "characterData", data: characterData };
    const putReq = store.put(record);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
};

window.loadCharacterDataFromIndexedDB = function() {
  return new Promise((resolve) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve([]);
      return;
    }
    const tx = db.transaction("characterData", "readonly");
    const store = tx.objectStore("characterData");
    const getReq = store.get("characterData");
    getReq.onsuccess = (event) => {
      if (event.target.result && event.target.result.data) {
        resolve(event.target.result.data);
      } else {
        resolve([]);
      }
    };
    getReq.onerror = () => {
      resolve([]);
    };
  });
};

window.saveWizardDataToIndexedDB = function(wizardData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readwrite");
    const store = tx.objectStore("wizardState");
    const record = { id: "wizardData", data: wizardData };
    const req = store.put(record);
    req.onsuccess = () => resolve();
    req.onerror = (err) => reject(err);
  });
};

window.loadWizardDataFromIndexedDB = function() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readonly");
    const store = tx.objectStore("wizardState");
    const getReq = store.get("wizardData");
    getReq.onsuccess = (evt) => {
      if (evt.target.result) {
        resolve(evt.target.result.data);
      } else {
        resolve(null);
      }
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
};

/* パーティ関係 */
window.createParty = function (name) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const now = new Date().toISOString();
    const rec = {
      name: name,
      createdAt: now,
      updatedAt: now
    };
    const req = store.add(rec);
    req.onsuccess = (evt) => {
      resolve(evt.target.result); // partyId
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.getPartyById = function (partyId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readonly");
    const store = tx.objectStore("parties");
    const req = store.get(partyId);
    req.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.listAllParties = function () {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readonly");
    const store = tx.objectStore("parties");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const list = evt.target.result || [];
      list.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(list);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.updateParty = function (party) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    party.updatedAt = new Date().toISOString();
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const req = store.put(party);
    req.onsuccess = () => {
      resolve();
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.deletePartyById = function (partyId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const req = store.delete(partyId);
    req.onsuccess = () => {
      resolve();
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

/* エンディング関連 */
window.getEnding = function (scenarioId, type) {
  return new Promise((resolve, reject) => {
    if (!db) return reject("DB未初期化");
    const tx = db.transaction("endings", "readonly");
    const store = tx.objectStore("endings");
    const getReq = store.get([scenarioId, type]);
    getReq.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    getReq.onerror = (err) => reject(err);
  });
};

window.saveEnding = function (scenarioId, type, story) {
  return new Promise((resolve, reject) => {
    if (!db) return reject("DB未初期化");
    const tx = db.transaction("endings", "readwrite");
    const store = tx.objectStore("endings");
    const rec = {
      scenarioId,
      type,
      story,
      createdAt: new Date().toISOString()
    };
    const putReq = store.put(rec);
    putReq.onsuccess = () => resolve();
    putReq.onerror = (err) => reject(err);
  });
};

window.deleteEnding = function (scenarioId, type) {
  return new Promise((resolve, reject) => {
    if (!db) return reject("DB未初期化");
    const tx = db.transaction("endings", "readwrite");
    const store = tx.objectStore("endings");
    const delReq = store.delete([scenarioId, type]);
    delReq.onsuccess = () => resolve();
    delReq.onerror = (err) => reject(err);
  });
};
--- 
scenarioPage.js 
/*
 * scenarioPage.js
 * - 「セクション」情報や「導入シーン」を可視化
 * - 全セクション閲覧/トークン調整などのUI制御
 * - エンディング(クリア/未クリア)ボタン～モーダル表示・再生成も担当
 */

window.apiKey = '';
window.sceneHistory = [];
window.currentScenarioId = null;
window.currentScenario = null;
window.currentRequestController = null;
window.cancelRequested = false;

window.scenarioType = null;
window.clearCondition = null;
window.sections = [];

// 要約をメモリ上でも管理
window.sceneSummaries = []; // sceneSummaries[chunkIndex] = { en: '...', ja: '...' }


// 画面起動時
window.addEventListener("load", async () => {
  // IndexedDB初期化 & characterDataロード
  await initIndexedDB();
  const storedChars = await loadCharacterDataFromIndexedDB();
  window.characterData = storedChars || [];

  // トークン調整ボタン
  const tokenAdjustBtn = document.getElementById("token-adjust-button");
  if (tokenAdjustBtn) {
    tokenAdjustBtn.addEventListener("click", onOpenTokenAdjustModal);
  }
  const tokenAdjustOk = document.getElementById("token-adjust-ok-button");
  const tokenAdjustCancel = document.getElementById("token-adjust-cancel-button");
  if (tokenAdjustOk) tokenAdjustOk.addEventListener("click", onConfirmTokenAdjust);
  if (tokenAdjustCancel) tokenAdjustCancel.addEventListener("click", () => {
    const mod = document.getElementById("token-adjust-modal");
    if (mod) mod.classList.remove("active");
  });

  // ネタバレ関連
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.classList.add("active");
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.classList.remove("active");
    });
  }

  // 「カードを取得する」ボタン
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    getCardButton.addEventListener("click", async () => {
      const sceneSummary = await getLastSceneSummary();
      let onlyTitle = "";
      let onlyType = "";
      let addPrompt = "";

      const lines = sceneSummary.split("\n");
      lines.forEach(line => {
        const t = line.trim();
        if (t.startsWith("【名前】")) {
          onlyTitle = t.replace("【名前】", "").replace("：", "").trim();
        } else if (t.startsWith("【タイプ】")) {
          onlyType = t.replace("【タイプ】", "").replace("：", "").trim();
        } else if (t.startsWith("【外見】")) {
          addPrompt = t.replace("【外見】", "").replace("：", "").trim();
        }
      });

      const previewModal = document.getElementById("card-preview-modal");
      const previewContainer = document.getElementById("preview-card-container");
      if (!previewModal || !previewContainer) return;

      previewContainer.innerHTML = "";
      const p = document.createElement("p");
      p.textContent =
        `【名前】：${onlyTitle}\n【タイプ】：${onlyType}\n【外見】：${addPrompt}\nこの内容で作成しますか？`;
      p.style.whiteSpace = "pre-wrap";
      previewContainer.appendChild(p);

      previewModal.classList.add("active");

      const addBtn = document.getElementById("add-to-gachabox-button");
      if (addBtn) {
        addBtn.onclick = async () => {
          previewModal.classList.remove("active");
          const gachaModal = document.getElementById("gacha-modal");
          if (gachaModal) gachaModal.classList.add("active");

          try {
            await runGacha(1, addPrompt, onlyTitle, onlyType);
            alert("ガチャ箱に追加しました。");
          } catch (e) {
            console.error(e);
            alert("カード生成失敗:" + e.message);
          } finally {
            if (gachaModal) gachaModal.classList.remove("active");
          }
        };
      }
      const cancelBtn = document.getElementById("cancel-card-preview-button");
      if (cancelBtn) {
        cancelBtn.onclick = () => {
          previewModal.classList.remove("active");
        };
      }
    });
  }

  // 回答候補生成
  const generateActionCandidatesBtn = document.getElementById("generate-action-candidates-button");
  if (generateActionCandidatesBtn) {
    generateActionCandidatesBtn.addEventListener("click", onGenerateActionCandidates);
  }

  // パーティモーダル
  const showPartyBtn = document.getElementById("show-party-button");
  if (showPartyBtn) {
    showPartyBtn.addEventListener("click", showPartyModal);
  }
  const closePartyModalBtn = document.getElementById("close-party-modal");
  if (closePartyModalBtn) {
    closePartyModalBtn.addEventListener("click", () => {
      const modal = document.getElementById("party-modal");
      if (modal) modal.classList.remove("active");
    });
  }

  // 全セクション閲覧
  const viewAllSectionsBtn = document.getElementById("view-all-sections-button");
  if (viewAllSectionsBtn) {
    viewAllSectionsBtn.addEventListener("click", showAllSectionsModal);
  }
  const closeAllSecBtn = document.getElementById("close-all-sections-modal");
  if (closeAllSecBtn) {
    closeAllSecBtn.addEventListener("click", () => {
      const allSecModal = document.getElementById("all-sections-modal");
      if (allSecModal) allSecModal.classList.remove("active");
    });
  }

  // エンディング関連ボタン
  const endingBtn = document.getElementById("ending-button");
  const clearEndingBtn = document.getElementById("clear-ending-button");
  if (endingBtn) {
    endingBtn.addEventListener("click", () => {
      showEndingModal("bad");
    });
  }
  if (clearEndingBtn) {
    clearEndingBtn.addEventListener("click", () => {
      showEndingModal("clear");
    });
  }

  // エンディングモーダルのボタン
  const endingModalClose = document.getElementById("ending-modal-close-button");
  if (endingModalClose) {
    endingModalClose.addEventListener("click", () => {
      const m = document.getElementById("ending-modal");
      if (m) m.classList.remove("active");
    });
  }
  const endingModalRegen = document.getElementById("ending-modal-regenerate-button");
  if (endingModalRegen) {
    endingModalRegen.addEventListener("click", onClickRegenerateEnding);
  }

});

/**
 * シナリオを読み込み＆表示用初期化
 */
async function loadScenarioData(scenarioId) {
  try {
    const sc = await getScenarioById(scenarioId);
    if (!sc) {
      alert("指定シナリオが存在しません。");
      return;
    }
    window.currentScenario = sc;

    const wd = sc.wizardData || {};
    window.scenarioType = wd.scenarioType;
    window.clearCondition = wd.clearCondition || "";
    window.sections = wd.sections || [];

    // シーン履歴
    const ents = await getSceneEntriesByScenarioId(scenarioId);
    window.sceneHistory = ents.map(e => ({
      entryId: e.entryId,
      type: e.type,
      sceneId: e.sceneId,
      content: e.content,
      content_en: e.content_en || "",
      dataUrl: e.dataUrl,
      prompt: e.prompt || ""
    }));

    // sceneSummaries
    for (let i = 0; i < 100; i++) {
      const sumRec = await getSceneSummaryByChunkIndex(i);
      if (!sumRec) break;
      window.sceneSummaries[i] = {
        en: sumRec.content_en,
        ja: sumRec.content_ja
      };
    }

    // ネタバレ(目的達成型)
    if (window.scenarioType === "objective") {
      const sb = document.getElementById("spoiler-button");
      if (sb) sb.style.display = "inline-block";
      const sp = document.getElementById("clear-condition-text");
      if (sp) sp.textContent = window.clearCondition || "(クリア条件なし)";
    } else if (window.scenarioType === "exploration") {
      const gcb = document.getElementById("get-card-button");
      if (gcb) gcb.style.display = "inline-block";
    }

    // セクション全クリアチェック
    refreshEndingButtons();
  } catch (err) {
    console.error("シナリオ読み込み失敗:", err);
    alert("読み込み失敗:" + err.message);
  }
}

/** 「エンディング」ボタンと「クリアエンディング」ボタンの表示切替 */
function refreshEndingButtons() {
  const endingBtn = document.getElementById("ending-button");
  const clearEndingBtn = document.getElementById("clear-ending-button");

  if (!endingBtn || !clearEndingBtn) return;

  const allCleared = areAllSectionsCleared();

  if (allCleared) {
    endingBtn.style.display = "none";
    clearEndingBtn.style.display = "inline-block";
  } else {
    endingBtn.style.display = "inline-block";
    clearEndingBtn.style.display = "none";
  }
}

function areAllSectionsCleared() {
  if (!window.sections || !window.sections.length) return false;
  return window.sections.every(s => s.cleared);
}

/** エンディングモーダルを表示 */
async function showEndingModal(type) {
  const scenarioId = window.currentScenario?.scenarioId;
  if (!scenarioId) {
    alert("シナリオ未選択");
    return;
  }
  const existing = await getEnding(scenarioId, type);
  if (existing) {
    openEndingModal(type, existing.story);
  } else {
    const newStory = await generateEndingStory(type);
    if (!newStory) {
      return;
    }
    await saveEnding(scenarioId, type, newStory);
    openEndingModal(type, newStory);
  }
}

/** エンディングモーダルを再生成 */
async function onClickRegenerateEnding() {
  const titleEl = document.getElementById("ending-modal-title");
  const scenarioId = window.currentScenario?.scenarioId;
  if (!titleEl || !scenarioId) return;

  let type = "bad";
  if (titleEl.textContent.includes("クリア")) {
    type = "clear";
  }
  // 一旦削除
  await deleteEnding(scenarioId, type);

  // 再生成
  const newStory = await generateEndingStory(type);
  if (!newStory) return;
  await saveEnding(scenarioId, type, newStory);

  const storyEl = document.getElementById("ending-modal-story");
  if (storyEl) {
    storyEl.textContent = newStory;
  }
}

/** モーダルを開く */
function openEndingModal(type, story) {
  const modal = document.getElementById("ending-modal");
  const titleEl = document.getElementById("ending-modal-title");
  const storyEl = document.getElementById("ending-modal-story");

  if (type === "clear") {
    titleEl.textContent = "クリアエンディング";
  } else {
    titleEl.textContent = "エンディング";
  }
  storyEl.innerHTML = DOMPurify.sanitize(story, DOMPURIFY_CONFIG) || "";
  modal.classList.add("active");
}

/** エンディングストーリーをChatGPTで生成 */
async function generateEndingStory(type) {
  if (!window.apiKey) {
    alert("APIキーが未設定です");
    return "";
  }

  const scenario = window.currentScenario;
  if (!scenario) {
    alert("シナリオデータがありません");
    return "";
  }
  const wd = scenario.wizardData || {};
  const isClear = (type === "clear");

  const scenarioSummary = wd.scenarioSummary || "(シナリオ概要なし)";
  const party = wd.party || [];

  // 最新10シーン
  let sceneTexts = window.sceneHistory
    .filter(e => e.type === "scene")
    .map(e => e.content || "");
  if (sceneTexts.length > 10) {
    sceneTexts = sceneTexts.slice(-10);
  }
  const combinedScene = sceneTexts.join("\n------\n");

  // セクション情報
  const sectionTextArr = (wd.sections || []).map(s => {
    const cond = decompressCondition(s.conditionZipped);
    return `・セクション${s.number}(${s.cleared ? "クリア" : "未クリア"}): ${cond}`;
  });
  const joinedSections = sectionTextArr.join("\n");

  const endTypePrompt = isClear ? "ハッピーエンド" : "バッドエンド";

  let prompt = `
以下の情報をもとに、
1)シナリオ概要
2)パーティ構成
3)あらすじ
4)セクション
5)その後の話

この5部構成でエンディングストーリーを作ってください。結末は必ず「${endTypePrompt}」にしてください。
あらすじ部分は、下記のシーン履歴をベースにしつつ、あまり簡潔になりすぎないように描写してください。

■シナリオ概要
${scenarioSummary}

`;

  if (party.length !== 0) {
    prompt += `\n■パーティ構成\n`;
    prompt += party.map(p => `- ${p.name}(${p.type || "?"})`).join("\n");
  }

  prompt += `■シーン履歴(最新～最大10シーン)
${combinedScene}

■セクション情報
${joinedSections}
`;


  try {
    showLoadingModal(true);
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGエンディング生成アシスタントです。日本語で回答してください。" },
          { role: "user", content: prompt }
        ],
        temperature: 0.7
      }),
      signal
    });
    if (window.cancelRequested) {
      return "";
    }
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    return (data.choices[0].message.content || "").trim();
  } catch (err) {
    if (err.name === "AbortError") {
      console.warn("エンディング生成キャンセル");
      return "";
    }
    console.error("エンディング生成失敗:", err);
    alert("エンディング生成に失敗:\n" + err.message);
    return "";
  } finally {
    showLoadingModal(false);
  }
}

/** 圧縮テキスト解凍 */
function decompressCondition(zippedBase64) {
  if (!zippedBase64) return "(不明)";
  try {
    const bin = atob(zippedBase64);
    const uint8 = new Uint8Array([...bin].map(c => c.charCodeAt(0)));
    const inf = pako.inflate(uint8);
    return new TextDecoder().decode(inf);
  } catch (e) {
    console.error("decompress失敗:", e);
    return "(解凍エラー)";
  }
}

/** トークン調整ボタン押下 → モーダルを開く */
function onOpenTokenAdjustModal() {
  let missingCount = 0;
  missingCount = window.sceneHistory.filter(e => !e.content_en).length;
  const msg = `${missingCount}件のシーン/行動に内部英語データがありません。生成しますか？`;
  document.getElementById("token-adjust-message").textContent = msg;
  document.getElementById("token-adjust-progress").textContent = "";
  const mod = document.getElementById("token-adjust-modal");
  mod.classList.add("active");
}

/** トークン調整のOK→不足している英語をまとめて生成 */
async function onConfirmTokenAdjust() {
  const mod = document.getElementById("token-adjust-modal");
  const prog = document.getElementById("token-adjust-progress");
  let targets = window.sceneHistory.filter(e => !e.content_en && (e.type === "scene" || e.type === "action"));

  if (!window.apiKey) {
    alert("APIキー未設定");
    return;
  }
  if (targets.length === 0) {
    alert("不足はありません。");
    mod.classList.remove("active");
    return;
  }

  let doneCount = 0;
  const total = targets.length;

  for (const entry of targets) {
    doneCount++;
    prog.textContent = `${doneCount}/${total}件処理中...`;
    // 英訳生成
    const tr = await generateEnglishTranslation(entry.content);
    entry.content_en = tr;
    const updated = {
      ...entry,
      content_en: tr
    };
    await updateSceneEntry(updated);
  }
  prog.textContent = `${total}/${total}件完了`;
  alert("英語データ生成が完了しました。");
  mod.classList.remove("active");
}

/** 日本語→英語翻訳 */
async function generateEnglishTranslation(japaneseText) {
  if (!japaneseText.trim()) return "";
  const sys = "あなたは優秀な翻訳家です。";
  const u = `以下の日本語テキストを自然な英語に翻訳してください:\n${japaneseText}\n`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: u }
        ],
        temperature: 0.3
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("翻訳失敗:", err);
    return "";
  }
}

/** 回答候補を生成 */
async function onGenerateActionCandidates() {
  if (!window.apiKey) {
    alert("APIキー未設定");
    return;
  }
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  const lastSceneText = lastSceneEntry ? lastSceneEntry.content : "(シーン無し)";

  // ▼ ここで wizardData から未クリアセクションの条件テキストを取得する
  const wd = window.currentScenario?.wizardData;
  let conditionText = "";
  if (wd && wd.sections && wd.sections.length > 0) {
    // セクションを番号順にソート
    const sorted = wd.sections.slice().sort((a, b) => a.number - b.number);

    // まだクリアしていない最初のセクションを探す
    const firstUncleared = sorted.find(sec => !sec.cleared);
    if (firstUncleared) {
      // 圧縮されている条件テキストを解凍
      conditionText = decompressCondition(firstUncleared.conditionZipped);
      // これで `conditionText` に最新の未クリア条件が入る
    }
  }
  window.cancelRequested = false;
  showLoadingModal(true);

  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const prompt = `
      あなたはTRPGのGMです。
      下記シーンとセクションクリア条件を踏まえ、プレイヤーが可能な行動案を4つ提案してください。
      １：セクションのクリアに関係しそうなものを1つ
      ２：妥当なものを2つ
      ３：少し頭がおかしい行動案を1つ
      合計４行構成にしてください。
      順番はシャッフルしてください。
      言葉の表現でどれがクリアに関係しそうなのかわからないようにしてください。
      ---
      シーン：
      ${lastSceneText}
      ---
      クリア条件：
      ${conditionText}
    `;
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": 'Bearer ' + window.apiKey
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGアシスタント" },
          { role: "user", content: prompt }
        ],
        temperature: 0.7
      }),
      signal
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const content = data.choices[0].message.content || "";
    const lines = content.split("\n").map(l => l.trim()).filter(l => l);

    const container = document.getElementById("action-candidates-container");
    if (!container) return;
    container.innerHTML = "";

    lines.forEach(line => {
      const btn = document.createElement("button");
      btn.textContent = line.replace(/^\d+\.\s*/, "");
      btn.style.display = "block";
      btn.style.margin = "5px 0";
      btn.addEventListener("click", () => {
        const playerInput = document.getElementById("player-input");
        if (playerInput) {
          playerInput.value = btn.textContent;
        }
      });
      container.appendChild(btn);
    });
  } catch (e) {
    if (e.name === "AbortError") {
      console.log("候補生成キャンセル");
    } else {
      console.error(e);
      alert("候補生成失敗:" + e.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/** 全セクション表示モーダル */
function showAllSectionsModal() {
  const modal = document.getElementById("all-sections-modal");
  if (!modal) return;

  const wd = (window.currentScenario && window.currentScenario.wizardData) || {};
  const sections = wd.sections || [];

  const container = document.getElementById("all-sections-content");
  container.textContent = "";

  if (!sections.length) {
    container.textContent = "セクション情報がありません。";
  } else {
    let text = "";
    for (const sec of sections) {
      text += `【セクション${sec.number}】` + (sec.cleared ? "(クリア済み)" : "(未クリア)") + "\n";
      text += "条件: " + (decompressCondition(sec.conditionZipped)) + "\n\n";
    }
    container.textContent = text;
  }

  modal.classList.add("active");
}

/** パーティ確認モーダル */
function showPartyModal() {
  const modal = document.getElementById("party-modal");
  if (!modal) return;
  modal.classList.add("active");
  renderPartyCardsInModal();
}

function renderPartyCardsInModal() {
  const container = document.getElementById("party-modal-card-container");
  if (!container) return;
  container.innerHTML = "";

  const scenario = window.currentScenario;
  if (!scenario?.wizardData?.party) {
    container.textContent = "パーティ情報がありません。";
    return;
  }

  const wizardPartyCards = scenario.wizardData.party;
  const dbCards = window.characterData;

  const merged = wizardPartyCards.map(wCard => {
    const dbMatch = dbCards.find(dbC => dbC.id === wCard.id);
    if (!dbMatch) {
      return wCard;
    }
    return {
      ...dbMatch,
      ...wCard,
      imageData: dbMatch.imageData || wCard.imageData
    };
  });

  merged.forEach(card => {
    const cardEl = createPartyCardElement(card);
    container.appendChild(cardEl);
  });
}

function createPartyCardElement(c) {
  const cardEl = document.createElement("div");
  cardEl.className = "card ";
  cardEl.className += "rarity" + (c.rarity || "").replace("★", "").trim();

  cardEl.setAttribute("data-id", c.id);
  cardEl.addEventListener("click", () => {
    cardEl.classList.toggle("flipped");
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cf = document.createElement("div");
  cf.className = "card-front";

  const bg = (c.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  if (bg) {
    cf.style.backgroundImage = bg;
  }

  const rv = (typeof c.rarity === "string") ? c.rarity.replace("★", "").trim() : "0";
  const bezel = document.createElement("div");
  bezel.className = "bezel rarity" + rv;
  cf.appendChild(bezel);

  let roleLabel = "";
  if (c.role === "avatar") roleLabel = "(アバター)";
  else if (c.role === "partner") roleLabel = "(パートナー)";

  const tEl = document.createElement("div");
  tEl.className = "card-type";
  tEl.textContent = (c.type || "不明") + roleLabel;
  cf.appendChild(tEl);

  const imgCont = document.createElement("div");
  imgCont.className = "card-image";
  if (c.imageData) {
    const im = document.createElement("img");
    im.src = c.imageData;
    im.alt = c.name;
    imgCont.appendChild(im);
  }
  cf.appendChild(imgCont);

  const info = document.createElement("div");
  info.className = "card-info";

  const nm = document.createElement("p");
  nm.innerHTML = "<h3>" + DOMPurify.sanitize(c.name) + "</h3>";
  info.appendChild(nm);

  if (c.state) {
    const st = document.createElement("p");
    st.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(c.state);
    info.appendChild(st);
  }
  const sp = document.createElement("p");
  sp.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(c.special);
  info.appendChild(sp);

  const cap = document.createElement("p");
  cap.innerHTML = "<span>" + DOMPurify.sanitize(c.caption) + "</span>";
  info.appendChild(cap);

  cf.appendChild(info);

  const cb = document.createElement("div");
  cb.className = "card-back";
  cb.innerHTML = `<strong>${DOMPurify.sanitize(c.type)}</strong>`;

  cardInner.appendChild(cf);
  cardInner.appendChild(cb);
  cardEl.appendChild(cardInner);
  return cardEl;
}

/** 最新シーンを要約しカード化に向けた情報を抽出 */
async function getLastSceneSummary() {
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  if (!lastSceneEntry) return "シーンがありません。";

  const text = lastSceneEntry.content;
  const systemPrompt = `
あなたは優秀なカード作成用プロンプト生成者。
以下フォーマットで【名前】【タイプ】【外見】を作ってください。`;
  const userPrompt = `
シーン文:
${text}
ここからエレメントにできそうな対象1つを抽出し、【名前】【タイプ】【外見】を生成してください。
`;

  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": 'Bearer ' + window.apiKey
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ]
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    return data.choices[0].message.content || "";
  } catch (e) {
    console.error("要約失敗:", e);
    return "(要約失敗)";
  }
}

/** ローディングモーダル表示/非表示 */
function showLoadingModal(show) {
  const m = document.getElementById("loading-modal");
  if (!m) return;
  if (show) {
    m.classList.add("active");
  } else {
    m.classList.remove("active");
  }
}

function onCancelFetch() {
  if (window.currentRequestController) {
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}

// 外部から呼べるようにexport
window.loadScenarioData = loadScenarioData;
window.onCancelFetch = onCancelFetch;
--- 
scene.js 
/********************************
 * scene.js
 * シナリオ/シーン管理
 ********************************/

window.apiKey = '';
window.sceneHistory = [];
window.currentScenarioId = null;
window.currentScenario = null;
window.currentRequestController = null;
window.cancelRequested = false;

window.scenarioType = null;
window.clearCondition = null;
window.sections = [];

// 要約をメモリ上でも管理
window.sceneSummaries = []; // sceneSummaries[chunkIndex] = { en: '...', ja: '...' }

const DOMPURIFY_CONFIG = {
  ALLOWED_TAGS: ["p", "br", "hr", "h3", "h4", "h5", "span", "div", "strong", "em"],
  ALLOWED_ATTR: ["style"]
};

/** 日本語チェック用関数 */
function containsJapanese(text) {
  // 平仮名 or カタカナが含まれているかどうか
  // 例: /[ぁ-んァ-ン]/ にマッチすれば日本語(少なくとも仮名)とみなす
  return /[ぁ-んァ-ン]/.test(text);
}

/** DBからシナリオ情報を読み込み */
async function loadScenarioData(scenarioId) {
  try {
    const sc = await getScenarioById(scenarioId);
    if (!sc) {
      alert("指定シナリオが存在しません。");
      return;
    }
    window.currentScenario = sc;

    const wd = sc.wizardData || {};
    window.scenarioType = wd.scenarioType;
    window.clearCondition = wd.clearCondition || "";
    window.sections = wd.sections || [];

    const ents = await getSceneEntriesByScenarioId(scenarioId);
    window.sceneHistory = ents.map(e => ({
      entryId: e.entryId,
      type: e.type,
      sceneId: e.sceneId,
      content: e.content,
      content_en: e.content_en || "", // 英訳
      dataUrl: e.dataUrl,
      prompt: e.prompt || ""
    }));

    // sceneSummaries の読み込み
    for (let i = 0; i < 100; i++) {
      const sumRec = await getSceneSummaryByChunkIndex(i);
      if (!sumRec) break;
      window.sceneSummaries[i] = {
        en: sumRec.content_en,
        ja: sumRec.content_ja
      };
    }

    // ネタバレ(目的達成型)
    if (window.scenarioType === "objective") {
      const sb = document.getElementById("spoiler-button");
      if (sb) sb.style.display = "inline-block";
      const sp = document.getElementById("clear-condition-text");
      if (sp) sp.textContent = window.clearCondition || "(クリア条件なし)";
    } else if (window.scenarioType === "exploration") {
      const gcb = document.getElementById("get-card-button");
      if (gcb) gcb.style.display = "inline-block";
    }
  } catch (err) {
    console.error("シナリオ読み込み失敗:", err);
    alert("読み込み失敗:" + err.message);
  }
}

/** 次のシーンを生成（英語結果なら日本語翻訳してDB保存 + 画面表示） */
async function getNextScene() {
  if (!window.apiKey) {
    alert("APIキー未設定");
    return;
  }
  const pinput = (document.getElementById("player-input")?.value || "").trim();
  const hasScene = window.sceneHistory.some(e => e.type === "scene");
  if (hasScene && !pinput) {
    alert("プレイヤー行動を入力してください");
    return;
  }

  window.cancelRequested = false;
  showLoadingModal(true);

  // まずユーザー行動の英訳を作成(必要なら)
  let actionEn = "";
  if (pinput) {
    actionEn = await generateEnglishTranslation(pinput);
  }

  // システムプロンプト
  let systemText =
    `あなたは経験豊かなやさしいTRPGのゲームマスターです。
以下を守ってください。
・背景黒が前提の装飾のタグを使う
・<<<< 絶対に出力は日本語で。Please answer in Japanese!!!! >>>>
・決して一つ前のレスポンスと同じ言い回しで終わらない
・メタな表現をしない
  - ゲームマスター側の描写をしない
    -- 例：ゲームマスターは言った「…」
  - 決してセクションそのものをシーンに書いてはいけない。
    -- 例：「地下迷宮の謎を解き明かす」という「第2章」クリアを目指して、あなたは先へ進みます。
・ユーザーが困っている場合は、セクションをクリアできるようなヒントも出す
・同じことを言ってループしない
・ユーザーの行動を踏まえて、次の行動を促すようなシーンを作る
・時々パーティを会話させる
`;

  const wd = (window.currentScenario && window.currentScenario.wizardData) || {};
  const sections = wd.sections || [];
  if (sections.length > 0) {
    systemText += "\n======\n";
    for (const sec of sections) {
      systemText += `【セクション${sec.number}】` + (sec.cleared ? "(クリア済み)" : "(未クリア)") + "\n";
      systemText += "条件: " + decompressCondition(sec.conditionZipped) + "\n\n";
    }
    systemText += "======\n";
  }

  // メッセージ履歴
  const msgs = [{ role: "system", content: systemText }];

  // シナリオ概要 + パーティ情報
  if (window.currentScenario) {
    const scenarioWd = window.currentScenario.wizardData || {};
    // 英語があれば英語を使う、なければ日本語を使う
    const summ = scenarioWd.scenarioSummaryEn?.trim()
      ? scenarioWd.scenarioSummaryEn
      : (scenarioWd.scenarioSummary || "");
    msgs.push({ role: "user", content: "シナリオ概要:" + summ });
    if (scenarioWd.party != []) {
      const ptxt = buildPartyInsertionText(scenarioWd.party);
      msgs.push({ role: "user", content: ptxt });
    }
  }

  // 今回含めた行動数
  const actionCount = window.sceneHistory.filter(e => e.type === "action").length + (pinput ? 1 : 0);

  // (A) 要約(複数)を先に push
  const chunkEnd = Math.floor((actionCount - 15) / 10);
  // 例: 15->0, 25->1, 35->2, 45->3
  for (let i = 0; i <= chunkEnd; i++) {
    if (i < 0) continue;
    if (window.sceneSummaries[i]) {
      // 英語があれば英語を使う
      const sumObj = window.sceneSummaries[i];
      msgs.push({
        role: "assistant",
        content: sumObj.en || sumObj.ja || "(no summary)"
      });
    }
  }

  // (B) 要約に含まれないシーン/行動だけ push
  const skipCount = (chunkEnd + 1) * 10;
  let actionCounter = 0;
  for (const e of window.sceneHistory) {
    if (e.type === "action") {
      actionCounter++;
      if (actionCounter <= skipCount) continue;
      // 英語があれば英語を使う
      const actText = e.content_en?.trim() ? e.content_en : e.content;
      msgs.push({ role: "user", content: "player action:" + actText });
    } else if (e.type === "scene") {
      if (actionCounter <= skipCount) {
        continue;
      }
      // 英語があれば英語を使う
      const scText = e.content_en?.trim() ? e.content_en : e.content;
      msgs.push({ role: "assistant", content: scText });
    }
  }

  // 今回の行動(未挿入なら追加)
  if (pinput) {
    msgs.push({ role: "user", content: "プレイヤーの行動:" + pinput });
  }

  let nextScene = "";
  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    // GPT呼び出し(1回だけ)
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: msgs,
        temperature: 0.7
      }),
      signal
    });

    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }

    const data = await resp.json();
    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    if (data.error) throw new Error(data.error.message);

    // まずGPTから返ってきた生テキスト
    const rawScene = data.choices[0].message.content || "";

    // 日本語が含まれない(＝ほぼ英語)場合は日本語に翻訳
    // 含まれていればそのまま
    let finalSceneJa = rawScene;
    let finalSceneEn = "";
    if (!containsJapanese(rawScene)) {
      // GPT結果が英語 → 翻訳して日本語を最終出力
      finalSceneJa = await generateJapaneseTranslation(rawScene);
      finalSceneEn = rawScene;
    } else {
      // GPT結果が日本語 → 英語バージョンを作る
      finalSceneEn = await generateEnglishTranslation(rawScene);
    }

    nextScene = finalSceneJa; // 画面やDBに保存するのは最終的に日本語にしたテキスト

    // (1) 行動をDBに保存
    if (pinput) {
      const act = {
        scenarioId: window.currentScenarioId || 0,
        type: "action",
        content: pinput,
        content_en: actionEn,
        sceneId: null
      };
      const actId = await addSceneEntry(act);
      window.sceneHistory.push({ ...act, entryId: actId });
      document.getElementById("player-input").value = "";
    }

    // (2) 新シーンをDBに追加
    const sid = "scene_" + Date.now();
    const se = {
      scenarioId: window.currentScenarioId || 0,
      type: "scene",
      sceneId: sid,
      content: nextScene,       // 日本語（最終的な表示用）
      content_en: finalSceneEn, // 英語（GPTが英語だった場合はそのまま or GPTが日本語だった場合は翻訳）
      prompt: ""
    };
    const newSid = await addSceneEntry(se);
    const newSceneEntry = { ...se, entryId: newSid };
    window.sceneHistory.push(newSceneEntry);

    // (2.5) シーンの画像promptをfunction callingで生成
    const imagePromptText = await generateImagePromptFromScene(nextScene);
    if (imagePromptText) {
      newSceneEntry.prompt = imagePromptText;
      const updateRec = {
        ...newSceneEntry,
        prompt: imagePromptText
      };
      await updateSceneEntry(updateRec);
    }

    // (3) シナリオ更新
    if (window.currentScenario) {
      await updateScenario({
        ...window.currentScenario,
        updatedAt: new Date().toISOString()
      });
    }

    // (4) セクション達成チェック
    await checkSectionClearViaChatGPT(pinput, nextScene);

    // (5) 行動数判定して要約作成
    await handleSceneSummaries();

    // (6) 画面再描画
    updateSceneHistory();
    showLastScene();

    // (7) シーン生成のたびに回答候補コンテナをクリア
    const candidatesContainer = document.getElementById("action-candidates-container");
    if (candidatesContainer) {
      candidatesContainer.innerHTML = "";
    }

    // (8) 「自動的に生成する」チェックが入っていたら回答候補を生成
    const autoGenCheckbox = document.getElementById("auto-generate-candidates-checkbox");
    if (autoGenCheckbox && autoGenCheckbox.checked) {
      onGenerateActionCandidates();
    }

  } catch (e) {
    if (e.name === "AbortError") {
      console.warn("シーン取得キャンセル");
    } else {
      console.error(e);
      alert("シーン取得失敗:" + e.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/** 行動数に応じて要約を作成/削除する */
async function handleSceneSummaries() {
  const actionCount = window.sceneHistory.filter(e => e.type === "action").length;
  // 新規要約作成チェック
  if (actionCount >= 15) {
    // 15回目 -> chunkIndex=0 -> 1..10を要約
    // 25回目 -> chunkIndex=1 -> 11..20
    // ...
    // chunkIndex = floor((actionCount - 15)/10)
    const chunkIndex = Math.floor((actionCount - 15) / 10);
    if (chunkIndex >= 0) {
      // まだ sceneSummaries[chunkIndex] が無ければ作成
      if (!window.sceneSummaries[chunkIndex]) {
        // 要約対象のaction range
        const startAction = chunkIndex * 10 + 1;
        const endAction = (chunkIndex + 1) * 10;

        // 1～10件目のentryをまとめる (action+scene混在)
        //   ただし "action順に" 取り出す。面倒なので entryId でなく actionカウント順で拾う
        let gathered = [];
        let actionCounter = 0;
        for (const e of window.sceneHistory) {
          if (e.type === "action") {
            actionCounter++;
          }
          if (actionCounter >= startAction && actionCounter <= endAction) {
            gathered.push(e);
          }
        }
        const textForSummary = gathered.map(x => x.type === "action" ? `A:${x.content}` : `S:${x.content}`).join("\n");

        // 要約(英語5行 + 日本語5行)
        const enSummary = await generateSummaryWithLimit(textForSummary, 5, "en");
        const jaSummary = await generateSummaryWithLimit(textForSummary, 5, "ja");

        // DBに保存
        const sumRec = {
          chunkIndex,
          content_en: enSummary,
          content_ja: jaSummary
        };
        await addSceneSummaryRecord(sumRec);
        window.sceneSummaries[chunkIndex] = {
          en: enSummary,
          ja: jaSummary
        };
      }
    }
  }

  // 削除チェック
  // もし行動削除等で actionCount < 15 なら chunkIndex=0 を削除
  // さらに < 25 なら chunkIndex=1を削除, ...
  const checks = [15, 25, 35, 45, 55, 65, 75];
  // chunkIndex=0->15,1->25,2->35,3->45,...
  for (let i = 0; i < checks.length; i++) {
    const boundary = checks[i];
    if (actionCount <= boundary) {
      // chunkIndex i を削除
      await deleteSceneSummaryByChunkIndex(i);
      window.sceneSummaries[i] = null;
    }
  }
}

/** 与えられたテキストを、(英語or日本語)で N行程度に要約する */
async function generateSummaryWithLimit(text, lines = 5, lang = "en") {
  if (!text.trim()) return "";
  let sys = "You are a talented summarizer. The final language must be English.";
  let user = `
Summarize the following text in ${lines} lines of English:
${text}
`;
  if (lang === "ja") {
    sys = "あなたは優秀な要約者です。必ず日本語で。";
    user = `
以下のテキストを${lines}行程度で簡潔にまとめてください:
${text}
`;
  }
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: user }
        ],
        temperature: 0.5
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("要約失敗:", err);
    return "";
  }
}

/** シーン or 行動を編集したら英訳を作り直す */
async function onSceneOrActionContentEdited(entry, newText) {
  if (!window.apiKey) {
    return;
  }
  if (newText.trim() === entry.content.trim()) {
    return;
  }
  // 翻訳を作り直す
  // モーダルを一時的に表示
  showLoadingModal(true);
  try {
    const en = await generateEnglishTranslation(newText);
    entry.content = newText;
    entry.content_en = en;
    const up = {
      ...entry,
      content: newText,
      content_en: en
    };
    await updateSceneEntry(up);
  } catch (err) {
    console.error("再翻訳失敗:", err);
  } finally {
    showLoadingModal(false);
  }
}

/** シーン履歴を表示 */
function updateSceneHistory() {
  const his = document.getElementById("scene-history");
  if (!his) return;
  his.innerHTML = "";

  // セクション表示
  const wd = window.currentScenario?.wizardData;
  let sections = [];
  if (wd && wd.sections) {
    sections = wd.sections;
  }
  let sorted = [...sections].sort((a, b) => a.number - b.number);
  const firstUncleared = sorted.find(s => !s.cleared);
  sorted = sections;
  if (!firstUncleared && sorted.length > 0) {
    const tile = document.createElement("div");
    tile.className = "history-tile summary title";
    tile.textContent = "シナリオ達成!";
    his.appendChild(tile);
  }

  for (const s of sorted) {
    const t = document.createElement("div");
    if (s.number < (firstUncleared?.number || Infinity)) {
      t.className = "history-tile summary";
      t.textContent = `${decompressCondition(s.conditionZipped)}(クリア済み)`;
      refreshEndingButtons();
    } else if (s.number === firstUncleared?.number) {
      t.className = "history-tile summary";
      t.textContent = `セクション${s.number} (未クリア)`;
    }
    his.appendChild(t);
  }
  let tile = document.createElement("div");
  tile.className = "history-tile summary separator";
  his.appendChild(tile);
  
  // シナリオ概要  
  const scenarioSummaryEl = document.createElement("div");
  scenarioSummaryEl.id = "scenario-summary";
  scenarioSummaryEl.innerHTML = wd.scenarioSummary || "";
  his.appendChild(scenarioSummaryEl);
  
  // 最後のシーンは後で showLastScene() 側で表示するので履歴には表示しない
  const lastScene = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  const skipIds = [];
  if (lastScene) {
    skipIds.push(lastScene.entryId);
    window.sceneHistory.forEach(x => {
      if (x.type === "image" && x.sceneId === lastScene.sceneId) {
        skipIds.push(x.entryId);
      }
    });
  }
  const showEntries = window.sceneHistory
    .filter(e => !skipIds.includes(e.entryId))
    .sort((a, b) => a.entryId - b.entryId);

  tile = document.createElement("div");
  for (const e of showEntries) {
    if (e.type === "action") {
      tile = document.createElement("div");

      // 履歴に表示する行動
      tile.className = "history-tile";

      const at = document.createElement("p");
      at.className = "action-text";
      at.setAttribute("contenteditable", window.apiKey ? "true" : "false");
      at.innerHTML = DOMPurify.sanitize(e.content);
      at.addEventListener("blur", async () => {
        await onSceneOrActionContentEdited(e, at.innerHTML.trim());
      });
      tile.appendChild(at);
      his.appendChild(tile);
    } else if (e.type === "scene") {
      // 履歴に表示するシーン
      tile.className = "history-tile";

      // 削除ボタン
      const delBtn = document.createElement("button");
      delBtn.className = "delete-scene"
      delBtn.textContent = "シーンを削除";
      delBtn.addEventListener("click", async () => {
        await deleteSceneAndPreviousAction(e);
      });

      tile.appendChild(delBtn);
      // シーン本文 (contenteditable)
      const st = document.createElement("p");
      st.className = "scene-text";
      st.setAttribute("contenteditable", window.apiKey ? "true" : "false");
      st.innerHTML = DOMPurify.sanitize(e.content);
      st.addEventListener("blur", async () => {
        await onSceneOrActionContentEdited(e, st.innerHTML.trim());
      });
      tile.appendChild(st);

      his.appendChild(tile);

    } else if (e.type === "image") {
      // 履歴に表示する画像
      tile.className = "history-tile";

      const img = document.createElement("img");
      img.src = e.dataUrl;
      img.alt = "生成画像";
      img.style.maxHeight = "350px";
      img.style.alignSelf = "flex-end";
      img.style.width = "100%";
      img.style.objectFit = "contain";
      img.style.marginBottom = "60px";
      img.style.objectPosition = "right";
      tile.appendChild(img);

      const reBtn = document.createElement("button");
      reBtn.textContent = "再生成";
      reBtn.style.width = "10rem";
      reBtn.style.right = "calc(10rem + 4rem)";
      reBtn.style.bottom = "70px";
      reBtn.addEventListener("click", () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(e);
        if (idx >= 0) {
          openImagePromptModal(e.prompt, idx);
        }
      });
      tile.appendChild(reBtn);

      const delBtn = document.createElement("button");
      delBtn.textContent = "画像削除";
      delBtn.style.bottom = "70px";
      delBtn.style.right = "20px";

      delBtn.addEventListener("click", async () => {
        await deleteSceneEntry(e.entryId);
        window.sceneHistory = window.sceneHistory.filter(x => x.entryId !== e.entryId);
        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(delBtn);

      his.appendChild(tile);
    }
  }
  his.scrollTop = his.scrollHeight;
}

/** シーン削除 + 直前アクション削除 → 再描画 */
async function deleteSceneAndPreviousAction(sceneEntry) {
  // このシーンと同じ sceneId の画像をまとめて削除
  const removeIds = [sceneEntry.entryId];
  window.sceneHistory.forEach(x => {
    if (x.type === "image" && x.sceneId === sceneEntry.sceneId) {
      removeIds.push(x.entryId);
    }
  });

  // さらに「直前のアクション」を探して削除する
  //   → sceneEntry より前にある entryId の中から最後に出てくる type==="action"
  //   → findLastIndex のようなイメージで走査
  const idx = window.sceneHistory.findIndex(e => e.entryId === sceneEntry.entryId);
  if (idx > 0) {
    for (let i = idx - 1; i >= 0; i--) {
      if (window.sceneHistory[i].type === "action") {
        removeIds.push(window.sceneHistory[i].entryId);
        break;
      }
    }
  }

  // DB削除
  for (const rid of removeIds) {
    await deleteSceneEntry(rid);
  }
  // メモリ上から削除
  window.sceneHistory = window.sceneHistory.filter(x => !removeIds.includes(x.entryId));

  // 要約再計算 & 再描画
  await handleSceneSummaries();
  updateSceneHistory();
  showLastScene();
}

/** 最新シーンを表示 */
function showLastScene() {
  const storyDiv = document.getElementById("story");
  const lastSceneImagesDiv = document.getElementById("last-scene-images");
  if (!storyDiv || !lastSceneImagesDiv) return;

  const nextSceneBtn = document.getElementById("next-scene");
  const playerInput = document.getElementById("player-input");
  const playerActionLabel = document.getElementById("player-action");

  const lastScene = [...window.sceneHistory].reverse().find(e => e.type === "scene");

  if (lastScene) {
    storyDiv.innerHTML = "";

    // シーン本文
    const st = document.createElement("p");
    st.className = "scene-text";
    st.setAttribute("contenteditable", window.apiKey ? "true" : "false");
    st.innerHTML = DOMPurify.sanitize(lastScene.content, DOMPURIFY_CONFIG);
    st.addEventListener("blur", async () => {
      await onSceneOrActionContentEdited(lastScene, st.innerHTML.trim());
    });
    storyDiv.appendChild(st);

    // 「このシーンを削除」ボタン
    const deleteBtn = document.createElement("button");
    deleteBtn.className = "delete-scene"
    deleteBtn.textContent = "シーンを削除";
    deleteBtn.addEventListener("click", async () => {
      await deleteSceneAndPreviousAction(lastScene);
    });
    storyDiv.appendChild(deleteBtn);

    // 画像エリア
    lastSceneImagesDiv.innerHTML = "";
    const images = window.sceneHistory.filter(x => x.type === "image" && x.sceneId === lastScene.sceneId);
    images.forEach(imgEntry => {
      const c = document.createElement("div");
      c.style.marginBottom = "10px";

      const i = document.createElement("img");
      i.src = imgEntry.dataUrl;
      i.alt = "シーン画像";
      i.style.maxWidth = "100%";
      c.appendChild(i);

      const reBtn = document.createElement("button");
      reBtn.textContent = "再生成";
      reBtn.addEventListener("click", () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(imgEntry);
        if (idx >= 0) {
          openImagePromptModal(imgEntry.prompt, idx);
        }
      });
      c.appendChild(reBtn);

      const dBtn = document.createElement("button");
      dBtn.textContent = "画像削除";
      dBtn.addEventListener("click", async () => {
        await deleteSceneEntry(imgEntry.entryId);
        window.sceneHistory = window.sceneHistory.filter(x => x.entryId !== imgEntry.entryId);
        showLastScene();
        updateSceneHistory();
      });
      c.appendChild(dBtn);

      lastSceneImagesDiv.appendChild(c);
    });

    if (window.apiKey) {
      nextSceneBtn.style.display = "inline-block";
      playerInput.style.display = "inline-block";
      playerActionLabel.textContent = "プレイヤーはどんな行動をしますか？";
    } else {
      nextSceneBtn.style.display = "none";
      playerInput.style.display = "none";
      playerActionLabel.textContent = "";
    }
  } else {
    // シーンが無い
    storyDiv.innerHTML = "";
    lastSceneImagesDiv.innerHTML = "";

    if (window.apiKey) {
      nextSceneBtn.style.display = "inline-block";
      playerInput.style.display = "block";
      playerActionLabel.textContent = "最初のシーンを作るため行動を入力してください。";
    } else {
      nextSceneBtn.style.display = "none";
      playerInput.style.display = "none";
      playerActionLabel.textContent = "";
    }
  }
}

/** 画像用プロンプト生成 */
async function generateImagePromptFromScene(sceneText) {
  if (!window.apiKey) return "";
  try {
    const systemMsg = {
      role: "system",
      content: "あなたは画像生成のための短い英語プロンプトを作るアシスタントです。"
    };
    const userMsg = {
      role: "user",
      content: `
以下のシーン文章をもとに、イラストを生成するための英語メインのキーワード列を作成してください。
説明文や文章体は禁止。
シーン:
${sceneText}
      `
    };

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4-0613",
        messages: [systemMsg, userMsg],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) {
      console.warn("imagePrompt function callingエラー:", data.error);
      return "";
    }
    return (data.choices[0].message.content || "").trim();
  } catch (e) {
    console.error("generateImagePromptFromScene失敗:", e);
    return "";
  }
}

/** セクション達成チェック */
async function checkSectionClearViaChatGPT(latestAction, latestScene) {
  const wd = window.currentScenario?.wizardData;
  if (!wd || !wd.sections) return;
  const sorted = wd.sections.slice().sort((a, b) => a.number - b.number);
  const firstUncleared = sorted.find(s => !s.cleared);
  if (!firstUncleared) {
    return;
  }
  const conditionText = decompressCondition(firstUncleared.conditionZipped);

  const scenarioSummary = wd.scenarioSummary || "(概要なし)";
  const messages = [
    {
      role: "system",
      content: "あなたはTRPGゲームマスターのサポートAIです。回答はYESまたはNOのみでお願いします。"
    },
    {
      role: "user",
      content: `
シナリオ概要:
${scenarioSummary}

達成条件:
「${conditionText}」

最新の行動とシーン:
(行動) ${latestAction}
(シーン) ${latestScene}

この達成条件は、今の行動やシーン内容から見て、既に満たされましたか？
YESかNOのみで答えてください。判断が難しい時はYESにしてください。
`
    }
  ];

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.0
      })
    });
    const data = await response.json();
    if (data.error) throw new Error(data.error.message);

    const answer = (data.choices[0].message.content || "").trim().toUpperCase();
    if (answer.startsWith("YES")) {
      firstUncleared.cleared = true;
      window.currentScenario.wizardData.sections = wd.sections;
      await updateScenario(window.currentScenario);
      showToast(`セクション${firstUncleared.number}をクリアしました。`);
    } else {
      console.log("未達成と判定されました。");
    }
  } catch (err) {
    console.error("セクション判定API失敗:", err);
  }
}

/** パーティ文章 */
function buildPartyInsertionText(party) {
  let txt = "【パーティ編成情報】\n";

  // ▼ アバター（1人だけ）
  const ava = party.find(e => e.role === "avatar");
  if (ava) {
    txt += "◆プレイヤー(アバター)\n";
    txt += buildCardDescription(ava);
    txt += "\n";
  }

  // ▼ パートナー（複数可）
  const pt = party.filter(e => e.role === "partner");
  if (pt.length > 0) {
    txt += "◆パートナー\n";
    pt.forEach(p => {
      txt += buildCardDescription(p);
      txt += "\n";
    });
  }

  // ▼ その他 (none)
  const others = party.filter(e => !e.role || e.role === "none");
  if (others.length > 0) {
    const cset = others.filter(x => x.type === "キャラクター");
    const mset = others.filter(x => x.type === "モンスター");
    const iset = others.filter(x => x.type === "アイテム");

    if (cset.length > 0) {
      txt += "◆キャラクター\n";
      cset.forEach(c => {
        txt += buildCardDescription(c);
        txt += "\n";
      });
    }
    if (mset.length > 0) {
      txt += "◆モンスター\n";
      mset.forEach(m => {
        txt += buildCardDescription(m);
        txt += "\n";
      });
    }
    if (iset.length > 0) {
      txt += "◆アイテム\n";
      iset.forEach(i => {
        txt += buildCardDescription(i);
        txt += "\n";
      });
    }
  }
  txt +=
    "以上を踏まえて、プレイヤー、パートナーは味方NPC、アイテムは登場するアイテム、" +
    "キャラクターは中立NPC、モンスターは敵対NPCとして扱ってください。" +
    "シナリオ概要を優先するため、世界観が合わない場合は調整してもよいです。例：レーザーガン→リボルバー。";
  return txt;
}

/**
 * 1件のカードデータから、
 * レア度・名前・状態(キャラ/モンスターのみ)・特技・キャプション・外見(imageprompt)
 * をまとめたテキストを返す。
 */
function buildCardDescription(card) {
  let result = "";
  result += ` - 【名前】${card.name}\n`;
  result += `   【レア度】${card.rarity || "★0"}\n`;
  if (card.type === "キャラクター" || card.type === "モンスター") {
    result += `   【状態】${card.state || "なし"}\n`;
  }
  result += `   【特技】${card.special || "なし"}\n`;
  result += `   【キャプション】${card.caption || "なし"}\n`;
  result += `   【外見】${card.imageprompt || "なし"}\n`;

  return result;
}

function showLoadingModal(show) {
  const m = document.getElementById("loading-modal");
  if (!m) return;
  m.style.display = show ? "flex" : "none";
}

function onCancelFetch() {
  window.cancelRequested = true;
  if (window.currentRequestController) {
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}

/** 画像生成ボタン：自動生成(現シーンから) */
async function generateImageFromCurrentScenePrompt() {
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  if (!lastSceneEntry) {
    alert("まだシーンがありません。");
    return;
  }
  if (!lastSceneEntry.prompt) {
    alert("生成する為のプロンプトがありません");
    return;
  }
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }

  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓\n" +
    lastSceneEntry.prompt;

  window.cancelRequested = false;
  showLoadingModal(true);

  try {
    const resp = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1792x1024",
        response_format: "b64_json"
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // 新しいimage entry
    const newEntry = {
      scenarioId: window.currentScenarioId || 0,
      type: "image",
      sceneId: lastSceneEntry.sceneId,
      content: "",
      content_en: "",
      dataUrl,
      prompt: lastSceneEntry.prompt
    };
    const newId = await addSceneEntry(newEntry);
    window.sceneHistory.push({
      ...newEntry,
      entryId: newId
    });

    updateSceneHistory();
    showLastScene();
  } catch (err) {
    console.error("画像生成失敗:", err);
    alert("画像生成に失敗:\n" + err.message);
  } finally {
    showLoadingModal(false);
  }
}

/** カスタム画像生成モーダルを開く */
function openImagePromptModal(scenePrompt = "", index = null) {
  window.editingImageEntry = null;
  if (index !== null) {
    const entry = window.sceneHistory[index];
    if (entry && entry.type === "image") {
      scenePrompt = entry.prompt;
      window.editingImageEntry = { index };
    }
  } else {
    const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
    if (lastSceneEntry && lastSceneEntry.prompt) {
      scenePrompt = lastSceneEntry.prompt;
    }
  }
  document.getElementById("image-custom-prompt").value = scenePrompt;
  const modal = document.getElementById("image-prompt-modal");
  modal.classList.add("active");
}

/** カスタム画像生成モーダルを閉じる */
function closeImagePromptModal() {
  const modal = document.getElementById("image-prompt-modal");
  modal.classList.remove("active");
  window.editingImageEntry = null;
}

/** カスタム画像生成ボタン押下 */
async function onCustomImageGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  const userPromptText = document.getElementById("image-custom-prompt").value.trim();
  if (!userPromptText) {
    alert("プロンプトが空です。");
    return;
  }

  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓\n" +
    userPromptText;

  showLoadingModal(true);
  closeImagePromptModal();

  try {
    const resp = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1792x1024",
        response_format: "b64_json"
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    if (window.editingImageEntry) {
      // 既存画像の再生成
      const idx = window.editingImageEntry.index;
      const entry = window.sceneHistory[idx];
      if (entry && entry.type === "image") {
        entry.dataUrl = dataUrl;
        entry.prompt = userPromptText;
        const upRec = {
          ...entry,
          dataUrl,
          prompt: userPromptText
        };
        await updateSceneEntry(upRec);
      }
    } else {
      // 新規画像
      const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
      if (!lastSceneEntry) {
        showLoadingModal(false);
        alert("シーンがありません。");
        return;
      }
      const newRec = {
        scenarioId: window.currentScenarioId || 0,
        type: "image",
        sceneId: lastSceneEntry.sceneId,
        content: "",
        content_en: "",
        dataUrl,
        prompt: userPromptText
      };
      const newId = await addSceneEntry(newRec);
      window.sceneHistory.push({
        ...newRec,
        entryId: newId
      });
    }

    updateSceneHistory();
    showLastScene();
  } catch (e) {
    console.error("カスタム画像生成失敗:", e);
    alert("カスタム画像生成失敗:\n" + e.message);
  } finally {
    showLoadingModal(false);
  }
}

/** 日本語->英語翻訳 */
async function generateEnglishTranslation(japaneseText) {
  if (!japaneseText.trim()) return "";
  const sys = "あなたは優秀な翻訳家です。";
  const u = `以下のテキストを自然な英語に翻訳:\n${japaneseText}`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: u }
        ],
        temperature: 0.3
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("翻訳失敗:", err);
    return "";
  }
}

/** 英語->日本語翻訳 （追加） */
async function generateJapaneseTranslation(englishText) {
  if (!englishText.trim()) return "";
  const sys = "あなたは優秀な翻訳家です。";
  const u = `以下の英文を自然な日本語に翻訳:\n${englishText}`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: u }
        ],
        temperature: 0.3
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("翻訳失敗:", err);
    return englishText; // 失敗したら英語のまま
  }
}

// 外部公開
window.generateImageFromCurrentScene = generateImageFromCurrentScenePrompt;
window.onCustomImageGenerate = onCustomImageGenerate;
window.openImagePromptModal = openImagePromptModal;
window.closeImagePromptModal = closeImagePromptModal;
window.onCancelFetch = onCancelFetch;
window.getNextScene = getNextScene;
--- 
styles.css 
@font-face {
  font-family: "icomoon";
  src: url("fonts/icomoon.eot?1r4kr6");
  src:
    url("fonts/icomoon.eot?1r4kr6#iefix") format("embedded-opentype"),
    url("fonts/icomoon.ttf?1r4kr6") format("truetype"),
    url("fonts/icomoon.woff?1r4kr6") format("woff"),
    url("fonts/icomoon.svg?1r4kr6#icomoon") format("svg");
  font-weight: normal;
  font-style: normal;
  font-display: block;
}

.iconmoon {
  font-family: "icomoon" !important;
}

/**/
/* 新聞のようなアイコン */
.icon-newspaper:before {
  content: "\e009";
}
/* 画像アイコン */
.icon-picture:before {
  content: "\e00f";
}
.icon-key:before {
  content: "\e02c";
}
.icon-strategy:before {
  content: "\e03b";
}
.icon-beaker:before {
  content: "\e03c";
}
.icon-profile-male:before {
  content: "\e040";
}
.icon-target:before {
  content: "\e04e";
}
/* 家のアイコン */
.icon-home3:before {
  content: "\e902";
}
.icon-gift:before {
  content: "\e99f";
}
.icon-volume-high:before {
  content: "\ea26";
}

.icon-volume-mute2:before {
  content: "\ea2a";
}
.icon-sort-alpha-asc:before {
  content: "\ea48";
}
.icon-sort-alpha-desc:before {
  content: "\ea49";
}

.icA:before {
  content: "\ea26";
}
.icB:before {
  content: "\ea2a";
}

/* styles.css */

/* ベース */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #3d3d3d;
}

.container {
  position: relative;
  box-sizing: border-box;
  max-width: calc(100% - 40px);
  margin: 80px auto 20px;
  padding: 20px;
  background-color: rgba(0, 0, 0, 0.7);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  color: #f0f0f0;
}

.button-container {
  display: flex;
  flex-direction: row;
  gap: 20px;
  justify-content: center;
}
#warehouse-card-container {
  opacity: 0;
  transition: opacity 0.3s ease;
}

h1 {
  text-align: center;
}

h2 {
  font-size: 1.5em;
  margin-bottom: 10px;
}

.api-key-section {
  margin-bottom: 20px;
}

input,
textarea {
  box-sizing: border-box;
  width: 100%;
  padding: 10px;
  font-size: 1.5rem;
  border: 1px solid #ccc;
  background-color: #434343;
  color: #f0f0f0;
  margin-bottom: 10px;
}

input[type="checkbox"] {
  width: initial;
  margin: auto 10px auto 0;
  padding: 0;
  width: 2rem;
  height: 2rem;
}

button {
  text-shadow: 1px 1px 4px #000;
  padding: 10px 10px;
  background-color: #4caf50;
  background-color: #5f4c38;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  min-height: 3rem;
  min-width: 5.5rem;
  box-sizing: border-box;
  box-shadow: inset 0px 0px 8px 2px #161616;
  border: 1px solid #876d51;
  background-image: linear-gradient(0deg, #00000061, transparent);
}

button:hover {
  background-color: #45a049;
  border: 1px solid #45a049;
}

/* シーン履歴 */
.scene-history {
  max-height: 50vh;
  overflow-y: auto;
  border: none;
  padding: 0;
  background-color: transparent;
  display: flex;
  flex-direction: column;
  gap: 0;
  margin-bottom: 20px;
  margin-right: -20px;
  margin-left: -20px;
  margin-top: -20px;
}

#scenario-summary,
.history-tile.summary {
  font-size: 0.8rem;
  font-family: serif;
  background-color: #1111115e;
  padding: 10px 20px;
  align-items: flex-start;
}
.history-tile.summary.separator {
  padding: 0;
  border-bottom: 1px dashed #666;
}

.history-tile.summary.title {
  font-size: 1rem;
}

.history-tile {
  position: relative;
  box-sizing: border-box;
  padding: 20px 20px 60px 20px;
  background-color: transparent;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin: 0 auto;
  text-align: right;
  width: 100%;
  display: flex;
  flex-direction: column;
}

.history-tile:nth-child(odd) {
  background-color: #00000059;
}
.history-tile:last-of-type {
  padding-bottom: 0;
}

.scene-text,
.action-text,
.scenario-text {
  text-align: left;
  font-family: serif;
  line-height: 1.8em;
  margin: 0;
  padding: 0;
  font-size: 22px;
  letter-spacing: 0.1em;
  border: 1px dashed transparent;
  cursor: text;
}
.action-text {
  font-family: initial;
}

.history-tile .scene-text,
.history-tile .action-text,
.history-tile .scenario-text {
  font-size: 0.8rem;
}
.history-tile .action-text {
  font-size: 1rem;
}

.history-tile:last-child .action-text {
  font-size: 1.4rem;
}

.history-tile button {
  position: absolute;
  bottom: 20px;
  margin-bottom: 0px;
  max-width: 10rem;
  background-color: transparent;
  border: 1px dashed #bbb;
  color: #bbb;
  width: 100%;
  border-radius: 20px;
  min-height: initial;
  max-height: initial;
  text-shadow: none;
  box-shadow: none;
  background-image: none;
}

.history-tile button:hover {
  background-color: #aaaaaa73;
  color: #000;
  border-color: #000;
}

.delete-scene {
  max-width: 10rem;
  background-color: transparent;
  border: 1px dashed #bbb;
  color: #bbb;
  width: 100%;
  border-radius: 20px;
  min-height: initial;
  max-height: initial;
  text-shadow: none;
  box-shadow: none;
  background-image: none;
}

.delete-scene:hover {
  background-color: #aaaaaa73;
  color: #000;
  border-color: #000;
}
.scene-text[contenteditable]:focus,
.action-text[contenteditable]:focus,
.scenario-text[contenteditable]:focus {
  border: 1px dashed #4caf50;
  outline: none;
}

#story {
  font-size: 1.4rem;
  padding-bottom: 10px;
  min-height: 60px;
}
/* ▼ 0件時メッセージ */
#no-scenarios-message {
  display: none;
  color: #ccc;
  text-align: center;
  margin-top: 20px;
}

/* ▼ モーダル（フェードイン／アウトで表示） */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* 背景の黒み */
  background-color: rgba(0, 0, 0, 0.8);

  /* フレックスで中央寄せ */
  display: flex;
  justify-content: center;
  align-items: center;

  /* ▼ フェードイン/アウトに使う */
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
  z-index: 9999;
}

.modal.active {
  opacity: 1;
  pointer-events: auto;
  flex-direction: column;
  justify-content: center;
}

/* モーダル内部 */
.modal-content {
  box-sizing: border-box;
  background-color: rgba(0, 0, 0, 0.6);
  color: #f0f0f0;
  padding: 0;
  border-radius: 5px;
  text-align: center;
  max-height: 100vh;
  overflow-y: auto;
  width: 100%;
  padding: 20px;
  /* ふわっと拡大 */
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.modal.active .modal-content {
  transform: scale(1);
}

.modal-content {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* カード関連 */
#card-container,
#party-modal-card-container,
#warehouse-card-container {
  margin-top: 20px;
  box-sizing: border-box;
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  justify-content: center;
  width: 100%;
}

.card {
  width: 100%;
  aspect-ratio: 63 / 88;
  perspective: 1000px;
  cursor: pointer;
  transition: transform 0.3s ease;
  position: relative;
  max-width: 300px;
}

.card-inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  transition: transform 0.6s;
}

.card.flipped .card-inner {
  transform: rotateY(180deg);
}

.card-front,
.card-back {
  color: #222;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;
  backface-visibility: hidden;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

.card-front {
  box-sizing: border-box;
  padding: 3%;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  position: relative;
}

.card-front h3 {
  padding: 0;
  margin: 0;
  font-size: 1rem;
}

.card-front .card-type {
  position: absolute;
  right: 10px;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: bold;
  font-size: 0.85rem;
  z-index: 2;
}

.card-front .card-image {
  width: 100%;
  height: 40%;
  background: linear-gradient(135deg, #cccccc70, #eeeeee70);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.card-front .card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: top;
}

.card-front .gen-image-btn {
  position: absolute;
  bottom: 8px;
  right: 8px;
  padding: 4px 8px;
  background-color: rgba(0, 0, 0, 0.6);
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 0.8rem;
  z-index: 2;
  box-shadow: none;
  background-image: none;
}

.gen-image-btn:disabled {
  background-color: #999;
  color: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

.card-front .card-info {
  padding: 8px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex-grow: 1;
  overflow: auto;
  background-color: rgba(255, 255, 255, 0.7);
}

.card-front .card-info p {
  margin: 0;
  font-size: 0.85rem;
}

.card-front .card-info p:last-child {
  padding: 0;
  height: 100%;
  font-size: 0.85rem;
  align-items: center;
  display: flex;
  background-color: #eee;
  margin-top: 10px;
}

.card-front .card-info p:last-child span {
  transform: skew(-5deg);
  display: flex;
  padding: 10px;
}

.card-back {
  box-sizing: border-box;
  background: linear-gradient(135deg, #1e3c72, #2a5298);
  color: #fff;
  transform: rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  padding: 10px;
  text-align: center;
}

@media (max-width: 600px) {
  #card-container {
    grid-template-columns: repeat(1, 1fr);
  }
}

.bezel {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  z-index: 100;
  border-radius: 2%;
  padding: 3%;
}

.bezel.rarity0 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity1 {
  background: linear-gradient(145deg, #b87333, #da8a67, #e97451, #c35817);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity2 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity3 {
  background: linear-gradient(145deg, #b69a00, #ffda64, #ffda6b, #d79000);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity4 {
  position: absolute;
  background: linear-gradient(145deg, #d1d1d1, #aeb9ff, #c0c0c0, #ecebe8);
  background-size: 400% 400%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: platinum-shimmer 5s ease-in-out infinite;
}

.bezel.rarity5 {
  background: linear-gradient(145deg, #4b0082, #0000cd, #008080, #fff);
  background-size: 150% 150%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: jewel-glow 5s ease-in-out infinite;
}

@keyframes platinum-shimmer {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

@keyframes jewel-glow {
  0% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
  50% {
    filter: brightness(1.2);
    background-position: 100% 50%;
  }
  100% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
}

#party-card-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.card.selected .bezel {
  outline: 10px solid #f44336;
  outline-offset: -10px;
  outline: 10px solid #f44336;
  outline-offset: -10px;
  background-image: none;
  -webkit-mask-image: none;
  background-color: #0000004d;
}

.manipulate-panel {
  display: flex;
  flex-direction: column;
  gap: 10px;
  width: 100%;
  justify-content: center;
  align-items: center;
}

.chips-container {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.warehouse-tab,
.chip {
  display: inline-flex;
  align-items: center;
  padding: 10px;
  border-radius: 30px;
  background-color: rgba(227, 227, 227, 0.4);
  color: #f0f0f0;

  cursor: pointer;
  user-select: none;
  transition: background-color 0.2s;
  min-width: 12rem;
  justify-content: center;
  background-image: linear-gradient(0deg, #00000061, transparent);
  border: 1px solid #999;
  box-shadow: inset 0px 0px 8px 2px #161616;
}

.chip-mini {
  min-width: 6rem;
}

.chip:hover {
  border: 1px solid #00d14c;
  background-color: #00d14c;
}

.warehouse-tab.active,
.chip.selected {
  background-color: #009e39;
  color: #fff;
}

.bg-thumb {
  position: relative;
  cursor: pointer;
  transition: transform 0.2s;
}

.bg-thumb:hover {
  transform: scale(1.02);
}

.bg-thumb-delete {
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: rgba(200, 0, 0, 0.7);
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.8rem;
  padding: 4px;
  display: none;
}

.bg-thumb:hover .bg-thumb-delete {
  display: inline-block;
}

.bg-stock-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 16px;
  margin: 20px 0;
}

/* ダミー要素用 */
.dummy {
  visibility: hidden;
  pointer-events: none;
  background-color: transparent;
  border: none;
}

/* レア度3以上で背景画像が大きくなりがちな場合に対応 */
.card.rarity3 .card-front .card-image,
.card.rarity4 .card-front .card-image,
.card.rarity5 .card-front .card-image {
  z-index: 0;
  height: 100%;
  width: 100%;
}

.card.rarity3 .card-front .card-image img,
.card.rarity4 .card-front .card-image img,
.card.rarity5 .card-front .card-image img {
  object-position: bottom;
  opacity: 0.9;
}

.card.rarity3 .card-info,
.card.rarity4 .card-info,
.card.rarity5 .card-info {
  position: absolute;
  box-sizing: border-box;
  width: 100%;
  left: 0;
  bottom: 0;
  padding-left: calc(3% + 8px);
  padding-right: calc(3% + 8px);
  padding-top: 3%;
  padding-bottom: 3%;
  border-radius: 0 0 20px 20px;
  background-color: rgba(37, 37, 37, 0.85);
  color: #fff;
  text-shadow: 0 0 10px #fff;
}

.card.rarity3 .card-front .card-info p:last-child,
.card.rarity4 .card-front .card-info p:last-child,
.card.rarity5 .card-front .card-info p:last-child {
  margin-left: -3%;
  margin-right: -3%;
  background-color: rgba(0, 0, 0, 0.7);
  color: #fff;
}

.card.rarity3 .card-front .card-info p:last-child span,
.card.rarity4 .card-front .card-info p:last-child span,
.card.rarity5 .card-front .card-info p:last-child span {
  padding-top: 20px;
  padding-bottom: 20px;
}

.card.rarity3 .card-front .gen-image-btn,
.card.rarity4 .card-front .gen-image-btn,
.card.rarity5 .card-front .gen-image-btn {
  top: calc(40% - 0.8rem);
  bottom: initial;
}

#scenario-list-container {
  text-align: right;
  align-items: center;
  display: flex;
  flex-direction: column;
  max-height: 100vh;
  overflow-y: auto;
}

.scenario-list-container,
.scenario-wizard-section,
.api-key-section,
.element-section {
  display: flex;
  flex-direction: row;
  justify-content: center;
  gap: 10px;
  margin-top: 20px;
  margin-bottom: 20px;
}

.scenario-list {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  flex-wrap: wrap;
  width: 100%;
  padding: 20px 10px;
  box-sizing: border-box;
  border: 1px solid #876d51;
}

.accordion-content .scenario-list:first-child {
  border-top: none;
}

.scenario-list + .scenario-list {
  border-top: none;
}

.scenario-list.selected {
  border: 1px solid #ff0;
}

.scenario-list:nth-child(odd) {
  background-color: #00000069;
}

.scenario-list .info {
  box-sizing: border-box;
  text-align: left;
  width: 100%;
}

.scenario-list .buttons {
  box-sizing: border-box;
  display: flex;
  width: 100%;
  flex-direction: row;
  gap: 10px;
  justify-content: right;
  flex-wrap: wrap;
}

.scenario-list .buttons .left-button {
  margin-right: auto;
}

.scenario-wizard-section {
  margin-top: 40px;
  margin-bottom: 40px;
}

.element-section button {
  margin: 0;
}

/* ▼ 倉庫ヘッダー全体の横並びレイアウト */
.warehouse-header-bar {
  display: flex;
  align-items: center;
  justify-content: center;
  /* 画面中央に置きたい場合 */
  width: calc(90% - 40px);
  margin: 0 auto 10px;
  gap: 10px;
  flex-wrap: wrap;
}

.warehouse-left,
.warehouse-center,
.warehouse-right {
  display: flex;
  flex: 1;
  align-items: center;
  gap: 10px;
}

.warehouse-center {
  justify-content: center;
}

.warehouse-left {
  justify-content: left;
}
.warehouse-right {
  justify-content: right;
}

@media (max-width: 700px) {
  .warehouse-tabs {
    flex-wrap: wrap;
    justify-content: center;
  }
  .warehouse-tab {
    min-width: 5rem;
  }
  .warehouse-header-bar {
    flex-direction: column;
    width: 100%;
  }
}

/* タブの見た目 */
.warehouse-tabs {
  display: flex;
  gap: 10px;
}

/* ソートUI */
#warehouse-sort-dropdown {
  box-sizing: border-box;
  height: 3rem;
  background-color: #333;
  color: #fff;
  border: 1px solid #666;
  border-radius: 4px;
  padding: 4px 8px;
  font-size: 0.9rem;
  cursor: pointer;
}
#warehouse-sort-dropdown:focus {
  outline: 2px solid #4caf50;
}

#warehouse-sort-direction-btn {
  width: 36px;
  height: 36px;
  background-color: #333;
  color: #fff;
  border: 1px solid #666;
  border-radius: 4px;
  font-size: 1.1rem;
  cursor: pointer;
  transition: background-color 0.2s;
}
#warehouse-sort-direction-btn:hover {
  background-color: #444;
}
#stop-bgm-button {
  margin: 0;
}
.close-warehouse-btn {
  margin: 0;
  display: flex;
  right: 20px;
  top: 20px;
  position: fixed;
  z-index: 10;
  border-radius: 50%;
  height: 50px;
  width: 50px;
  padding: 0;
  align-items: center;
  justify-content: center;
  background-color: #cf0000;
  max-width: initial;
  max-height: initial;
}

#start-new-scenario-button {
  background-color: #2196f3;
  font-size: 1.4rem;
  padding: 20px 35px;
  border-color: #2196f3;
}

#start-new-scenario-button:hover {
  background-color: #45a049;
  border-color: #45a049;
}

#change-bg-button {
  position: relative;
  z-index: 1;
}

#token-adjust-button {
  position: relative;
  z-index: 1;
}

#back-to-menu {
  position: relative;
  z-index: 1;
  margin-right: auto;
}

#view-all-sections-button {
  position: absolute;
  z-index: 1;
  left: 20px;
}

#clear-ending-button,
#ending-button {
  position: relative;
}

#get-card-button {
  position: absolute;
  left: 250px;
  margin: 0;
}

#image-auto-generate-button {
  width: 10rem;
}

.r-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: right;
  margin-bottom: 20px;
}

.l-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: left;
  margin-bottom: 20px;
}

@media (max-width: 600px) {
  .mobile-col {
    flex-direction: column;
    margin-bottom: 20px;
  }
}

.s-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 20px;
}

.c-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
}

#player-action {
  margin-bottom: 20px;
}

#player-input {
  margin-bottom: 20px;
}
#next-scene {
  width: 10rem;
}
/* ----- ステップ0のパーティ選択用クラス ----- */

/* 1行ぶんの枠 */
.wizard-party-row {
  display: flex;
  align-items: center;
  margin-bottom: 10px;

  /* 背景を少し透過した感じにするなど */
  background-color: rgba(255, 255, 255, 0.08);
  border-radius: 6px;
  transition: background-color 0.2s;
}

/* ホバー時に少し明るくなる */
.wizard-party-row:hover {
  background-color: rgba(255, 255, 255, 0.15);
}

/* 中にあるラジオボタンを隠して行全体クリックを可能にするための工夫 */
.wizard-party-row input[type="radio"] {
  /* 完全に隠したい場合 (見た目のラジオを後述の擬似要素で作る) */
  display: none;
}

/* ラベル部分 */
.wizard-party-label {
  display: flex;
  align-items: center;
  cursor: pointer;
  width: 100%; /* 行全体をラベルにする */
  padding: 10px 15px; /* 余白を少し広めに */
  box-sizing: border-box;
}

/* ラジオボタンの擬似要素を表示: before を丸にしてチェック状にする */
.wizard-party-label::before {
  content: "";
  display: inline-block;
  width: 20px;
  height: 20px;
  min-width: 20px;
  min-height: 20px;
  border-radius: 50%;
  border: 2px solid #fff;
  margin-right: 12px;
  transition:
    background-color 0.1s,
    border-color 0.1s;
  box-sizing: border-box;
}

/* 選択状態: input[type="radio"]:checked + .wizard-party-label::before で円を塗りつぶす */
.wizard-party-row input[type="radio"]:checked + .wizard-party-label::before {
  background-color: #019a39; /* 選択時の色 (例: 緑) */
  border-color: #00d14c;
}

/* パーティ画像 */
.wizard-party-label img {
  width: 60px;
  height: 60px;
  object-fit: cover;
  margin-right: 10px;
  border-radius: 4px;
  border: 1px solid #222; /* ほんの少し枠をつける */
  background-color: #161616;
}

/* 画像がない場合の No Image box */
.no-image-box {
  width: 60px;
  height: 60px;
  background-color: #555;
  color: #fff;
  margin-right: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  border: 1px solid #222;
}

#confirm-party-text,
#confirm-genre-type-text {
  text-align: left;
  width: 100%;
  margin: 0;
  margin-bottom: 10px;
}
#you-avatar-btn {
  width: 10rem;
}

#avatar-card-preview-container {
  width: 100%;
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
}
#avatar-form-container {
  display: flex;
  width: 100%;
  flex-direction: column;
  justify-content: left;
  align-items: flex-start;
}

.accordion-header:hover {
  background-color: #45a049;
  border: 1px solid #45a049;
}

/* アコーディオン全体のラッパ */
.accordion {
  margin-top: 30px;
  /* 既存スタイルを移行 */
}

/* アコーディオンヘッダー */
.accordion-header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  position: relative;
  text-shadow: 1px 1px 4px #000;
  background-color: #5f4c38;
  color: #fff;
  box-sizing: border-box;
  box-shadow: inset 0px 0px 8px 2px #161616;
  border: 1px solid #876d51;
  background-image: linear-gradient(0deg, #00000061, transparent);
  cursor: pointer;
  padding: 10px 15px;
  user-select: none;
  border-radius: 5px 5px 0 0;
}

/* アコーディオンコンテンツ */
.accordion-content {
  overflow: hidden;
  transition:
    max-height 0.3s ease,
    padding 0.3s ease;
  max-height: 0;
  margin-bottom: 0;
}

.accordion-content.open {
  padding: 0;
  margin-bottom: 20px;
  max-height: 100vh;
}

#show-hidden-scenarios {
  width: 1rem;
  height: 1rem;
}

.book {
  top: 0px;
  transition: ease 0.3s all;
}

.book:hover {
  top: 0;
  display: flex;
  z-index: 1000;
}
/*
悩み中…
.book::after{
  content: "";
  width: 0px;
  height: 100%;
  border-radius: 0;
  z-index: 100000;
  left: 100%;
  top: 0;
  background-color: #610404;
  transition: ease 0.3s all;}

.book:hover::after{
  width: 10px;
  position: absolute;
  display: flex
;
  transform-origin: left;
}
*/
/* =====================================
   3D 回転のための追加クラス
   （既存の .book は触らず、そのまま利用）
===================================== */
.book-wrapper {
  perspective: 1000px;
  display: inline-block;
  vertical-align: bottom;
  position: relative;
}
.book-inner {
  transform-style: preserve-3d;
  transition: transform 0.7s ease;
  transform-origin: left center;
  height: 200px;
}

.book {
  transform: rotateY(0deg);
  backface-visibility: hidden;
  position: absolute;
  left: 0;
  top: 0;
}
.book-front {
  transform: rotateY(90deg); /* ← 重要 */
  transform-origin: 0 0;
  backface-visibility: hidden;
  position: absolute;
  left: 0px;
  top: 0;
  height: 200px; /* 7:5比率で */
  width: 170px;
  transition: all 1s ease;
}

.book-front img {
  position: relative;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
  box-shadow: 0 5px 10px -4px #000;
}

.book-wrapper.facing-front .book-inner {
  transform: rotateY(-90deg); /* 背表紙 0 + (-90) = -90, 表紙 90 + (-90) = 0 */
}

.book-front-title {
  box-sizing: border-box;
  position: absolute;
  text-wrap: auto;
  background-color: #00000099;
  width: 100%;
  padding: 5px;
  top: 10px;
}

.bookshelf-board {
  width: 100%;
  border-bottom: 25px solid #fff;
  border-image-source: linear-gradient(to right bottom, rgb(219 183 111), rgb(194 134 73));

  flex: 1;
  overflow-x: auto;
  overflow-y: hidden;

  border-bottom: 20px solid;
  border-image-slice: 1;
  border-image-width: 1;
  border-image-outset: 0;
  border-image-repeat: stretch;
}

.book-wrapper.facing-front:last-child {
  padding-right: 140px;
}

/* ドラッグ中のドロップ候補用スタイル */
.book-wrapper.drag-over {
  box-sizing: border-box;
  border-right: 15px solid transparent;
  border-image-slice: 1;
  border-image-width: 5px;
  border-image-outset: 0;
  border-image-repeat: stretch;
  border-image-source: linear-gradient(to left, #fff 0px, #fff 20px, rgba(0, 0, 0, 0) 20px, rgba(0, 0, 0, 0) 100%);
}

#edit-scenario-covercolor1,
#edit-scenario-covercolor2 {
  padding: 0;
}

/* ================================
   シナリオ編集モーダル用の調整
================================ */

/* モーダル全体のコンテンツ幅をやや狭く & 中央寄せ */
.edit-scenario-modal-content {
  margin: 0 auto;
  text-align: left; /* 左寄せにすると入力欄が見やすい */
}

/* モーダルのタイトルと入力欄・ボタン間に余白 */
.edit-scenario-modal-content h3 {
  margin-top: 0;
  margin-bottom: 1rem;
}

/* 各行ごとにラベルと入力欄を横並び */
.edit-row {
  display: flex;
  align-items: center;
  max-width: 400px;
  margin-bottom: 1rem;
  flex-wrap: wrap; /* 狭い画面のとき折り返す */
  justify-content: center;
}

/* ラベルの幅・右余白などを統一 */
.edit-row label {
  margin: 0;
  white-space: nowrap;
  font-size: 1rem; /* お好みで */
  width: 100%;
}

/* ラジオボタン群は同じ行に2つ並べるだけ */
.radio-group label {
  margin-right: 16px;
  display: flex;
  align-items: center;
  gap: 4px;
}

/* カラーピッカーにあまり余計なpaddingをつけない */
#edit-scenario-covercolor1,
#edit-scenario-covercolor2 {
  width: 40px;
  height: 40px;
  margin: 0;
  padding: 0;
  border: 1px solid #ccc;
  cursor: pointer;
}

/* ボタンを横並び + 中央寄せに */
.modal-buttons {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 1rem;
}

.application-bar{
  position: fixed;
  display: flex;
  top: 0;
  background-color: #00000054;
  width: 100%;
  z-index: 100;
  justify-content: right;
  box-shadow: 0 0 8px #000;
  padding: 10px;
  box-sizing: border-box;
}

.application-bar button {
  min-width: 3rem;
}--- 
