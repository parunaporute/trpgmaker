貴方は会社の中で一番のエンジニアです。
・
・
・
・
・
以上を実施し、編集しないファイルを除き完全なコードを下さい。
characterCreate.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>エレメント作成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- ▼ 追加: 背景管理スクリプト -->
  <script src="js/background.js"></script>
</head>

<body>
  <!-- ▼ 追加: 背景変更ボタン + モーダル -->
  <button id="change-bg-button" style="
      color: #000;
      background-color: #DDD;
      border-radius: 2px;
      box-shadow: inset 0 0 3px #000;
      position: absolute;
      top: 0;
      right: 0;
    ">
    背景を変更する
  </button>

  <!-- 背景選択モーダル -->
  <div id="bg-modal" class="modal" style="display:none;">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>

      <div id="bg-stock-container" class="bg-stock-grid"></div>

      <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>
      <button id="bg-generate-button" style="margin-top:10px;">生成する</button>
      <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
    </div>
  </div>

  <!-- 背景生成中モーダル -->
  <div id="bg-generate-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>
  <div class="container">
    <h1>エレメント作成</h1>

    <!-- ガチャボタンのみ残し、ガチャ箱の移動関連ボタンは削除 -->
    <button id="gacha-btn" style="margin:10px;">エレメントガチャ</button>

    <!-- ▼ 「ガチャ生成中」モーダル -->
    <div id="gacha-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <p>生成中...</p>
        <button id="cancel-gacha-btn">キャンセル</button>
      </div>
    </div>

    <!-- ▼ エレメントのジャンル設定モーダル -->
    <div id="element-genre-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <h2>エレメントのジャンルを設定</h2>
        <p style="font-size: 0.9em; margin-bottom: 10px;">
          下記の軸を選択してください。<br>
          一度選択すると、ストレージに保存され次回以降も復元されます。
        </p>

        <!-- 舞台（複数可） -->
        <div style="margin-top:10px;">
          <strong>舞台（複数選択可）</strong><br>
          <div id="stage-chips-container" class="chips-container">
            <!-- 例：ファンタジー, SF, 歴史・時代劇... -->
          </div>
        </div>

        <!-- 雰囲気（単一） -->
        <div style="margin-top:10px;">
          <strong>雰囲気（単一選択）</strong><br>
          <div id="mood-chips-container" class="chips-container">
            <!-- 例：ライト/ポップ, 中間/バランス, ダーク/シリアス -->
          </div>
        </div>

        <div style="margin-top:20px;">
          <button id="genre-setting-ok-btn" style="margin-right:10px;">OK</button>
          <button id="genre-setting-cancel-btn">キャンセル</button>
        </div>
      </div>
    </div>

    <!-- ▼ 「その他」登録用モーダル -->
    <div id="other-input-modal" class="modal" style="display:none;">
      <div class="modal-content" style="max-width:400px;">
        <h2>「その他」を追加</h2>
        <p id="other-input-modal-category" style="font-weight:bold;"></p>
        <textarea id="other-input-text" rows="3" placeholder="新しく追加する候補"></textarea>
        <div style="margin-top:10px;">
          <button id="other-generate-btn">生成</button>
          <button id="other-ok-btn">OK</button>
          <button id="other-cancel-btn">キャンセル</button>
        </div>
        <p style="font-size:0.8em; color:#666; margin-top:10px;">
          ※「生成」ボタンを押すと、現状の候補にない新しい案をChatGPTで生成し、<br>
          その結果を上のテキストボックスに自動入力します。
        </p>
      </div>
    </div>

    <!-- ▼ 「削除」確認モーダル -->
    <div id="delete-confirm-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <p>この選択肢を削除しますが、よろしいですか？</p>
        <button id="delete-confirm-ok">OK</button>
        <button id="delete-confirm-cancel">キャンセル</button>
      </div>
    </div>

    <!-- 「選んだジャンルの出力例」 -->
    <div style="margin-top:20px;">
      <p><strong>選んだジャンルの出力例：</strong></p>
      <p id="genre-result-text" style="font-weight:bold; white-space:pre-wrap;"></p>
    </div>

    <!-- 画面上に表示する「最後に生成したカード一覧」 -->
    <div id="card-container"></div>
  </div>

  <!-- IndexedDBなどの共通スクリプト -->
  <script src="js/indexedDB.js"></script>
  <!-- 先にgachaCore.jsを読み込む -->
  <script src="js/gachaCore.js"></script>
  <!-- その後、characterCreate.jsを読み込む（改変版） -->
  <script src="js/characterCreate.js"></script>

  <script>
    // ページ読み込み時にDB初期化 & 背景適用
    window.addEventListener("load", async () => {
      await initIndexedDB();
      // 背景初期化(選択済みがあれば適用)
      await initBackground("characterCreate");
    });

    // メニューに戻るボタン
    document.getElementById("back-to-menu").addEventListener("click", function () {
      window.location.href = "index.html";
    });
  </script>
</body>

</html>
--- 
index.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>TRPG メニュー</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <!-- 黒背景 + 白文字ベースのcssを読み込む -->
  <link rel="stylesheet" href="styles.css" />

  <!-- カード表示などでDOMPurifyを使用 -->
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- 背景管理用スクリプト（既存） -->
  <script src="js/background.js"></script>
</head>

<body>
  <div class="container" style="text-align:center; margin-top:50px;">
    <h1>TRPG メニュー</h1>

    <!-- ▼ 追加：背景を変更するボタン（デザイン変更） -->
    <button id="change-bg-button" style="
        color: #000;
        background-color: #DDD;
        border-radius: 2px;
        box-shadow: inset 0 0 3px #000;
        position: absolute;
        top: 0;
        right: 0;
      ">
      背景を変更する
    </button>

    <!-- ▼ 背景選択モーダル -->
    <div id="bg-modal" class="modal" style="display:none;">
      <div class="modal-content bg-modal-content">
        <h2>背景選択</h2>

        <!-- ストック画像のサムネイルを並べる領域 -->
        <div id="bg-stock-container" class="bg-stock-grid">
          <!-- ここにIndexedDBから取得した背景画像サムネイルを並べる -->
        </div>

        <!-- 背景無しボタン -->
        <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>

        <!-- 生成ボタン -->
        <button id="bg-generate-button" style="margin-top:10px;">生成する</button>

        <!-- 閉じるボタン -->
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>

    <!-- 生成中モーダル -->
    <div id="bg-generate-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <p>背景画像を生成中...</p>
      </div>
    </div>

    <div class="api-key-section" style="margin-top:20px;">
      <label for="api-key-input">ChatGPT APIキーを入力：</label>
      <input type="text" id="api-key-input" placeholder="APIキーを入力" />
      <button id="set-api-key-button">APIキー設定</button>
      <button id="clear-api-key-button" style="background-color:#f44336;">APIキーをクリア</button>
    </div>

    <div class="element-section">
      <!-- エレメント作成ボタン -->
      <button id="character-create">エレメント作成</button>
      <!-- パーティ一覧ボタン -->
      <button id="party-list" style="margin-left:10px;">パーティ一覧</button>

      <!-- 全エレメントクリアボタン -->
      <button id="clear-character-btn" style="background-color:#f44336;">全エレメントをクリア</button>

      <!-- 倉庫確認ボタン -->
      <button id="show-warehouse-btn" style="margin-left:10px;">倉庫確認</button>
    </div>

    <!-- 新しいシナリオを始めるボタン -->
    <div class="scenario-wizard-section" style="margin-top:20px;">
      <button id="start-new-scenario-button" style="background-color:#2196F3;">
        新しいシナリオを始める
      </button>
    </div>

    <!-- 進行中のシナリオ一覧 -->
    <div id="ongoing-scenarios" style="margin-top:30px;">
      <h2>進行中のシナリオ</h2>
      <div id="active-scenarios-container">
        <!-- 進行中シナリオのリンクがここに表示される（現在未使用） -->
      </div>
      <div id="scenario-list-container">
        <!-- JavaScriptで一覧表示 & 削除ボタン -->
      </div>
    </div>
  </div>

  <!-- シナリオ削除用の確認モーダル -->
  <div id="delete-scenario-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h3>シナリオ削除の確認</h3>
      <p>このシナリオを削除します。よろしいですか？</p>
      <button id="delete-scenario-ok">OK</button>
      <button id="delete-scenario-cancel">キャンセル</button>
    </div>
  </div>

  <!-- 倉庫モーダル -->
  <div id="warehouse-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h2>倉庫</h2>
      <!-- 倉庫側の選択モードボタン -->
      <button id="toggle-warehouse-selection-mode-btn">選択モード</button>
      <!-- 倉庫選択カードを削除するボタン -->
      <button id="delete-selected-warehouse-btn" style="display:none; margin:10px;">選択したカードを削除</button>
      <button id="close-warehouse-btn" style="margin:10px;">閉じる</button>

      <div id="warehouse-card-container" style="margin:10px 0;"></div>
    </div>
  </div>

  <!-- ▼ ここから追加のエクスポート/インポートボタン -->
  <div style="text-align:center; margin-top:30px;">
    <button id="export-button" style="margin-right:20px;">エクスポート</button>
    <button id="import-button">インポート</button>
    <!-- 非表示のファイル入力要素（インポート時にzipを選択） -->
    <input type="file" id="import-file-input" accept=".zip" style="display:none;" />
  </div>

  <!-- 外部JavaScript(IndexedDB) -->
  <script src="js/indexedDB.js"></script>
  <!-- 新規: 背景管理用スクリプト（すでに<head>で読み込み済み） -->

  <script>

    // ページ読み込み時
    window.addEventListener("load", async () => {
      await initIndexedDB();

      // 背景初期化(選択済みがあれば適用)
      await initBackground("index");

      const scriptEl = document.createElement("script");
      scriptEl.src = "js/menu.js";
      document.head.appendChild(scriptEl);
    });

    // エレメント作成ページへ
    document.getElementById("character-create").addEventListener("click", () => {
      window.location.href = "characterCreate.html";
    });

    // パーティ一覧
    document.getElementById("party-list").addEventListener("click", () => {
      window.location.href = "partyList.html";
    });

    // 新しいシナリオ
    document.getElementById("start-new-scenario-button").addEventListener("click", () => {
      window.location.href = "scenarioWizard.html";
    });
  </script>

  <!-- ▼ 追加: JSZip / FileSaver 読み込み + exportImport.js -->
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
  <script src="js/exportImport.js"></script>

</body>

</html>--- 
partyCreate.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>パーティ編成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <!-- DOMPurifyはカード表示などで利用 -->
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- ▼ 追加：背景管理スクリプト -->
  <script src="js/background.js"></script>
</head>

<body>
  <!-- ▼ 追加: 背景変更ボタン + モーダル -->
  <button id="change-bg-button" style="
      color: #000;
      background-color: #DDD;
      border-radius: 2px;
      box-shadow: inset 0 0 3px #000;
      position: absolute;
      top: 0;
      right: 0;
    ">
    背景を変更する
  </button>

  <div id="bg-modal" class="modal" style="display:none;">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>

      <div id="bg-stock-container" class="bg-stock-grid"></div>

      <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>
      <button id="bg-generate-button" style="margin-top:10px;">生成する</button>
      <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
    </div>
  </div>

  <div id="bg-generate-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">
    <h1>パーティ編成</h1>

    <!-- パーティ名入力欄 -->
    <div>
      <label for="party-name-input">パーティ名：</label>
      <input type="text" id="party-name-input" placeholder="例: 勇者一行" style="margin-bottom:10px;" />
      <button id="save-party-name-btn">保存</button>
    </div>

    <!-- 倉庫ボタン -->
    <button id="show-warehouse-btn">倉庫</button>

    <!-- パーティ側の選択モードボタン -->
    <button id="toggle-party-selection-mode-btn" style="margin-left:10px;">選択モード</button>
    <!-- 選択したカードを倉庫に戻すボタン -->
    <button id="move-selected-to-warehouse-btn" style="margin-left:10px; display:none;">
      選択したカードを倉庫に戻す
    </button>

    <!-- ▼ プレイヤーの分身（1つだけ選べる） -->
    <section style="margin-top:20px;">
      <h2>プレイヤーの分身（アバター）</h2>
      <p style="color:#555; font-size:14px;">
        ※ ここに配置できるのは1つだけ。複数設定された場合、自動で以前のアバター設定が解除されます。
      </p>
      <div id="avatar-card-container" style="display:grid; grid-template-columns:repeat(3,1fr); gap:20px;">
      </div>
    </section>

    <!-- ▼ パートナー（複数選べる） -->
    <section style="margin-top:20px;">
      <h2>パートナー（複数可）</h2>
      <div id="partner-card-container" style="display:grid; grid-template-columns:repeat(3,1fr); gap:20px;">
      </div>
    </section>

    <!-- ▼ その他パーティ枠 -->
    <section style="margin-top:20px;">
      <h2>その他パーティ枠</h2>
      <div id="party-card-container" style="display:grid; grid-template-columns:repeat(3,1fr); gap:20px;">
      </div>
    </section>

    <!-- ▼ 倉庫モーダル -->
    <div id="warehouse-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <h2>倉庫</h2>
        <!-- 選択モードボタン（倉庫側） -->
        <button id="toggle-warehouse-selection-mode-btn">選択モード</button>
        <!-- 倉庫選択カードをパーティに入れるボタン -->
        <button id="add-to-party-btn" style="display:none; margin:10px;">パーティに入れる</button>
        <button id="close-warehouse-btn" style="margin:10px;">閉じる</button>

        <div id="warehouse-card-container"
          style="margin:10px 0; display:grid; grid-template-columns:repeat(3,1fr); gap:20px;">
        </div>
      </div>
    </div>

    <!-- 戻るボタン -->
    <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>
  </div>

  <!-- 必要なJSを末尾に読み込む -->
  <script src="js/indexedDB.js"></script>
  <script src="js/partyCreate.js"></script>

  <script>
    window.addEventListener("load", async () => {
      await initIndexedDB();
      await initBackground("partyCreate");
    });
  </script>
</body>
</html>
--- 
partyList.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>パーティ一覧</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- ▼ 追加：背景管理用スクリプト -->
  <script src="js/background.js"></script>
</head>
<body>
  <!-- ▼ 背景を変更するボタン + モーダル -->
  <button id="change-bg-button"
    style="
      color: #000;
      background-color: #DDD;
      border-radius: 2px;
      box-shadow: inset 0 0 3px #000;
      position: absolute;
      top: 0;
      right: 0;
    "
  >
    背景を変更する
  </button>

  <div id="bg-modal" class="modal" style="display:none;">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>
      <button id="bg-generate-button" style="margin-top:10px;">生成する</button>
      <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
    </div>
  </div>

  <div id="bg-generate-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">
    <h1>パーティ一覧</h1>
    <p style="margin-bottom:20px;">
      複数のパーティを作成して管理できます。<br>
      「カレントのパーティ」に設定すると、<br>
      以後の「パーティ編成」や「シナリオウィザード」画面でそれが使われます。
    </p>

    <!-- 新しいパーティを作成 -->
    <div style="margin-bottom:20px;">
      <label for="new-party-name">新しいパーティ名:</label>
      <input type="text" id="new-party-name" placeholder="パーティ名..." />
      <button id="create-party-button">作成</button>
    </div>

    <!-- パーティ一覧表示領域 -->
    <div id="party-list-container" style="margin-bottom:30px;"></div>

    <!-- 戻るボタン -->
    <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>
  </div>

  <!-- パーティ名の変更用モーダル -->
  <div id="edit-party-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:400px;">
      <h2>パーティ名の変更</h2>
      <input type="text" id="edit-party-name" style="width:100%;" />
      <button id="edit-party-save-button">保存</button>
      <button id="edit-party-cancel-button">キャンセル</button>
    </div>
  </div>

  <script src="js/indexedDB.js"></script>
  <script src="js/partyList.js"></script>

  <script>
    window.addEventListener("load", async()=>{
      await initIndexedDB();
      await initBackground("partyList");
    });
  </script>
</body>
</html>
--- 
scenario.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>シンプルTRPG</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
  <!-- 追加：内部的にZIP圧縮するためのpakoライブラリ -->
  <script src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js"></script>

  <!-- ▼ 背景管理用スクリプト -->
  <script src="js/background.js"></script>
</head>

<body>
  <!-- ▼ 背景を変更するボタン + モーダル -->
  <button id="change-bg-button" style="
      color: #000;
      background-color: #DDD;
      border-radius: 2px;
      box-shadow: inset 0 0 3px #000;
      position: absolute;
      top: 0;
      right: 0;
    ">
    背景を変更する
  </button>

  <div id="bg-modal" class="modal" style="display:none;">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>
      <button id="bg-generate-button" style="margin-top:10px;">生成する</button>
      <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
    </div>
  </div>

  <div id="bg-generate-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <!-- メニューに戻るボタン -->
  <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>

  <!-- 目的達成型の場合のみ表示する「ネタバレ」ボタン -->
  <button id="spoiler-button" style="display:none; background-color:#E91E63; margin-top:20px; float:right;">
    ネタバレ
  </button>

  <!-- ネタバレ（クリア条件）表示モーダル -->
  <div id="spoiler-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h2>クリア条件</h2>
      <p id="clear-condition-text" style="white-space:pre-wrap;"></p>
      <button id="close-spoiler-modal">閉じる</button>
    </div>
  </div>

  <div class="container">

    <!-- シーン履歴 -->
    <div id="scene-history" class="scene-history"></div>

    <!-- ゲーム画面セクション -->
    <div class="game-section" style="display:none;">
      <div id="story" style="margin-bottom:20px;"></div>
      <div id="last-scene-images" style="margin-bottom:20px;"></div>

      <!-- ★ ボタン2つ: 自動生成 & カスタム -->
      <div>
        <button id="image-auto-generate-button">自動生成(現シーンから)</button>
        <button id="image-prompt-modal-button">編集して生成(カスタム)</button>
      </div>

      <div id="player-action" style="margin-top:20px;">プレイヤーの行動を入力してください</div>
      <div style="margin-top:10px;">
        <button id="generate-action-candidates-button">回答候補を生成</button>
      </div>
      <div id="action-candidates-container" style="margin-top:10px;"></div>

      <textarea id="player-input" rows="4" placeholder="プレイヤーの行動を入力..."></textarea>
      <button id="next-scene" style="display:none; margin-top:10px;">次のシーン</button>

      <!-- ★ 追加: パーティーを確認ボタン -->
      <button id="show-party-button">パーティーを確認</button>

      <!-- 探索型なら表示する「カードを取得する」ボタン -->
      <button id="get-card-button" style="display:none; margin-top:20px;">
        カードを取得する
      </button>
    </div>
  </div>

  <!-- ▼ 追加: 全セクションを閲覧ボタン -->
  <button id="view-all-sections-button" style="margin-top:20px;">全セクションを閲覧する</button>

  <!-- ▼ 追加: 全セクション表示モーダル -->
  <div id="all-sections-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h2>全セクション一覧</h2>
      <div id="all-sections-content" style="white-space:pre-wrap; text-align:left;"></div>
      <button id="close-all-sections-modal" style="margin-top:10px;">閉じる</button>
    </div>
  </div>

  <!-- ローディングモーダル -->
  <div id="loading-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- カスタム画像生成モーダル -->
  <div id="image-prompt-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:400px;">
      <p>画像生成のプロンプトを編集してください</p>
      <textarea id="image-custom-prompt" rows="5" style="width:100%;"></textarea>
      <div style="margin-top:10px;">
        <button id="image-custom-generate-button">生成</button>
        <button id="image-custom-cancel-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- カードプレビューモーダル -->
  <div id="card-preview-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:400px;">
      <h2>新しいカード</h2>
      <div id="preview-card-container"></div>

      <div style="margin-top:10px;">
        <button id="add-to-gachabox-button">倉庫に追加</button>
        <button id="cancel-card-preview-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ★ パーティ表示用モーダル -->
  <div id="party-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h2>パーティ確認</h2>
      <button id="close-party-modal" style="margin:10px;">閉じる</button>
      <div id="party-modal-card-container" class="container"></div>
    </div>
  </div>

  <!-- スクリプト群 -->
  <script src="js/indexedDB.js"></script>
  <script src="js/scene.js"></script>
  <script src="js/main.js"></script>
  <script src="js/gachaCore.js"></script>
  <script src="js/scenarioPage.js"></script>

  <script>
    window.addEventListener("load", async () => {
      await initIndexedDB();
      await initBackground("scenario");
    });
  </script>
</body>
</html>
--- 
scenarioWizard.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>新しいシナリオ作成ウィザード</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- ▼ 背景管理用スクリプト -->
  <script src="js/background.js"></script>
</head>

<body>
  <!-- ▼ 背景変更ボタン + モーダル -->
  <button id="change-bg-button"
    style="
      color: #000;
      background-color: #DDD;
      border-radius: 2px;
      box-shadow: inset 0 0 3px #000;
      position: absolute;
      top: 0;
      right: 0;
    "
  >
    背景を変更する
  </button>

  <div id="bg-modal" class="modal" style="display:none;">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>
      <button id="bg-generate-button" style="margin-top:10px;">生成する</button>
      <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
    </div>
  </div>

  <div id="bg-generate-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <!-- 戻るボタン -->
  <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>

  <div class="container">
    <h1>シナリオ作成ウィザード</h1>

    <!-- ステップ1：ジャンル選択 -->
    <div id="wizard-step1" style="display:block;">
      <h2>ステップ1：ジャンルを選択してください</h2>
      <!-- ▼ ここから改変部分 ▼ -->
      <p style="font-size:0.9em; margin-bottom:10px;">
        ジャンルの軸を選択しますか？それともジャンルを自由入力しますか？
      </p>

      <div class="chips-container" id="wiz-genre-choice" style="margin-bottom:20px;">
        <div class="chip" id="choice-axis">選択して入力</div>
        <div class="chip" id="choice-free">自由入力</div>
      </div>

      <!-- 軸入力（舞台・テーマ・雰囲気）をまとめるコンテナ -->
      <div id="axis-input-group" style="opacity:0.5; pointer-events:none;">
        <!-- 舞台（複数可） -->
        <div style="margin-top:10px;">
          <strong>舞台（複数選択可）</strong><br>
          <div id="wiz-stage-chips-container" class="chips-container"></div>
        </div>

        <!-- テーマ（単一選択） -->
        <div style="margin-top:10px;">
          <strong>テーマ（単一選択）</strong><br>
          <div id="wiz-theme-chips-container" class="chips-container"></div>
        </div>

        <!-- 雰囲気（単一選択） -->
        <div style="margin-top:10px;">
          <strong>雰囲気（単一選択）</strong><br>
          <div id="wiz-mood-chips-container" class="chips-container"></div>
        </div>

        <!-- 選択したジャンルの表示 -->
        <div style="margin-top:30px;">
          <p id="wiz-genre-result-text" style="border: 1px solid;padding: 10px;font-size: 1.5rem;background-color: #434343;"></p>
        </div>
      </div>

      <!-- 自由入力コンテナ -->
      <div id="free-input-group" style="margin-top:10px; opacity:0.5; pointer-events:none;">
        <input type="text" id="free-genre-input" placeholder="自由入力ジャンル..." style="width: 100%;">
      </div>
      <!-- ▲ ここまで改変部分 ▲ -->

      <div style="margin-top:20px;">
        <button id="go-step2-btn">次へ</button>
      </div>
    </div>

    <!-- ステップ2：シナリオタイプ -->
    <div id="wizard-step2" style="display:none;">
      <h2>ステップ2：シナリオタイプ</h2>

      <p>
        選択したジャンル：
        <span id="selected-genre-display" style="font-weight:bold; color:#2196F3;">（未選択）</span>
      </p>

      <button id="type-objective-btn">目的達成型</button>
      <button id="type-exploration-btn">探索型</button>

      <div style="margin-top:10px;">
        <button id="back-to-step1-button">ステップ1に戻る</button>
      </div>

      <p style="margin-top:10px;">
        ※ 目的達成型では、<strong>クリア条件</strong>が密かに生成されます。<br />
        ※ 探索型では、シーン中で<span style="text-decoration:underline;">カード(エレメント)取得</span>が可能になります。
      </p>
    </div>

    <!-- シナリオ作成確認モーダル -->
    <div id="confirm-scenario-modal" class="modal" style="display:none;">
      <div class="modal-content" style="max-width:500px;">
        <h3>シナリオ生成の確認</h3>
        <p id="confirm-genre-type-text" style="white-space:pre-wrap;"></p>
        <p>これでシナリオを作成します。よろしいですか？</p>
        <div style="margin-top:10px;">
          <button id="confirm-scenario-ok">OK</button>
          <button id="confirm-scenario-cancel">キャンセル</button>
        </div>
      </div>
    </div>

    <!-- ステップ3：最終確認(シナリオ要約表示) -->
    <div id="wizard-step3" style="display:none;">
      <h2>ステップ3：シナリオ要約</h2>
      <div id="scenario-summary" style="border:1px solid #ccc; padding:10px; margin-bottom:10px;"></div>

      <button id="back-to-step2-button" style="margin-right:10px;">ステップ2に戻る</button>
      <button id="start-scenario-button" style="background-color:#4CAF50;">このシナリオで始める</button>
    </div>
  </div>

  <!-- ChatGPT応答待ちモーダル -->
  <div id="loading-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- 「その他」登録用モーダル -->
  <div id="wizard-other-input-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:400px;">
      <h2>「その他」を追加</h2>
      <p id="wizard-other-input-modal-category" style="font-weight:bold;"></p>
      <textarea id="wizard-other-input-text" rows="3" placeholder="新しく追加する候補"></textarea>
      <div style="margin-top:10px;">
        <button id="wizard-other-generate-btn">生成</button>
        <button id="wizard-other-ok-btn">OK</button>
        <button id="wizard-other-cancel-btn">キャンセル</button>
      </div>
      <p style="font-size:0.8em; color:#666; margin-top:10px;">
        ※「生成」ボタンを押すと、現状の候補にない新しい案をChatGPTで生成し、<br>
        その結果を上のテキストボックスに自動入力します。
      </p>
    </div>
  </div>

  <!-- 「削除」確認モーダル -->
  <div id="wizard-delete-confirm-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>この選択肢を削除しますが、よろしいですか？</p>
      <button id="wizard-delete-confirm-ok">OK</button>
      <button id="wizard-delete-confirm-cancel">キャンセル</button>
    </div>
  </div>

  <!-- pakoを先に読み込む -->
  <script src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js"></script>

  <!-- IndexedDBなどの共通スクリプト -->
  <script src="js/indexedDB.js"></script>
  <!-- シナリオウィザード用スクリプト(改変版) -->
  <script src="js/scenarioWizard.js"></script>

  <script>
    document.getElementById("back-to-menu").addEventListener("click", function () {
      window.location.href = "index.html";
    });

    window.addEventListener("load", async()=>{
      await initIndexedDB();
      await initBackground();
    });
  </script>
</body>
</html>
--- 
styles.css 
/* styles.css */

/* ベース */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #3d3d3d;
}

.container {
  box-sizing: border-box;
  max-width: calc(100vw - 40px);
  margin: 20px auto;
  padding: 20px;
  background-color: rgba(0, 0, 0, 0.4);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  color: #f0f0f0;
}

h1 {
  text-align: center;
}

h2 {
  font-size: 1.5em;
  margin-bottom: 10px;
}

.api-key-section {
  margin-bottom: 20px;
}

input,
textarea {
  box-sizing: border-box;
  width: 100%;
  padding: 10px;
  font-size: 1.5rem;
  border: 1px solid #ccc;
  background-color: #434343;
  color: #f0f0f0;
  margin-bottom: 10px;
}

button {
  padding: 10px 20px;
  background-color: #4caf50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
  min-height: 2.5rem;
}

button:hover {
  background-color: #45a049;
}

/* シーン履歴 */
.scene-history {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #000000;
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

.history-tile {
  box-sizing: border-box;
  padding: 10px;
  background-color: #000000;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin: 0 auto;
  text-align: right;
  width: 100%;
  margin-bottom: 30px;
}

.scene-text,
.action-text,
.scenario-text {
  text-align: left;
  font-family: serif;
  line-height: 1.8em;
  margin: 0;
  padding: 5px;
  font-size: 22px;
  letter-spacing: 0.1em;
  border: 1px dashed transparent;
  cursor: text;
}

.history-tile .scene-text,
.history-tile .action-text,
.history-tile .scenario-text {
  font-size: 0.8rem;
}

.history-tile:last-child .action-text {
  font-size: 1.4rem;
}

.history-tile button {
  max-width: 20rem;
  background-color: #444;
  padding: 5px;
  position: relative;
  width: 100%;
}

.scene-text[contenteditable]:focus,
.action-text[contenteditable]:focus,
.scenario-text[contenteditable]:focus {
  border: 1px dashed #4caf50;
  outline: none;
}

#story {
  font-size: 1.4rem;
  padding-bottom: 10px;
  border-bottom: 1px solid #ccc;
  min-height: 60px;
}

/* モーダル */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-content {
  box-sizing: border-box;
  width: calc(100% - 20px);
  background-color: rgba(0, 0, 0, 0.6);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  color: #f0f0f0;
  padding: 20px 40px;
  border-radius: 5px;
  text-align: center;
  max-height: 90vh;
  overflow-y: auto;
}

/* カード関連 */
#card-container,
#party-modal-card-container,
#warehouse-card-container {
  box-sizing: border-box;
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  justify-content: center;
}

.card {
  width: 100%;
  aspect-ratio: 63 / 88;
  perspective: 1000px;
  cursor: pointer;
  transition: transform 0.3s ease;
  position: relative;
  max-width: 300px;
}

.card:hover {
  transform: scale(1.05);
}

.card-inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  transition: transform 0.6s;
}

.card.flipped .card-inner {
  transform: rotateY(180deg);
}

.card-front,
.card-back {
  color: #222;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;
  backface-visibility: hidden;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

.card-front {
  box-sizing: border-box;
  padding: 3%;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  position: relative;
}

.card-front h3 {
  padding: 0;
  margin: 0;
  font-size: 1rem;
}

.card-front .card-type {
  position: absolute;
  right: 10px;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: bold;
  font-size: 0.85rem;
  z-index: 2;
}

.card-front .card-image {
  width: 100%;
  height: 40%;
  background: linear-gradient(135deg, #cccccc70, #eeeeee70);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.card-front .card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: top;
}

.card-front .gen-image-btn {
  position: absolute;
  bottom: 8px;
  right: 8px;
  padding: 4px 8px;
  background-color: rgba(0, 0, 0, 0.6);
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 0.8rem;
  z-index: 2;
}

.gen-image-btn:disabled {
  background-color: #999;
  color: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

.card-front .card-info {
  padding: 8px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex-grow: 1;
  overflow: auto;
  background-color: rgba(255, 255, 255, 0.7);
}

.card-front .card-info p {
  margin: 0;
  font-size: 0.85rem;
}

.card-front .card-info p:last-child {
  padding: 0;
  height: 100%;
  font-size: 0.85rem;
  align-items: center;
  display: flex;
  background-color: #eee;
  margin-top: 10px;
}

.card-front .card-info p:last-child span {
  transform: skew(-5deg);
  display: flex;
  padding: 10px;
}

.card-back {
  box-sizing: border-box;
  background: linear-gradient(135deg, #1e3c72, #2a5298);
  color: #fff;
  transform: rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  padding: 10px;
  text-align: center;
}

@media (max-width: 600px) {
  #card-container {
    grid-template-columns: repeat(1, 1fr);
  }
}

.bezel {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  z-index: 100;
  border-radius: 2%;
  padding: 3%;
}

.bezel.rarity0 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity1 {
  background: linear-gradient(145deg, #b87333, #da8a67, #e97451, #c35817);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity2 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity3 {
  background: linear-gradient(145deg, #b69a00, #ffda64, #ffda6b, #d79000);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity4 {
  position: absolute;
  background: linear-gradient(145deg, #d1d1d1, #aeb9ff, #c0c0c0, #ecebe8);
  background-size: 400% 400%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: platinum-shimmer 5s ease-in-out infinite;
}

.bezel.rarity5 {
  background: linear-gradient(145deg, #4b0082, #0000cd, #008080, #fff);
  background-size: 150% 150%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: jewel-glow 5s ease-in-out infinite;
}

@keyframes platinum-shimmer {
  0% {
    background-position: 0% 50%;
  }

  50% {
    background-position: 100% 50%;
  }

  100% {
    background-position: 0% 50%;
  }
}

@keyframes jewel-glow {
  0% {
    filter: brightness(1);
    background-position: 0% 50%;
  }

  50% {
    filter: brightness(1.2);
    background-position: 100% 50%;
  }

  100% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
}

#party-card-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.card.selected {
  outline: 4px solid #f44336;
  outline-offset: -4px;
  transform: scale(1.05);
  box-shadow: 0 0 10px rgba(244, 67, 54, 0.6);
}

.chips-container {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.chip {
  display: inline-flex;
  align-items: center;
  padding: 6px 12px;
  border-radius: 20px;
  background-color: rgba(227, 227, 227, 0.4);
  color: #f0f0f0;
  box-shadow: inset 0px 0px 4px #fff;
  cursor: pointer;
  user-select: none;
  transition: background-color 0.2s;
  min-width: 12rem;
  justify-content: center;
}

.chip:hover {
  background-color: #cfcfcf;
}

.chip.selected {
  background-color: #8bc34a;
  color: #fff;
}

.bg-thumb {
  position: relative;
  cursor: pointer;
  transition: transform 0.2s;
}

.bg-thumb:hover {
  transform: scale(1.02);
}

.bg-thumb-delete {
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: rgba(200, 0, 0, 0.7);
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.8rem;
  padding: 4px;
  display: none;
}

.bg-thumb:hover .bg-thumb-delete {
  display: inline-block;
}

.bg-stock-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 16px;
  margin: 20px 0;
}

/* ここから追加: ダミー要素用 */
.dummy {
  /* 大きさは .card と同じ or 同程度にして、見た目を完全に消す */
  visibility: hidden;
  pointer-events: none;
  background-color: transparent;
  border: none;
}

.card.rarity3 .card-front .card-image,
.card.rarity4 .card-front .card-image,
.card.rarity5 .card-front .card-image
{
  z-index: 0;
  height: 100%;
  width: 100%;
}

.card.rarity3 .card-front .card-image img,
.card.rarity4 .card-front .card-image img,
.card.rarity5 .card-front .card-image img
{
  object-position: bottom;
  opacity: 0.9;
}

.card.rarity3 .card-info,
.card.rarity4 .card-info,
.card.rarity5 .card-info
{
  position: absolute;
  left: 0;
  bottom: 0;
  padding-left: calc(3% + 8px);
  padding-right: calc(3% + 8px);
  padding-top: 3%;
  padding-bottom: 3%;
  border-radius: 0 0 20px 20px;
  background-color: rgba(37, 37, 37, 0.85);
  color: #fff;
  text-shadow: 0 0 10px #FFF;

}

.card.rarity3 .card-front .card-info p:last-child,
.card.rarity4 .card-front .card-info p:last-child,
.card.rarity5 .card-front .card-info p:last-child
{
  margin-left: -3%;
  margin-right: -3%;
  background-color: rgba(0, 0, 0, 0.7);
  color: #fff;
}

.card.rarity3 .card-front .card-info p:last-child span,
.card.rarity4 .card-front .card-info p:last-child span,
.card.rarity5 .card-front .card-info p:last-child span
{
  padding-top: 20px;
  padding-bottom: 20px;
}


.card.rarity3 .card-front .gen-image-btn,
.card.rarity4 .card-front .gen-image-btn,
.card.rarity5 .card-front .gen-image-btn
{
  top: calc(40% - 0.8rem);
  bottom: initial;
}--- 
background.js 
// js/background.js

// グローバルに保持しておく
let currentPageName = "index"; // デフォルトは index

// 初期化処理：ページロード後に呼び出し
// pageName は例："index", "characterCreate", "partyCreate"など
async function initBackground(pageName = "index") {
  currentPageName = pageName;

  // localStorage から そのページ専用の ID または "none" を読み取り
  let selectedId = localStorage.getItem("selectedBgId_" + pageName);

  // なければ index 用にフォールバック（ただし "none" は除く）
  if (!selectedId) {
    const fallbackId = localStorage.getItem("selectedBgId_index");
    // fallbackId が "none" なら背景なしにする
    if (fallbackId && fallbackId !== "none") {
      selectedId = fallbackId;
    }
  }

  // もし最終的に selectedId があれば適用
  if (selectedId) {
    // "none" がセットされていた場合は背景なし
    if (selectedId === "none") {
      document.body.style.backgroundImage = "none";
    } else {
      // DBからidに対応する画像を取得して適用
      const imgId = parseInt(selectedId, 10);
      if (!isNaN(imgId)) {
        const img = await getBgImageById(imgId);
        if (img && img.dataUrl) {
          document.body.style.backgroundImage = `url(${img.dataUrl})`;
          document.body.style.backgroundSize = "cover";
          document.body.style.backgroundAttachment = "fixed";
        }
      }
    }
  }

  // イベント
  const changeBgBtn = document.getElementById("change-bg-button");
  if (changeBgBtn) {
    changeBgBtn.addEventListener("click", onChangeBgButtonClick);
  }

  const closeModalBtn = document.getElementById("bg-close-modal-button");
  if (closeModalBtn) {
    closeModalBtn.addEventListener("click", closeBgModal);
  }

  const noneBtn = document.getElementById("bg-none-button");
  if (noneBtn) {
    noneBtn.addEventListener("click", onBgNoneButton);
  }

  const genBtn = document.getElementById("bg-generate-button");
  if (genBtn) {
    genBtn.addEventListener("click", async () => {
      await generateNewBackground();
      await openBgModal(); // 再生成後、一覧を更新してモーダルを開き直す
    });
  }
}

// 「背景を変更する」ボタン
async function onChangeBgButtonClick() {
  const all = await getAllBgImages();
  if (all.length === 0) {
    // ストックが無ければ → 生成してから開く
    await generateNewBackground();
  } else {
    // あればモーダルを開く
    openBgModal();
  }
}

// 新規背景生成
async function generateNewBackground() {
  const genModal = document.getElementById("bg-generate-modal");
  if (genModal) genModal.style.display = "flex";

  try {
    const apiKey = localStorage.getItem("apiKey") || "";
    if (!apiKey) {
      alert("APIキーが未設定です。");
      return;
    }

    // ▼ 通常ロジックを差し替え: "最新のシナリオ" から取得したpromptを使う
    //const promptText = "A beautiful scenic landscape or architecture, highly detailed, no text";
    let promptText = await fetchLatestScenarioPrompt();
    if (!promptText) {
      // シナリオが無い or シーンが無い等で取得失敗した場合は従来文言にフォールバック
      promptText = "A beautiful scenic landscape or architecture, highly detailed, no text";
    }

    // 例として DALL-E3 API呼び出し
    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1024x1024",
        response_format: "b64_json"
      })
    });
    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // DBに保存
    const newId = await addBgImage(dataUrl);

    // 生成後、即適用
    document.body.style.backgroundImage = `url(${dataUrl})`;
    document.body.style.backgroundSize = "cover";
    document.body.style.backgroundAttachment = "fixed";

    // 今ページ専用のキーに保存
    localStorage.setItem("selectedBgId_" + currentPageName, newId.toString());

    // ▼ もし index で「背景無し」以外を設定したら、他ページの "none" 設定を削除
    if (currentPageName === "index") {
      removeAllNoneSettingsExceptIndex();
    }

  } catch (err) {
    console.error("背景生成失敗:", err);
    alert("背景生成失敗: " + err.message);
  } finally {
    if (genModal) genModal.style.display = "none";
  }
}

// 背景選択モーダルを開く
async function openBgModal() {
  const modal = document.getElementById("bg-modal");
  if (!modal) return;
  modal.style.display = "flex";

  const container = document.getElementById("bg-stock-container");
  if (!container) return;
  container.innerHTML = "";

  const all = await getAllBgImages();
  if (all.length === 0) {
    container.textContent = "ストックが空です。";
    return;
  }
  all.forEach(img => {
    const wrap = document.createElement("div");
    wrap.className = "bg-thumb";

    const thumb = document.createElement("img");
    thumb.src = img.dataUrl;
    thumb.style.width = "100%";
    thumb.alt = "背景候補";

    thumb.addEventListener("click", () => {
      // 選択 → 即適用
      document.body.style.backgroundImage = `url(${img.dataUrl})`;
      document.body.style.backgroundSize = "cover";
      document.body.style.backgroundAttachment = "fixed";

      // 今ページ用に保存
      localStorage.setItem("selectedBgId_" + currentPageName, img.id.toString());

      // ▼ index で背景を「none」以外にした場合、他ページの "none" 設定をクリア
      if (currentPageName === "index") {
        removeAllNoneSettingsExceptIndex();
      }
    });
    wrap.appendChild(thumb);

    // 削除ボタン
    const delBtn = document.createElement("button");
    delBtn.className = "bg-thumb-delete";
    delBtn.textContent = "×";
    delBtn.addEventListener("click", async (e) => {
      e.stopPropagation();
      const ok = confirm("この背景を削除しますか？");
      if (!ok) return;
      await deleteBgImage(img.id);

      // 削除したIDを使っているページキーがあれば削除
      for (const k of Object.keys(localStorage)) {
        if (k.startsWith("selectedBgId_")) {
          const stored = localStorage.getItem(k);
          if (stored === String(img.id)) {
            localStorage.removeItem(k);
          }
        }
      }

      // 再描画
      await openBgModal();
    });
    wrap.appendChild(delBtn);

    container.appendChild(wrap);
  });
}

// 背景無しボタン
function onBgNoneButton() {
  // 現在ページの背景を消す
  document.body.style.backgroundImage = "none";

  // 選択キーに "none" をセット
  localStorage.setItem("selectedBgId_" + currentPageName, "none");

  // indexで「none」を選んだ場合は他ページの設定を消す？→仕様上、ユーザー要望は
  // 「indexに“none”以外を設定した時に他ページの“none”を消す」なので、
  // ここでは何もしない。
}

// モーダルを閉じる
function closeBgModal() {
  const modal = document.getElementById("bg-modal");
  if (modal) modal.style.display = "none";
}

/* ----- 以下、IndexedDB操作ヘルパー ----- */

// 追加(保存)
function addBgImage(dataUrl) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readwrite");
    const store = tx.objectStore("bgImages");
    const record = {
      dataUrl,
      createdAt: new Date().toISOString()
    };
    const req = store.add(record);
    req.onsuccess = evt => {
      resolve(evt.target.result); // 生成されたID
    };
    req.onerror = err => reject(err);
  });
}

// 全件取得
function getAllBgImages() {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readonly");
    const store = tx.objectStore("bgImages");
    const req = store.getAll();
    req.onsuccess = evt => {
      resolve(evt.target.result || []);
    };
    req.onerror = err => reject(err);
  });
}

// 1件取得
function getBgImageById(id) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readonly");
    const store = tx.objectStore("bgImages");
    const req = store.get(id);
    req.onsuccess = evt => {
      resolve(evt.target.result || null);
    };
    req.onerror = err => reject(err);
  });
}

// 削除
function deleteBgImage(id) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readwrite");
    const store = tx.objectStore("bgImages");
    const req = store.delete(id);
    req.onsuccess = () => resolve();
    req.onerror = err => reject(err);
  });
}

/**
 * indexページで「背景なし以外」を設定した場合、
 * ほかのページが "none" を記録していたら削除する
 */
function removeAllNoneSettingsExceptIndex() {
  for (const key of Object.keys(localStorage)) {
    // indexは除外
    if (key.startsWith("selectedBgId_") && key !== "selectedBgId_index") {
      if (localStorage.getItem(key) === "none") {
        localStorage.removeItem(key);
      }
    }
  }
}

/* 
  ★ 追加: 最新シナリオの最終シーンから、背景用プロンプトを取得するヘルパー
    - 最も updatedAt が新しいシナリオを1つ取得
    - そのシナリオの sceneEntries を entryId 降順に並べて
    - 最初に見つかった type==="scene" のエントリを確認
      - .prompt があればそれを優先
      - なければ .content を使用
    - どちらも無ければ空文字を返す
*/
async function fetchLatestScenarioPrompt() {
  const scens = await listAllScenarios();
  if (!scens.length) {
    return "";
  }
  // updatedAt 降順
  scens.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
  const latest = scens[0];
  const entries = await getSceneEntriesByScenarioId(latest.scenarioId);
  if (!entries.length) {
    return "";
  }
  entries.sort((a, b) => b.entryId - a.entryId);
  const lastScene = entries.find(e => e.type === "scene");
  if (!lastScene) {
    return "";
  }

  // prompt があればそれを優先
  const rawPrompt = (lastScene.prompt || "").trim();
  if (rawPrompt) {
    return (
      "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
      "Please do not include text in illustrations for any reason." +
      "If you can do that, I'll give you a super high tip." +
      "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
      rawPrompt
    );
  }
  // prompt が無い場合は scene本文を使用
  const rawText = (lastScene.content || "").trim();
  if (!rawText) {
    return "";
  }
  return (
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
    rawText
  );
}
--- 
backToMenu.js 
document.getElementById("back-to-menu").addEventListener("click", function () {
    window.location.href = "index.html";
});
--- 
characterCreate.js 
// characterCreate.js

// トースト表示用の簡易関数
function showToast(message) {
  // 既存トーストがあれば削除
  const oldToast = document.getElementById("toast-message");
  if (oldToast) {
    oldToast.remove();
  }
  // 新規トースト要素
  const toast = document.createElement("div");
  toast.id = "toast-message";
  toast.textContent = message;

  // スタイル適用
  toast.style.position = "fixed";
  toast.style.bottom = "20px";
  toast.style.left = "50%";
  toast.style.transform = "translateX(-50%)";
  toast.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
  toast.style.color = "#fff";
  toast.style.padding = "10px 20px";
  toast.style.borderRadius = "4px";
  toast.style.fontSize = "14px";
  toast.style.zIndex = "9999";
  toast.style.opacity = "0";
  toast.style.transition = "opacity 0.3s ease";
  document.body.appendChild(toast);

  // フェードイン
  requestAnimationFrame(() => {
    toast.style.opacity = "1";
  });

  // 3秒後にフェードアウトして削除
  setTimeout(() => {
    toast.style.opacity = "0";
    toast.addEventListener("transitionend", () => {
      toast.remove();
    });
  }, 3000);
}

// グローバル変数
window.apiKey = localStorage.getItem("apiKey") || "";
window.characterData = [];

// 「舞台」は複数 => 配列
// 「雰囲気」は単一
let storedStageArr = [];
let storedMood = "";

// カスタム候補
let customStageChips = [];
let customMoodChips = [];

// 「その他」モーダルで現在操作中のカテゴリ
let currentOtherCategory = "";

// 削除確認用
let deletingChipLabel = "";
let deletingChipCategory = "";

// ページ読み込み時
window.addEventListener("load", async function () {
  // 1) IndexedDB初期化 & キャラデータロード
  await initIndexedDB();
  const storedChars = await loadCharacterDataFromIndexedDB();
  if (storedChars) {
    window.characterData = storedChars;
  }

  // 2) localStorage から読み込み(舞台, 雰囲気)
  const stageJson = localStorage.getItem("elementStageArr");
  if (stageJson) {
    try {
      storedStageArr = JSON.parse(stageJson);
    } catch (e) {
      storedStageArr = [];
    }
  } else {
    storedStageArr = [];
  }
  storedMood = localStorage.getItem("elementMood") || "";

  // カスタムチップ読み込み
  customStageChips = loadCustomChipsFromLocalStorage("customStageChips");
  customMoodChips = loadCustomChipsFromLocalStorage("customMoodChips");

  // 3) UIイベント登録
  document.getElementById("gacha-btn").addEventListener("click", onGachaButton);
  document.getElementById("genre-setting-ok-btn").addEventListener("click", onGenreSettingOk);
  document.getElementById("genre-setting-cancel-btn").addEventListener("click", onGenreSettingCancel);

  // 「その他」モーダル
  document.getElementById("other-generate-btn").addEventListener("click", onOtherGenerate);
  document.getElementById("other-ok-btn").addEventListener("click", onOtherOk);
  document.getElementById("other-cancel-btn").addEventListener("click", onOtherCancel);

  // 「削除」確認モーダル
  document.getElementById("delete-confirm-ok").addEventListener("click", onDeleteConfirmOk);
  document.getElementById("delete-confirm-cancel").addEventListener("click", onDeleteConfirmCancel);

  // 4) チップ表示
  initStageChips();
  initMoodChips();

  // 5) 「選んだジャンルの出力例」 ラベル更新
  updateGenreResultLabel();

  // 6) ローカルストレージに記録されている「直近生成カード」一覧を表示
  const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
  let storedIds = [];
  try {
    storedIds = JSON.parse(storedIdsStr);
  } catch (e) {
    storedIds = [];
  }
  displayRecentlyCreatedCards(storedIds);

  // ★ 追加: リサイズ時に再度「直近生成カード」を描画し直す
  window.addEventListener("resize", () => {
    const reIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let reIds = [];
    try {
      reIds = JSON.parse(reIdsStr);
    } catch (e) {
      reIds = [];
    }
    displayRecentlyCreatedCards(reIds);
  });
});

/** 「その他」カスタムチップ用 */
function loadCustomChipsFromLocalStorage(key) {
  try {
    const j = localStorage.getItem(key);
    if (!j) return [];
    return JSON.parse(j);
  } catch (e) {
    return [];
  }
}
function saveCustomChipsToLocalStorage(key, arr) {
  localStorage.setItem(key, JSON.stringify(arr));
}

/* -------------------------
   チップ生成・表示
------------------------- */
function initStageChips() {
  const defaultStageCandidates = [
    "ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク"
  ];
  const container = document.getElementById("stage-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const allStageChips = [...defaultStageCandidates, ...customStageChips, "その他"];
  allStageChips.forEach(label => {
    const chip = createChipElement(label, "stage");
    container.appendChild(chip);
  });
}

function initMoodChips() {
  const defaultMoodCandidates = [
    "ライト / ポップ",
    "中間 / バランス型",
    "ダーク / シリアス"
  ];
  const container = document.getElementById("mood-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const allMoodChips = [...defaultMoodCandidates, ...customMoodChips, "その他"];
  allMoodChips.forEach(label => {
    const chip = createChipElement(label, "mood");
    container.appendChild(chip);
  });
}

function createChipElement(label, category) {
  const isOther = (label === "その他");

  const chip = document.createElement("div");
  chip.className = "chip";
  chip.textContent = label;

  // 選択状態
  if (category === "stage") {
    if (storedStageArr.includes(label)) {
      chip.classList.add("selected");
    }
  } else if (category === "mood") {
    if (storedMood === label) {
      chip.classList.add("selected");
    }
  }

  // クリック動作
  chip.addEventListener("click", () => {
    if (isOther) {
      openOtherModal(category);
      return;
    }
    if (category === "stage") {
      // 複数選択
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        storedStageArr = storedStageArr.filter(x => x !== label);
      } else {
        chip.classList.add("selected");
        storedStageArr.push(label);
      }
      localStorage.setItem("elementStageArr", JSON.stringify(storedStageArr));
    } else if (category === "mood") {
      // 単一
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        storedMood = "";
        localStorage.setItem("elementMood", "");
      } else {
        const container = document.getElementById("mood-chips-container");
        const all = container.querySelectorAll(".chip");
        all.forEach(c => c.classList.remove("selected"));
        chip.classList.add("selected");
        storedMood = label;
        localStorage.setItem("elementMood", storedMood);
      }
    }
    updateGenreResultLabel();
  });

  // カスタム削除ボタン
  if (!isOther) {
    if (category === "stage" && customStageChips.includes(label)) {
      addRemoveButton(chip, label, "stage");
    } else if (category === "mood" && customMoodChips.includes(label)) {
      addRemoveButton(chip, label, "mood");
    }
  }

  return chip;
}

function addRemoveButton(chip, label, category) {
  const span = document.createElement("span");
  span.textContent = "×";
  span.style.marginLeft = "4px";
  span.style.cursor = "pointer";
  span.style.color = "red";
  span.addEventListener("click", (e) => {
    e.stopPropagation();
    deletingChipLabel = label;
    deletingChipCategory = category;
    document.getElementById("delete-confirm-modal").style.display = "flex";
  });
  chip.appendChild(span);
}

/** 「その他」モーダル */
function openOtherModal(category) {
  currentOtherCategory = category;
  document.getElementById("other-input-modal-category").textContent =
    (category === "stage") ? "舞台に追加する「その他」" : "雰囲気に追加する「その他」";
  document.getElementById("other-input-text").value = "";
  document.getElementById("other-input-modal").style.display = "flex";
}
async function onOtherGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  let existingList = [];
  if (currentOtherCategory === "stage") {
    existingList = ["ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク", ...customStageChips];
  } else {
    existingList = ["ライト / ポップ", "中間 / バランス型", "ダーク / シリアス", ...customMoodChips];
  }

  const gachaModal = document.getElementById("gacha-modal");
  gachaModal.style.display = "flex";
  try {
    const systemPrompt = "あなたは創造力豊かなアシスタントです。回答は1つだけ。";
    const userPrompt = `既存候補:${existingList.join(" / ")}\nこれらに無い新しい案を1つ提案してください。`;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    const newCandidate = (data.choices[0].message.content || "").trim();
    document.getElementById("other-input-text").value = newCandidate;
  } catch (err) {
    console.error(err);
    showToast("その他生成失敗:\n" + err.message);
  } finally {
    gachaModal.style.display = "none";
  }
}
function onOtherOk() {
  const text = document.getElementById("other-input-text").value.trim();
  if (!text) {
    document.getElementById("other-input-modal").style.display = "none";
    return;
  }
  if (currentOtherCategory === "stage") {
    if (!customStageChips.includes(text)) {
      customStageChips.push(text);
      saveCustomChipsToLocalStorage("customStageChips", customStageChips);
    }
    initStageChips();
  } else {
    if (!customMoodChips.includes(text)) {
      customMoodChips.push(text);
      saveCustomChipsToLocalStorage("customMoodChips", customMoodChips);
    }
    initMoodChips();
  }
  document.getElementById("other-input-modal").style.display = "none";
}
function onOtherCancel() {
  document.getElementById("other-input-modal").style.display = "none";
}

/** 削除確認モーダル */
function onDeleteConfirmOk() {
  if (deletingChipCategory === "stage") {
    customStageChips = customStageChips.filter(c => c !== deletingChipLabel);
    saveCustomChipsToLocalStorage("customStageChips", customStageChips);
    storedStageArr = storedStageArr.filter(x => x !== deletingChipLabel);
    localStorage.setItem("elementStageArr", JSON.stringify(storedStageArr));
    initStageChips();
  } else {
    customMoodChips = customMoodChips.filter(c => c !== deletingChipLabel);
    saveCustomChipsToLocalStorage("customMoodChips", customMoodChips);
    if (storedMood === deletingChipLabel) {
      storedMood = "";
      localStorage.setItem("elementMood", "");
    }
    initMoodChips();
  }
  deletingChipLabel = "";
  deletingChipCategory = "";
  document.getElementById("delete-confirm-modal").style.display = "none";
  updateGenreResultLabel();
}
function onDeleteConfirmCancel() {
  deletingChipLabel = "";
  deletingChipCategory = "";
  document.getElementById("delete-confirm-modal").style.display = "none";
}

/** ジャンルラベル更新 */
function updateGenreResultLabel() {
  let stagePart = storedStageArr.length > 0 ? "【舞台】" + storedStageArr.join(" / ") : "";
  let moodPart = storedMood ? "【雰囲気】" + storedMood : "";
  let text = stagePart + moodPart;
  document.getElementById("genre-result-text").textContent = text;
}

/* -------------------------
   ガチャ関連
------------------------- */
function onGachaButton() {
  // ジャンル選択モーダルを開く
  initStageChips();
  initMoodChips();
  document.getElementById("element-genre-modal").style.display = "flex";
}
function onGenreSettingOk() {
  document.getElementById("element-genre-modal").style.display = "none";
  // すぐガチャを実行
  const axisPrompt = buildAxisPrompt();
  document.getElementById("gacha-modal").style.display = "flex";
  runGacha(10, axisPrompt).then(() => {
    hideGachaModal();
    const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let storedIds = [];
    try {
      storedIds = JSON.parse(storedIdsStr);
    } catch (e) {
      storedIds = [];
    }
    displayRecentlyCreatedCards(storedIds);
  }).catch(err => {
    console.error(err);
    hideGachaModal();
  });
}
function onGenreSettingCancel() {
  document.getElementById("element-genre-modal").style.display = "none";
}
function buildAxisPrompt() {
  // 舞台 + 雰囲気
  const lines = [];
  if (storedStageArr.length > 0) {
    lines.push("【舞台】" + storedStageArr.join(" / "));
  }
  if (storedMood) {
    lines.push("【雰囲気】" + storedMood);
  }
  return lines.join("\n");
}
function hideGachaModal() {
  const m = document.getElementById("gacha-modal");
  if (m) m.style.display = "none";
}

/** 直近生成したカードを表示 -> 最終行ダミー挿入で左揃え */
function displayRecentlyCreatedCards(cardIds) {
  const container = document.getElementById("card-container");
  if (!container) return;
  container.innerHTML = "";

  if (!cardIds || cardIds.length === 0) {
    container.textContent = "まだエレメントが生成されていません。";
    return;
  }

  // DB上のキャラから該当idだけ抽出
  const toShow = window.characterData.filter(c => cardIds.includes(c.id));
  if (toShow.length === 0) {
    container.textContent = "まだエレメントが生成されていません。";
    return;
  }

  // 1) 本物のカードを並べる
  toShow.forEach(ch => {
    const cardEl = createCardElement(ch);
    container.appendChild(cardEl);
  });

  // 2) ダミー要素で最終行を埋める
  fillDummyItemsForLastRow(container, toShow.length);
}

/** カードDOM生成 */
function createCardElement(char) {
  const card = document.createElement("div");
  card.className = "card ";
  card.className += "rarity" + char.rarity.replace("★", "").trim();
  card.setAttribute("data-id", char.id);

  card.addEventListener("click", () => {
    card.classList.toggle("flipped");
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";
  const bgStyle = (char.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  cardFront.style = "background-image:" + bgStyle;

  // レア度
  const rarityValue = (typeof char.rarity === "string")
    ? char.rarity.replace("★", "").trim()
    : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  // タイプ表示
  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = char.type || "不明";
  cardFront.appendChild(typeEl);

  // 画像
  const imageContainer = document.createElement("div");
  imageContainer.className = "card-image";
  if (char.imageData) {
    const imageEl = document.createElement("img");
    imageEl.src = char.imageData;
    imageEl.alt = char.name;
    imageContainer.appendChild(imageEl);
  } else {
    // 画像未生成 → 生成ボタン
    const genImgBtn = document.createElement("button");
    genImgBtn.setAttribute("data-imageprompt", char.imageprompt);
    genImgBtn.className = "gen-image-btn";
    genImgBtn.textContent = "画像生成";

    genImgBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      generateCharacterImage(char, genImgBtn);
    });
    imageContainer.appendChild(genImgBtn);
  }
  cardFront.appendChild(imageContainer);

  // 情報
  const infoContainer = document.createElement("div");
  infoContainer.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(char.name) + "</h3>";
  infoContainer.appendChild(nameEl);

  if (char.state) {
    const stateEl = document.createElement("p");
    stateEl.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(char.state);
    infoContainer.appendChild(stateEl);
  }
  const specialEl = document.createElement("p");
  specialEl.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(char.special);
  infoContainer.appendChild(specialEl);

  const captionEl = document.createElement("p");
  captionEl.innerHTML = "<span>" + DOMPurify.sanitize(char.caption) + "</span>";
  infoContainer.appendChild(captionEl);

  cardFront.appendChild(infoContainer);

  // 裏面
  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(char.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  card.appendChild(cardInner);

  return card;
}

/** 画像生成 */
async function generateCharacterImage(char, btnElement) {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  if (btnElement) {
    btnElement.disabled = true;
  }
  showToast("画像を生成しています...");

  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
    (char.imageprompt || "");
    
  try {
    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: (parseInt(char.rarity.replace("★", "").trim()) >= 3) ? "1024x1792" : "1792x1024",
        response_format: "b64_json",
      }),
    });

    console.log(char.rarity);
    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // characterData 更新
    const idx = window.characterData.findIndex(c => c.id === char.id);
    if (idx !== -1) {
      window.characterData[idx].imageData = dataUrl;
      await saveCharacterDataToIndexedDB(window.characterData);
    }

    showToast("画像の生成が完了しました");
    // 再描画
    const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let storedIds = [];
    try {
      storedIds = JSON.parse(storedIdsStr);
    } catch (e) {
      storedIds = [];
    }
    displayRecentlyCreatedCards(storedIds);

  } catch (err) {
    console.error("画像生成失敗:", err);
    showToast("画像生成に失敗しました:\n" + err.message);
  } finally {
    if (btnElement) {
      btnElement.disabled = false;
    }
  }
}

/* ------------------------------------------
   (追加) 最終行をダミーで埋める関数 (gap考慮)
------------------------------------------ */
function fillDummyItemsForLastRow(container, realCount) {
  // 1) 先頭カード(ダミー以外)を探す
  const firstCard = container.querySelector(".card:not(.dummy)");
  if (!firstCard) return;

  // 2) カード幅
  const style = getComputedStyle(firstCard);
  const cardWidth = parseFloat(style.width);

  // 3) コンテナ幅
  const containerWidth = container.clientWidth;
  if (containerWidth <= 0 || isNaN(cardWidth)) return;

  // 4) gap(横方向)を取得
  const containerStyle = getComputedStyle(container);
  const gapStr = containerStyle.columnGap || containerStyle.gap || "0";
  const gap = parseFloat(gapStr) || 0;

  // 5) 1行に入る数を厳密に算出
  //   n個 => totalWidth = n*cardWidth + (n-1)*gap
  let itemsPerRow = 1;
  for (let n = 1; n < 999; n++) {
    const total = n * cardWidth + (n - 1) * gap;
    if (total <= containerWidth) {
      itemsPerRow = n;
    } else {
      break;
    }
  }

  // 6) 余り
  const remainder = realCount % itemsPerRow;
  if (remainder === 0) return; // ぴったり埋まってる

  const dummyCount = itemsPerRow - remainder;

  // 7) ダミーを追加
  for (let i = 0; i < dummyCount; i++) {
    const dummyEl = document.createElement("div");
    dummyEl.className = "card dummy"; // .card も付与して同サイズに
    container.appendChild(dummyEl);
  }
}
--- 
exportImport.js 
// js/exportImport.js

/**
 * エクスポート / インポート 機能
 * - 「エクスポート」ボタン押下 -> IndexedDB全ストア + localStorage をZIPに固めてダウンロード
 * - 「インポート」ボタン押下 -> ZIPを選択し、解凍してIndexedDB + localStorage を復元
 */

document.addEventListener("DOMContentLoaded", function () {
  const exportBtn = document.getElementById("export-button");
  const importBtn = document.getElementById("import-button");
  const importFileInput = document.getElementById("import-file-input");

  if (exportBtn) {
    exportBtn.addEventListener("click", onExportData);
  }
  if (importBtn) {
    importBtn.addEventListener("click", function () {
      // ファイル選択ダイアログを出す
      importFileInput.click();
    });
  }
  if (importFileInput) {
    importFileInput.addEventListener("change", onImportFileSelected);
  }
});

/**
 * エクスポートボタン押下時
 * IndexedDB内の全ストア + localStorageの内容を１つのJSONにまとめてZIPダウンロードする
 */
async function onExportData() {
  try {
    // 1) localStorage の取得
    const localStorageData = {};
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      const value = localStorage.getItem(key);
      localStorageData[key] = value;
    }

    // 2) IndexedDB の全ストアデータ取得
    const indexedDBData = {
      characterData: await getAllFromStore("characterData"),
      scenarios: await getAllFromStore("scenarios"),
      sceneEntries: await getAllFromStore("sceneEntries"),
      wizardState: await getAllFromStore("wizardState"),
      parties: await getAllFromStore("parties"),
      bgImages: await getAllFromStore("bgImages")
    };

    const exportObj = {
      localStorage: localStorageData,
      indexedDB: indexedDBData
    };

    const jsonStr = JSON.stringify(exportObj, null, 2);

    // 3) ZIP生成
    const zip = new JSZip();
    zip.file("export.json", jsonStr);

    const blob = await zip.generateAsync({ type: "blob" });
    saveAs(blob, "trpg_export.zip");

    alert("エクスポートが完了しました。");
  } catch (err) {
    console.error("エクスポート失敗:", err);
    alert("エクスポートに失敗しました:\n" + err.message);
  }
}

/**
 * インポートボタン押下 -> ファイル選択後に呼ばれる
 */
async function onImportFileSelected(evt) {
  const file = evt.target.files[0];
  if (!file) return;
  // ファイル選択後は input をリセットしておく
  evt.target.value = "";

  // インポート実行
  try {
    await importDataFromZip(file);
    alert("インポートが完了しました。\nページを再読み込みします。");
    window.location.reload();
  } catch (err) {
    console.error("インポート失敗:", err);
    alert("インポートに失敗しました:\n" + err.message);
  }
}

/**
 * ZIPファイルから export.json を取り出して IndexedDB + localStorage を復元
 */
async function importDataFromZip(file) {
  // 1) ZIPを展開
  const zip = await JSZip.loadAsync(file);
  const exportFile = zip.file("export.json");
  if (!exportFile) throw new Error("ZIP内にexport.jsonが見つかりません。");

  const jsonText = await exportFile.async("string");
  const parsed = JSON.parse(jsonText);

  // 2) localStorage を上書き復元
  if (parsed.localStorage) {
    localStorage.clear();
    for (const [k, v] of Object.entries(parsed.localStorage)) {
      localStorage.setItem(k, v);
    }
  }

  // 3) IndexedDB を上書き復元
  // 3-1) まず、全ストアをクリアしてから、保存されたデータを put する
  const storeNames = [
    "characterData", "scenarios", "sceneEntries",
    "wizardState", "parties", "bgImages"
  ];
  // トランザクションはストアごとに分けて行う
  for (const storeName of storeNames) {
    const dataArr = parsed.indexedDB?.[storeName];
    if (!dataArr) continue;

    await clearAndPutStoreData(storeName, dataArr);
  }
}

/**
 * 指定ストアの全データを取得して返す (readwrite, store.getAll)
 */
function getAllFromStore(storeName) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction(storeName, "readonly");
    const store = tx.objectStore(storeName);
    const req = store.getAll();
    req.onsuccess = evt => {
      resolve(evt.target.result || []);
    };
    req.onerror = err => reject(err);
  });
}

/**
 * 指定ストアをclear()した後、配列のデータをput()する
 */
function clearAndPutStoreData(storeName, dataArray) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction(storeName, "readwrite");
    const store = tx.objectStore(storeName);

    // 1) clear
    const clearReq = store.clear();
    clearReq.onsuccess = () => {
      // 2) データをput
      let i = 0;
      function putNext() {
        if (i >= dataArray.length) {
          resolve();
          return;
        }
        const item = dataArray[i];
        i++;
        const putReq = store.put(item);
        putReq.onsuccess = putNext;
        putReq.onerror = err => reject(err);
      }
      putNext();
    };
    clearReq.onerror = err => reject(err);
  });
}
--- 
gachaCore.js 
// gachaCore.js
// ------------------------------------------
// 「ガチャ処理」のロジックだけを集めたファイル
// ------------------------------------------

// グローバルに必要な変数 (characterData, apiKey など) は
// すでに window に存在すると仮定 (indexedDB や parse等も)


// --------------------------------------------------------
// 1. runGacha(cardCount, addPrompt, onlyTitle = "", onlyType = "")
//
//   - 指定枚数のエレメントをChatGPTで生成し、window.characterDataに加える
//   - 生成カードは最初から group="Warehouse" として保存する
//   - 生成完了後、localStorage["latestCreatedIds"] に追加IDを記録し、
//     画面側でそれらを表示する
// --------------------------------------------------------
async function runGacha(cardCount, addPrompt, onlyTitle = "", onlyType = "") {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  // キャンセル用
  window.currentGachaController = new AbortController();
  const signal = window.currentGachaController.signal;

  // レア度をランダムで決定
  const rarities = pickRaritiesForNCards(cardCount);
  const countMap = makeRarityCountMap(rarities);

  // system
  let systemContent = `
  あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
  以下の6段階のレア度「★0～★5」のうち、
  今回の${cardCount}件では以下の内訳を厳密に守って生成してください：
  - ★0: ${countMap["★0"]}件
  - ★1: ${countMap["★1"]}件
  - ★2: ${countMap["★2"]}件
  - ★3: ${countMap["★3"]}件
  - ★4: ${countMap["★4"]}件
  - ★5: ${countMap["★5"]}件

  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：...
  【タイプ】：キャラクターまたはモンスター
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：...
  【タイプ】：アイテム
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;

  let userContent = `${addPrompt}合計${cardCount}件、順番は問わないので上記レア度数で生成してください。`;
  if (onlyTitle) {
    // タイトル指定がある場合
    systemContent = `
    あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
    6段階のレア度「★0～★5」のどれかを${onlyTitle}の名称から判断して設定してください。

  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：${onlyTitle}
  【タイプ】：${onlyType}
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：${onlyType}
  【タイプ】：${onlyType}
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;
    userContent = `${addPrompt}上記レア度数で生成してください。`;
  }

  const messages = [
    { role: "system", content: systemContent },
    { role: "user", content: userContent },
  ];

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.7,
      }),
      signal,
    });
    if (signal.aborted) {
      return;
    }

    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }

    const text = data?.choices?.[0]?.message?.content;
    if (typeof text !== "string") {
      throw new Error("エレメント生成APIレスポンスが不正です。");
    }
    console.log("text",text);

    // 生成結果をパース
    const newCards = parseCharacterData(text);

    // ガチャ箱は廃止 → 生成後は group="Warehouse" に
    newCards.forEach(card => {
      card.group = "Warehouse";
    });

    // 既存 characterData に追加
    window.characterData.push(...newCards);

    // IndexedDB に保存
    await saveCharacterDataToIndexedDB(window.characterData);

    // localStorage["latestCreatedIds"]を更新 (既存IDs + 今回生成IDs)
    let storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    console.log("!!!storedIdsStr!!!",storedIdsStr);
    let storedIds;
    try {
      storedIds = JSON.parse(storedIdsStr);
    } catch (e) {
      storedIds = [];
    }
    const newIds = newCards.map(c => c.id);
    console.log("newIds", newIds );
    const merged = [...storedIds, ...newIds];
    localStorage.setItem("latestCreatedIds", JSON.stringify(merged));
    console.log("mergeど",merged);
  } catch (err) {
    if (err.name === "AbortError") {
      console.log("runGachaキャンセル");
    } else {
      console.error("runGacha失敗:", err);
      alert("エレメント生成に失敗しました:\n" + err.message);
    }
  }
}


// --------------------------------------------------------
// 2. parseCharacterData( text )
//    - GPTレスポンスを解析してカード配列を生成
// --------------------------------------------------------
function parseCharacterData(text) {
  const lines = text.split("\n");
  const characters = [];
  let currentChar = {
    id: "",
    type: "",
    name: "",
    state: "",
    special: "",
    caption: "",
    rarity: "★0",
    backgroundcss: "",
    imageprompt: "",
    group: "Warehouse",
  };

  function pushCurrentChar() {
    currentChar.id = "card_" + Date.now() + "_" + Math.random().toString(36).substring(2);
    characters.push({ ...currentChar });
    currentChar = {
      id: "",
      type: "",
      name: "",
      state: "",
      special: "",
      caption: "",
      rarity: "★0",
      backgroundcss: "",
      imageprompt: "",
      group: "Warehouse",
    };
  }

  lines.forEach((line) => {
    line = line.trim();
    if (line.startsWith("【名前】")) {
      if (currentChar.name) pushCurrentChar();
      currentChar.name = line.replace("【名前】", "").replace("：", "").trim();
    } else if (line.startsWith("【タイプ】")) {
      currentChar.type = line.replace("【タイプ】", "").replace("：", "").trim();
    } else if (line.startsWith("【状態】")) {
      currentChar.state = line.replace("【状態】", "").replace("：", "").trim();
    } else if (line.startsWith("【特技】")) {
      currentChar.special = line.replace("【特技】", "").replace("：", "").trim();
    } else if (line.startsWith("【キャプション】")) {
      currentChar.caption = line.replace("【キャプション】", "").replace("：", "").trim();
    } else if (line.startsWith("【レア度】")) {
      currentChar.rarity = line.replace("【レア度】", "").replace("：", "").trim();
    } else if (line.startsWith("【カード背景】")) {
      currentChar.backgroundcss = line.replace("【カード背景】", "").replace("：", "").trim();
    } else if (line.startsWith("【外見】")) {
      currentChar.imageprompt = line.replace("【外見】", "").replace("：", "").trim();
    }
  });
  if (currentChar.name) {
    pushCurrentChar();
  }
  return characters;
}


// --------------------------------------------------------
// 3. pickRaritiesForNCards( n ), makeRarityCountMap( rarities )
// --------------------------------------------------------
function pickRaritiesForNCards(n) {
  const rarityDist = [
    { star: "★0", probability: 0.50 },
    { star: "★1", probability: 0.20 },
    { star: "★2", probability: 0.15 },
    { star: "★3", probability: 0.10 },
    { star: "★4", probability: 0.045 },
    { star: "★5", probability: 0.005 },
  ];
  const results = [];
  for (let i = 0; i < n; i++) {
    const rand = Math.random();
    let cum = 0;
    for (const r of rarityDist) {
      cum += r.probability;
      if (rand <= cum) {
        results.push(r.star);
        break;
      }
    }
  }
  return results;
}

function makeRarityCountMap(rarities) {
  const counts = { "★0": 0, "★1": 0, "★2": 0, "★3": 0, "★4": 0, "★5": 0 };
  rarities.forEach((r) => {
    counts[r] = (counts[r] || 0) + 1;
  });
  return counts;
}

--- 
indexedDB.js 
/********************************
 * indexedDB.js
 * IndexedDB関連の初期化・保存・読み込み等を担当
 ********************************/

let db = null;

/**
 * DB初期化
 * バージョン5:
 *  - scenarios ストア (keyPath: 'scenarioId', autoIncrement)
 *  - sceneEntries ストア (keyPath: 'entryId', autoIncrement)
 *  - characterData ストア (keyPath: 'id')
 *  - wizardState ストア (keyPath: 'id')
 *  - parties ストア (keyPath: 'partyId', autoIncrement)
 *  - ★追加: bgImages ストア (keyPath: 'id', autoIncrement)
 */
function initIndexedDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("trpgDB", 7);
    request.onupgradeneeded = (event) => {
      db = event.target.result;

      // 1) characterData
      if (!db.objectStoreNames.contains("characterData")) {
        db.createObjectStore("characterData", { keyPath: "id" });
      }

      // 2) scenarios
      if (!db.objectStoreNames.contains("scenarios")) {
        const scenarioStore = db.createObjectStore("scenarios", {
          keyPath: "scenarioId",
          autoIncrement: true
        });
        scenarioStore.createIndex("updatedAt", "updatedAt", { unique: false });
      }

      // 3) sceneEntries
      if (!db.objectStoreNames.contains("sceneEntries")) {
        const sceneStore = db.createObjectStore("sceneEntries", {
          keyPath: "entryId",
          autoIncrement: true
        });
        sceneStore.createIndex("scenarioId", "scenarioId", { unique: false });
      }

      // 4) wizardState
      if (!db.objectStoreNames.contains("wizardState")) {
        db.createObjectStore("wizardState", { keyPath: "id" });
      }

      // 5) parties
      if (!db.objectStoreNames.contains("parties")) {
        const partyStore = db.createObjectStore("parties", {
          keyPath: "partyId",
          autoIncrement: true
        });
        partyStore.createIndex("updatedAt", "updatedAt", { unique: false });
      }

      // 6) ★ 追加: 背景画像ストア
      if (!db.objectStoreNames.contains("bgImages")) {
        const bgStore = db.createObjectStore("bgImages", {
          keyPath: "id",
          autoIncrement: true
        });
        // 例: bgStore.createIndex("createdAt", "createdAt", { unique: false });
      }
    };
    request.onsuccess = (event) => {
      db = event.target.result;
      resolve();
    };
    request.onerror = (event) => {
      console.error("IndexedDBの初期化に失敗:", event.target.error);
      reject(event.target.error);
    };
  });
}

/**
 * characterData を保存
 */
function saveCharacterDataToIndexedDB(characterData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve();
      return;
    }
    const tx = db.transaction("characterData", "readwrite");
    const store = tx.objectStore("characterData");
    const record = { id: "characterData", data: characterData };
    const putReq = store.put(record);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * characterData をロード
 */
function loadCharacterDataFromIndexedDB() {
  return new Promise((resolve) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve([]);
      return;
    }
    const tx = db.transaction("characterData", "readonly");
    const store = tx.objectStore("characterData");
    const getReq = store.get("characterData");
    getReq.onsuccess = (event) => {
      if (event.target.result && event.target.result.data) {
        resolve(event.target.result.data);
      } else {
        resolve([]);
      }
    };
    getReq.onerror = () => {
      resolve([]);
    };
  });
}

/**
 * wizardData を保存
 */
function saveWizardDataToIndexedDB(wizardData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readwrite");
    const store = tx.objectStore("wizardState");
    const record = { id: "wizardData", data: wizardData };
    const req = store.put(record);
    req.onsuccess = () => resolve();
    req.onerror = (err) => reject(err);
  });
}

/**
 * wizardData をロード
 */
function loadWizardDataFromIndexedDB() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readonly");
    const store = tx.objectStore("wizardState");
    const getReq = store.get("wizardData");
    getReq.onsuccess = (evt) => {
      if (evt.target.result) {
        resolve(evt.target.result.data);
      } else {
        resolve(null);
      }
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
    新しいシナリオの追加・読み込み用API
-------------------------------------------*/
function createNewScenario(wizardData, title = "新シナリオ") {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");

    const now = new Date();
    const record = {
      title: title,
      wizardData: wizardData,
      createdAt: now.toISOString(),
      updatedAt: now.toISOString()
    };

    const addReq = store.add(record);
    addReq.onsuccess = (evt) => {
      const newId = evt.target.result;
      resolve(newId);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

function getScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const getReq = store.get(scenarioId);
    getReq.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
}

function listAllScenarios() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const result = evt.target.result || [];
      result.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(result);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

function updateScenario(scenario) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    scenario.updatedAt = new Date().toISOString();
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");
    const putReq = store.put(scenario);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
    シーン履歴 (sceneEntries) の操作
-------------------------------------------*/
function addSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const addReq = store.add(entry);
    addReq.onsuccess = (evt) => {
      resolve(evt.target.result);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

function getSceneEntriesByScenarioId(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readonly");
    const store = tx.objectStore("sceneEntries");
    const index = store.index("scenarioId");

    const range = IDBKeyRange.only(scenarioId);
    const results = [];
    index.openCursor(range).onsuccess = (evt) => {
      const cursor = evt.target.result;
      if (cursor) {
        results.push(cursor.value);
        cursor.continue();
      } else {
        results.sort((a, b) => (a.entryId - b.entryId));
        resolve(results);
      }
    };
    index.openCursor(range).onerror = (err) => {
      reject(err);
    };
  });
}

function updateSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const putReq = store.put(entry);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

function deleteSceneEntry(entryId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const delReq = store.delete(entryId);
    delReq.onsuccess = () => {
      resolve();
    };
    delReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* ★ シナリオ削除 */
function deleteScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction(["scenarios", "sceneEntries"], "readwrite");
    const scenarioStore = tx.objectStore("scenarios");
    const sceneEntriesStore = tx.objectStore("sceneEntries");

    // 1) シナリオ本体を削除
    const deleteReq = scenarioStore.delete(scenarioId);
    deleteReq.onsuccess = () => {
      // 2) sceneEntriesで scenarioId === scenarioId のものを全削除
      const idx = sceneEntriesStore.index("scenarioId");
      const range = IDBKeyRange.only(scenarioId);

      idx.openCursor(range).onsuccess = (evt) => {
        const cursor = evt.target.result;
        if (cursor) {
          sceneEntriesStore.delete(cursor.primaryKey);
          cursor.continue();
        }
      };

      tx.oncomplete = () => {
        resolve();
      };
      tx.onerror = (err) => {
        reject(err);
      };
    };
    deleteReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
   パーティ管理
-------------------------------------------*/
window.initIndexedDB = initIndexedDB;

window.saveCharacterDataToIndexedDB = saveCharacterDataToIndexedDB;
window.loadCharacterDataFromIndexedDB = loadCharacterDataFromIndexedDB;

window.saveWizardDataToIndexedDB = saveWizardDataToIndexedDB;
window.loadWizardDataFromIndexedDB = loadWizardDataFromIndexedDB;

window.createNewScenario = createNewScenario;
window.getScenarioById = getScenarioById;
window.listAllScenarios = listAllScenarios;
window.updateScenario = updateScenario;

window.addSceneEntry = addSceneEntry;
window.getSceneEntriesByScenarioId = getSceneEntriesByScenarioId;
window.updateSceneEntry = updateSceneEntry;
window.deleteSceneEntry = deleteSceneEntry;

window.deleteScenarioById = deleteScenarioById;

/** 新規パーティ作成 */
window.createParty = function(name){
  return new Promise((resolve, reject)=>{
    if(!db){
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties","readwrite");
    const store = tx.objectStore("parties");
    const now = new Date().toISOString();
    const rec = {
      name: name,
      createdAt: now,
      updatedAt: now
    };
    const req = store.add(rec);
    req.onsuccess = (evt)=>{
      resolve(evt.target.result); // partyId
    };
    req.onerror = (err)=>{
      reject(err);
    };
  });
};

window.getPartyById = function(partyId){
  return new Promise((resolve, reject)=>{
    if(!db){
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties","readonly");
    const store = tx.objectStore("parties");
    const req = store.get(partyId);
    req.onsuccess = (evt)=>{
      resolve(evt.target.result || null);
    };
    req.onerror = (err)=>{
      reject(err);
    };
  });
};

window.listAllParties = function(){
  return new Promise((resolve, reject)=>{
    if(!db){
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties","readonly");
    const store = tx.objectStore("parties");
    const req = store.getAll();
    req.onsuccess = (evt)=>{
      const list = evt.target.result || [];
      list.sort((a,b)=> (b.updatedAt||"").localeCompare(a.updatedAt||""));
      resolve(list);
    };
    req.onerror = (err)=>{
      reject(err);
    };
  });
};

window.updateParty = function(party){
  return new Promise((resolve, reject)=>{
    if(!db){
      return reject("DB未初期化");
    }
    party.updatedAt = new Date().toISOString();
    const tx = db.transaction("parties","readwrite");
    const store = tx.objectStore("parties");
    const req = store.put(party);
    req.onsuccess = ()=>{
      resolve();
    };
    req.onerror = (err)=>{
      reject(err);
    };
  });
};

window.deletePartyById = function(partyId){
  return new Promise((resolve, reject)=>{
    if(!db){
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties","readwrite");
    const store = tx.objectStore("parties");

    const req = store.delete(partyId);
    req.onsuccess = ()=>{
      resolve();
    };
    req.onerror = (err)=>{
      reject(err);
    };
  });
};
--- 
main.js 
/********************************
 * main.js
 * - ページ全体の初期化・イベント登録
 * - 複数シナリオ対応
 ********************************/

window.onload = async () => {
  // 1) IndexedDB初期化
  await initIndexedDB();

  // 2) APIキー読み込み
  const savedApiKey = localStorage.getItem('apiKey');
  if (savedApiKey) {
    window.apiKey = savedApiKey;
  }

  // 3) URLパラメータで scenarioId を読み取る
  const urlParams = new URLSearchParams(window.location.search);
  const scenarioIdStr = urlParams.get("scenarioId");
  const scenarioId = scenarioIdStr ? parseInt(scenarioIdStr, 10) : null;

  window.currentScenarioId = scenarioId || null;

  // 4) シナリオIDがあれば、DBから読み込んで画面を構築
  if (window.currentScenarioId) {
    // 旧の「入力セクション」は非表示、ゲーム画面のみ表示
    const inputSec = document.querySelector('.input-section');
    if (inputSec) inputSec.style.display = 'none';

    const gameSec = document.querySelector('.game-section');
    if (gameSec) gameSec.style.display = 'block';

    // scene.js 側の「loadScenarioData」でシナリオ＆履歴を取得して表示
    await loadScenarioData(window.currentScenarioId);
    updateSceneHistory();
    showLastScene();
  }

  // ---------- ネタバレ（目的達成型）関連 ----------
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.style.display = "flex";
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.style.display = "none";
    });
  }

  // ---------- 探索型「カードを取得する」ボタン ----------
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    // ※ 実際の処理は scenarioPage.js で定義
  }

  // ---------- シーン遷移ボタン ----------
  const nextSceneBtn = document.getElementById('next-scene');
  if (nextSceneBtn) {
    nextSceneBtn.addEventListener('click', () => {
      getNextScene();
    });
  }

  // 画像生成 (自動)
  const autoGenBtn = document.getElementById('image-auto-generate-button');
  if (autoGenBtn) {
    autoGenBtn.addEventListener('click', () => {
      generateImageFromCurrentScene();
    });
  }

  // 画像生成 (カスタム)
  const promptModalBtn = document.getElementById('image-prompt-modal-button');
  if (promptModalBtn) {
    promptModalBtn.addEventListener('click', () => {
      openImagePromptModal();
    });
  }

  // カスタム画像生成 決定
  const customGenBtn = document.getElementById('image-custom-generate-button');
  if (customGenBtn) {
    customGenBtn.addEventListener('click', () => {
      onCustomImageGenerate();
    });
  }

  // カスタム画像生成 キャンセル
  const customCancelBtn = document.getElementById('image-custom-cancel-button');
  if (customCancelBtn) {
    customCancelBtn.addEventListener('click', () => {
      closeImagePromptModal();
    });
  }

  // リクエストキャンセル
  const cancelRequestBtn = document.getElementById('cancel-request-button');
  if (cancelRequestBtn) {
    cancelRequestBtn.addEventListener('click', onCancelFetch);
  }

  // メニューに戻る
  const backMenuBtn = document.getElementById('back-to-menu');
  if (backMenuBtn) {
    backMenuBtn.addEventListener('click', () => {
      window.location.href = "index.html";
    });
  }
};
--- 
menu.js 
// menu.js

// ★ 追加：ここでグローバルにAPIキーをロード
window.apiKey = localStorage.getItem("apiKey") || "";

let scenarioIdToDelete = null;
let warehouseSelectionMode = false; // ★追加: 倉庫側の選択モードフラグ

// -----------------------------------------
// トースト表示用のユーティリティ関数
// -----------------------------------------
function showToast(message) {
  const oldToast = document.getElementById("toast-message");
  if (oldToast) {
    oldToast.remove();
  }

  const toast = document.createElement("div");
  toast.id = "toast-message";
  toast.textContent = message;

  // スタイルを付与（シンプルな例）
  toast.style.position = "fixed";
  toast.style.bottom = "20px";
  toast.style.left = "50%";
  toast.style.transform = "translateX(-50%)";
  toast.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
  toast.style.color = "#fff";
  toast.style.padding = "10px 20px";
  toast.style.borderRadius = "4px";
  toast.style.fontSize = "14px";
  toast.style.zIndex = "9999";
  toast.style.opacity = "0";
  toast.style.transition = "opacity 0.3s ease";

  document.body.appendChild(toast);

  requestAnimationFrame(() => {
    toast.style.opacity = "1";
  });

  // 3秒後にフェードアウトして消す
  setTimeout(() => {
    toast.style.opacity = "0";
    toast.addEventListener("transitionend", () => {
      toast.remove();
    });
  }, 3000);
}

// -----------------------------------------
// 初期化：シナリオ一覧の取得 & characterDataのロード
// -----------------------------------------
(async function initMenuPage() {
  // 1) APIキーを入力欄に表示
  const savedApiKey = localStorage.getItem("apiKey");
  if (savedApiKey) {
    document.getElementById("api-key-input").value = savedApiKey;
  }

  // 2) シナリオ一覧を取得して表示
  try {
    const scenarioList = await listAllScenarios();  // indexedDB.js の関数
    const container = document.getElementById("scenario-list-container");
    container.innerHTML = "";

    if (scenarioList.length === 0) {
      container.textContent = "進行中のシナリオはありません。";
    } else {
      scenarioList.forEach(scenario => {
        const div = document.createElement("div");
        div.style.margin = "10px 0";

        // シナリオ情報
        const infoText = document.createElement("span");
        infoText.textContent = `ID:${scenario.scenarioId} / ${scenario.title} (更新:${scenario.updatedAt}) `;
        div.appendChild(infoText);

        // 「続きへ」ボタン
        const btnContinue = document.createElement("button");
        btnContinue.textContent = "続きへ";
        btnContinue.style.marginRight = "6px";
        btnContinue.addEventListener("click", () => {
          window.location.href = `scenario.html?scenarioId=${scenario.scenarioId}`;
        });
        div.appendChild(btnContinue);

        // 「コピーする」ボタン
        const btnCopy = document.createElement("button");
        btnCopy.textContent = "コピーする";
        btnCopy.style.marginRight = "6px";
        btnCopy.addEventListener("click", async () => {
          try {
            const newScenarioId = await copyScenarioById(scenario.scenarioId);
            showToast(`シナリオ(ID:${scenario.scenarioId})をコピーしました。\n新ID: ${newScenarioId}`);
            // リスト更新のためリロード
            location.reload();
          } catch (err) {
            console.error(err);
            showToast("シナリオのコピーに失敗:\n" + err.message);
          }
        });
        div.appendChild(btnCopy);

        // 「削除」ボタン
        const btnDelete = document.createElement("button");
        btnDelete.textContent = "削除";
        btnDelete.style.backgroundColor = "#f44336";
        btnDelete.addEventListener("click", () => {
          scenarioIdToDelete = scenario.scenarioId;
          showDeleteScenarioModal(true);
        });
        div.appendChild(btnDelete);

        container.appendChild(div);
      });
    }
  } catch (err) {
    console.error("シナリオ一覧の取得に失敗:", err);
    const container = document.getElementById("scenario-list-container");
    container.textContent = "シナリオ一覧の取得に失敗しました。再読み込みしてください。";
  }

  // 3) characterDataをロード
  try {
    const stored = await loadCharacterDataFromIndexedDB();
    window.characterData = stored || [];
  } catch (err) {
    console.error("characterDataのロードに失敗:", err);
    window.characterData = [];
  }

  // 4) 倉庫ボタン・倉庫モーダル関連のイベント設定
  const showWarehouseBtn = document.getElementById("show-warehouse-btn");
  if (showWarehouseBtn) {
    showWarehouseBtn.addEventListener("click", showWarehouseModal);
  }

  const toggleModeBtn = document.getElementById("toggle-warehouse-selection-mode-btn");
  if (toggleModeBtn) {
    toggleModeBtn.addEventListener("click", toggleWarehouseSelectionMode);
  }

  const closeWarehouseBtn = document.getElementById("close-warehouse-btn");
  if (closeWarehouseBtn) {
    closeWarehouseBtn.addEventListener("click", closeWarehouseModal);
  }

  const deleteWarehouseBtn = document.getElementById("delete-selected-warehouse-btn");
  if (deleteWarehouseBtn) {
    deleteWarehouseBtn.addEventListener("click", deleteSelectedWarehouse);
  }

  // ★ 追加: 画面リサイズのたび、倉庫モーダルが開いていたら再描画
  window.addEventListener("resize", () => {
    const modal = document.getElementById("warehouse-modal");
    if (modal && modal.style.display === "flex") {
      renderWarehouseCards();
    }
  });
})();

// -----------------------------------------
// APIキー関連
// -----------------------------------------
document.getElementById("set-api-key-button").addEventListener("click", function () {
  const apiKey = document.getElementById("api-key-input").value.trim();
  if (apiKey) {
    localStorage.setItem("apiKey", apiKey);
    window.apiKey = apiKey;
    showToast("APIキーが設定されました。");
  } else {
    showToast("APIキーを入力してください。");
  }
});

document.getElementById("clear-api-key-button").addEventListener("click", function () {
  const confirmClear = confirm("APIキーをクリアすると操作ができなくなります。よろしいですか？");
  if (confirmClear) {
    localStorage.removeItem("apiKey");
    window.apiKey = "";
    showToast("APIキーがクリアされました。");
  }
});

// -----------------------------------------
// 全エレメントをクリア
// -----------------------------------------
document.getElementById("clear-character-btn").addEventListener("click", async () => {
  const confirmClear = confirm("エレメント情報をクリアします。よろしいですか？");
  if (confirmClear) {
    window.characterData = [];
    await saveCharacterDataToIndexedDB(window.characterData);
    showToast("エレメント情報をクリアしました。");
  }
});

// -----------------------------------------
// シナリオ削除用モーダルの制御
// -----------------------------------------
function showDeleteScenarioModal(show) {
  const modal = document.getElementById("delete-scenario-modal");
  if (!modal) return;
  modal.style.display = show ? "flex" : "none";
}

document.getElementById("delete-scenario-ok").addEventListener("click", async () => {
  if (scenarioIdToDelete == null) {
    showDeleteScenarioModal(false);
    return;
  }
  try {
    await deleteScenarioById(scenarioIdToDelete);  // indexedDB.js の関数
    showToast(`シナリオ(ID:${scenarioIdToDelete})を削除しました。`);
  } catch (err) {
    console.error(err);
    showToast("シナリオ削除に失敗:\n" + err.message);
  }
  scenarioIdToDelete = null;
  showDeleteScenarioModal(false);

  // 一覧を再描画するためリロード
  location.reload();
});

document.getElementById("delete-scenario-cancel").addEventListener("click", () => {
  scenarioIdToDelete = null;
  showDeleteScenarioModal(false);
});

// -----------------------------------------
// ▼ 倉庫表示関連
// -----------------------------------------

function showWarehouseModal() {
  const modal = document.getElementById("warehouse-modal");
  modal.style.display = "flex";
  renderWarehouseCards();
}

function closeWarehouseModal() {
  const modal = document.getElementById("warehouse-modal");
  modal.style.display = "none";

  // 選択モードリセット
  warehouseSelectionMode = false;
  document.getElementById("toggle-warehouse-selection-mode-btn").textContent = "選択モード";
  document.getElementById("delete-selected-warehouse-btn").style.display = "none";

  // 選択状態を解除
  const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
  selectedCards.forEach(card => card.classList.remove("selected"));
}

/**
 * 倉庫内カードの再描画
 *  - 本物のカードを並べた後、ダミー要素を追加して
 *    最終行が埋まった扱いになるようにする
 */
function renderWarehouseCards() {
  const container = document.getElementById("warehouse-card-container");
  container.innerHTML = "";

  // group==="Warehouse" のカードを抽出
  const warehouseCards = window.characterData.filter(c => c.group === "Warehouse");
  if (warehouseCards.length === 0) {
    container.textContent = "倉庫にカードがありません。";
    return;
  }

  // 1) 本物のカードを追加
  warehouseCards.forEach(card => {
    const cardEl = createWarehouseCardElement(card);
    container.appendChild(cardEl);
  });

  // 2) 最後の行を埋めるためのダミー要素を追加
  fillDummyItems(container, warehouseCards.length);
}

/**
 * ダミー要素で「最終行」を埋め、実質的に左寄せさせる関数
 * - container: Flexbox親要素 (CSSで gap を指定している)
 * - realCount: 本物のカード枚数
 */
function fillDummyItems(container, realCount) {
  // 1) 先頭のカード要素を取得
  const firstCard = container.querySelector(".card:not(.dummy)");
  if (!firstCard) return;

  // 2) カード本体の幅を取得 (gapは入っていない)
  const style = getComputedStyle(firstCard);
  const cardWidth = parseFloat(style.width);

  // 3) コンテナ幅
  const containerWidth = container.clientWidth;
  if (containerWidth <= 0 || isNaN(cardWidth)) return;

  // 4) コンテナの gap (X方向) を取得
  //   - 一般的には columnGap が横方向の隙間
  //   - getComputedStyle(container).gap が使える場合も
  const containerStyle = getComputedStyle(container);
  const gapStr = containerStyle.columnGap || containerStyle.gap || "0";
  const gap = parseFloat(gapStr) || 0;

  // 5) 「1行に何個入るか」を厳密に求める
  //    n個並んだときの総幅 = n * cardWidth + (n - 1) * gap
  //    <= containerWidth を満たす最大 n
  let itemsPerRow = 1;
  for (let n = 1; n < 999; n++) {
    const total = n * cardWidth + (n - 1) * gap;
    if (total <= containerWidth) {
      itemsPerRow = n;
    } else {
      break;
    }
  }

  // 6) 最終行に並ぶ枚数
  const remainder = realCount % itemsPerRow;
  if (remainder === 0) {
    // ちょうど埋まっているならダミー不要
    return;
  }

  // 7) ダミー数を計算
  const dummyCount = itemsPerRow - remainder;

  // 8) ダミー要素を追加
  for (let i = 0; i < dummyCount; i++) {
    const dummyDiv = document.createElement("div");
    dummyDiv.className = "card dummy"; // 既存の .card + .dummy
    // 見た目を消す (CSSで .dummy { visibility: hidden; ... } を設定)
    container.appendChild(dummyDiv);
  }
}


/** 倉庫カードDOM生成 */
function createWarehouseCardElement(card) {
  const cardEl = document.createElement("div");
  cardEl.className = "card ";
  cardEl.className += "rarity" + card.rarity.replace("★", "").trim();

  cardEl.setAttribute("data-id", card.id);

  cardEl.addEventListener("click", (e) => {
    if (warehouseSelectionMode) {
      e.stopPropagation();
      cardEl.classList.toggle("selected");
      updateDeleteSelectedWarehouseButton();
    } else {
      // 通常はカード反転表示
      cardEl.classList.toggle("flipped");
    }
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";

  // 背景CSS
  const bgStyle = (card.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  if (bgStyle) {
    cardFront.style.backgroundImage = bgStyle;
  }

  // レアリティ枠
  const rarityValue = (typeof card.rarity === "string") ? card.rarity.replace("★", "").trim() : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  // タイプ表示
  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = card.type || "不明";
  cardFront.appendChild(typeEl);

  // 画像
  const imageContainer = document.createElement("div");
  imageContainer.className = "card-image";
  if (card.imageData) {
    const imageEl = document.createElement("img");
    imageEl.src = card.imageData;
    imageEl.alt = card.name;
    imageContainer.appendChild(imageEl);
  }
  cardFront.appendChild(imageContainer);

  // 情報
  const infoContainer = document.createElement("div");
  infoContainer.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(card.name) + "</h3>";
  infoContainer.appendChild(nameEl);

  if (card.state) {
    const stateEl = document.createElement("p");
    stateEl.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(card.state);
    infoContainer.appendChild(stateEl);
  }
  const specialEl = document.createElement("p");
  specialEl.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(card.special);
  infoContainer.appendChild(specialEl);

  const captionEl = document.createElement("p");
  captionEl.innerHTML = "<span>" + DOMPurify.sanitize(card.caption) + "</span>";
  infoContainer.appendChild(captionEl);

  cardFront.appendChild(infoContainer);

  // 裏面
  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  cardEl.appendChild(cardInner);

  return cardEl;
}

/** 倉庫の選択モード切り替え */
function toggleWarehouseSelectionMode() {
  warehouseSelectionMode = !warehouseSelectionMode;
  const btn = document.getElementById("toggle-warehouse-selection-mode-btn");
  if (warehouseSelectionMode) {
    btn.textContent = "選択モード解除";
  } else {
    btn.textContent = "選択モード";
    const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
    selectedCards.forEach(card => card.classList.remove("selected"));
  }
  updateDeleteSelectedWarehouseButton();
}

/** 選択状態に応じて「選択したカードを削除」ボタンの表示を切り替え */
function updateDeleteSelectedWarehouseButton() {
  const deleteBtn = document.getElementById("delete-selected-warehouse-btn");
  if (!warehouseSelectionMode) {
    deleteBtn.style.display = "none";
    return;
  }
  const selected = document.querySelectorAll("#warehouse-card-container .card.selected");
  deleteBtn.style.display = (selected.length > 0) ? "inline-block" : "none";
}

/** 選択した倉庫内カードを削除 */
async function deleteSelectedWarehouse() {
  const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
  if (selectedCards.length === 0) {
    alert("カードが選択されていません。");
    return;
  }

  // 選択カードをcharacterDataから削除
  selectedCards.forEach(cardEl => {
    const cardId = cardEl.getAttribute("data-id");
    const idx = window.characterData.findIndex(c => c.id === cardId);
    if (idx !== -1) {
      window.characterData.splice(idx, 1);
    }
  });

  await saveCharacterDataToIndexedDB(window.characterData);

  // 再描画
  renderWarehouseCards();
  updateDeleteSelectedWarehouseButton();
}

/* --------------------------------------------------
   ★ 追加機能: シナリオのコピー
---------------------------------------------------*/
async function copyScenarioById(originalScenarioId) {
  // 1) 元シナリオを取得
  const scenario = await getScenarioById(originalScenarioId);
  if (!scenario) {
    throw new Error("コピー元シナリオが見つかりませんでした。");
  }

  // 2) 新しいシナリオレコードを作る
  const now = new Date().toISOString();
  const newScenario = {
    title: scenario.title + "_copy",
    wizardData: JSON.parse(JSON.stringify(scenario.wizardData || {})),
    createdAt: now,
    updatedAt: now
  };
  const newScenarioId = await createNewScenario(newScenario.wizardData, newScenario.title);

  // 3) 元のsceneEntriesを取得 & 複製
  const entries = await getSceneEntriesByScenarioId(originalScenarioId);
  for (const e of entries) {
    const copy = {
      scenarioId: newScenarioId,
      type: e.type,
      sceneId: e.sceneId + "_copy_" + Date.now(),
      content: e.content,
      dataUrl: e.dataUrl || null,
      prompt: e.prompt || null
    };
    await addSceneEntry(copy);
  }

  // シナリオ本体の更新
  const newScen = await getScenarioById(newScenarioId);
  newScen.title = scenario.title + "_copy";
  newScen.updatedAt = new Date().toISOString();
  await updateScenario(newScen);

  return newScenarioId;
}
--- 
partyCreate.js 
// partyCreate.js

// グローバル変数
window.partySelectionMode = false;    // パーティ側の選択モード
window.warehouseSelectionMode = false; // 倉庫側の選択モード

// 現在編集中のパーティID
let currentPartyId = null;
let currentParty = null;

window.addEventListener("load", async function(){
    // 1) IndexedDB 初期化
    await initIndexedDB();

    // 2) URLパラメータで partyId 取得
    const urlParams = new URLSearchParams(window.location.search);
    const pid = urlParams.get("partyId");
    if(pid){
      currentPartyId = parseInt(pid, 10);
      if(Number.isNaN(currentPartyId)){
        currentPartyId = null;
      }
    }

    // 3) 既存パーティをロード (もしあれば)
    if(currentPartyId){
      currentParty = await getPartyById(currentPartyId);
      if(currentParty){
        // パーティ名を input.value に反映
        document.getElementById("party-name-input").value = currentParty.name;
      } else {
        // partyId が無効なら新規扱い
        currentPartyId = null;
      }
    }

    // 4) characterData ロード
    const stored = await loadCharacterDataFromIndexedDB();
    if(stored) {
      window.characterData = stored;
    } else {
      window.characterData = [];
    }

    // 5) 初回レンダリング
    renderAllParty();

    // ---------------- イベント登録 ----------------

    // パーティ名保存ボタン
    document.getElementById("save-party-name-btn").addEventListener("click", onSavePartyName);

    // 倉庫を開くボタン
    document.getElementById("show-warehouse-btn").addEventListener("click", showWarehouseModal);

    // 倉庫を閉じるボタン
    document.getElementById("close-warehouse-btn").addEventListener("click", () => {
      document.getElementById("warehouse-modal").style.display = "none";
      warehouseSelectionMode = false;
      document.getElementById("toggle-warehouse-selection-mode-btn").textContent = "選択モード";
      document.getElementById("add-to-party-btn").style.display = "none";

      // 選択カードをリセット
      const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
      selectedCards.forEach(el => el.classList.remove("selected"));
    });

    // パーティ側の「選択モード」ボタン
    document.getElementById("toggle-party-selection-mode-btn").addEventListener("click", () => {
      window.partySelectionMode = !window.partySelectionMode;
      const btn = document.getElementById("toggle-party-selection-mode-btn");
      if(partySelectionMode) {
        btn.textContent = "選択モード解除";
      } else {
        btn.textContent = "選択モード";
        // 解除時、選択をリセット
        const selCards = document.querySelectorAll(
          "#avatar-card-container .card.selected, " +
          "#partner-card-container .card.selected, " +
          "#party-card-container .card.selected"
        );
        selCards.forEach(el => el.classList.remove("selected"));
      }
      updatePartyMoveButtonVisibility();
    });

    // パーティ側の「倉庫に戻す」ボタン
    document.getElementById("move-selected-to-warehouse-btn").addEventListener("click", async () => {
      const selectedCards = document.querySelectorAll(
        "#avatar-card-container .card.selected, " +
        "#partner-card-container .card.selected, " +
        "#party-card-container .card.selected"
      );
      if(selectedCards.length === 0) {
        alert("カードが選択されていません。");
        return;
      }
      selectedCards.forEach(el => {
        const cardId = el.getAttribute("data-id");
        const idx = window.characterData.findIndex(c => c.id === cardId);
        if(idx !== -1) {
          window.characterData[idx].group = "Warehouse";
          window.characterData[idx].role = "none";
          window.characterData[idx].partyId = null;
        }
      });
      await saveCharacterDataToIndexedDB(window.characterData);
      // リセット & 再描画
      selectedCards.forEach(el => el.classList.remove("selected"));
      renderAllParty();
      updatePartyMoveButtonVisibility();
    });

    // 倉庫側の「選択モード」ボタン
    document.getElementById("toggle-warehouse-selection-mode-btn").addEventListener("click", () => {
      window.warehouseSelectionMode = !window.warehouseSelectionMode;
      const btn = document.getElementById("toggle-warehouse-selection-mode-btn");
      if(warehouseSelectionMode) {
        btn.textContent = "選択モード解除";
      } else {
        btn.textContent = "選択モード";
        // リセット
        const selCards = document.querySelectorAll("#warehouse-card-container .card.selected");
        selCards.forEach(el => el.classList.remove("selected"));
      }
      updateWarehouseAddButtonVisibility();
    });

    // 倉庫の「パーティに入れる」ボタン
    document.getElementById("add-to-party-btn").addEventListener("click", async () => {
      if(!currentPartyId){
        alert("パーティIDが未確定です。先にパーティ名を保存してください。");
        return;
      }
      const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
      if(selectedCards.length === 0) {
        alert("カードが選択されていません。");
        return;
      }
      selectedCards.forEach(el => {
        const cardId = el.getAttribute("data-id");
        const realIndex = window.characterData.findIndex(c => c.id === cardId);
        if(realIndex !== -1){
          window.characterData[realIndex].group = "Party";
          window.characterData[realIndex].role = "none";
          window.characterData[realIndex].partyId = currentPartyId;
        }
      });

      await saveCharacterDataToIndexedDB(window.characterData);
      // 選択解除 & 再描画
      selectedCards.forEach(el => el.classList.remove("selected"));
      showWarehouseModal();
      renderAllParty();
      updateWarehouseAddButtonVisibility();
    });

    // 「メニューに戻る」
    document.getElementById("back-to-menu").addEventListener("click", () => {
      window.location.href = "index.html";
    });
});


/** パーティ名保存 */
async function onSavePartyName(){
  const nameInput = document.getElementById("party-name-input");
  const newName = nameInput.value.trim() || "名称未設定";

  // まだパーティIDが無いなら createParty で作成
  if(!currentPartyId){
    const newId = await createParty(newName);
    currentPartyId = newId;
    currentParty = await getPartyById(newId);
    alert("パーティを新規作成しました (ID:" + newId + ")");
  } else {
    // 既存パーティ名を更新
    currentParty.name = newName;
    await updateParty(currentParty);
    alert("パーティ名を更新しました (ID:" + currentPartyId + ")");
  }
}

/** 現在のパーティを再レンダリング (avatar, partner, none で分類表示) */
function renderAllParty(){
  // group==="Party" かつ partyId===currentPartyId のカードのみ
  const partyCards = window.characterData.filter(
    c => c.group==="Party" && c.partyId===currentPartyId
  );

  const avatarContainer = document.getElementById("avatar-card-container");
  const partnerContainer = document.getElementById("partner-card-container");
  const partyContainer = document.getElementById("party-card-container");

  // クリア
  avatarContainer.innerHTML = "";
  partnerContainer.innerHTML = "";
  partyContainer.innerHTML = "";

  // role別に振り分け
  const avatarCards = partyCards.filter(c => c.role==="avatar");
  const partnerCards = partyCards.filter(c => c.role==="partner");
  const noneCards   = partyCards.filter(c => !c.role || c.role==="none");

  // 生成
  avatarCards.forEach(card => {
    const el = createPartyCardElement(card);
    avatarContainer.appendChild(el);
  });
  partnerCards.forEach(card => {
    const el = createPartyCardElement(card);
    partnerContainer.appendChild(el);
  });
  noneCards.forEach(card => {
    const el = createPartyCardElement(card);
    partyContainer.appendChild(el);
  });
}

/** パーティカード生成 */
function createPartyCardElement(card){
  const cardEl = document.createElement("div");
  cardEl.className = "card ";
  cardEl.className += "rarity" + card.rarity.replace("★", "").trim();

  cardEl.setAttribute("data-id", card.id);

  cardEl.addEventListener("click", (e) => {
    if(window.partySelectionMode){
      e.stopPropagation();
      cardEl.classList.toggle("selected");
      updatePartyMoveButtonVisibility();
    } else {
      // 通常時は反転
      cardEl.classList.toggle("flipped");
    }
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";

  // 背景
  const bgStyle = (card.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  cardFront.style = "background-image:" + bgStyle;

  // レアリティ枠
  const rarityValue = (typeof card.rarity==="string")
                        ? card.rarity.replace("★","").trim()
                        : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  // タイプ
  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = card.type || "不明";
  cardFront.appendChild(typeEl);

  // 画像
  const imgCont = document.createElement("div");
  imgCont.className = "card-image";
  if(card.imageData){
    const imgEl = document.createElement("img");
    imgEl.src = card.imageData;
    imgEl.alt = card.name;
    imgCont.appendChild(imgEl);
  }
  cardFront.appendChild(imgCont);

  // 下部テキスト
  const infoCont = document.createElement("div");
  infoCont.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(card.name) + "</h3>";
  infoCont.appendChild(nameEl);

  if(card.state){
    const st = document.createElement("p");
    st.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(card.state);
    infoCont.appendChild(st);
  }
  const sp = document.createElement("p");
  sp.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(card.special);
  infoCont.appendChild(sp);

  const cap = document.createElement("p");
  cap.innerHTML = "<span>" + DOMPurify.sanitize(card.caption) + "</span>";
  infoCont.appendChild(cap);

  // role切り替えボタン
  const roleDiv = document.createElement("div");
  roleDiv.style.marginTop = "8px";

  const avatarBtn = document.createElement("button");
  avatarBtn.textContent = (card.role==="avatar") ? "アバター解除" : "アバターに設定";
  avatarBtn.style.marginRight = "5px";
  avatarBtn.addEventListener("click", async (e) => {
    e.stopPropagation();
    await toggleAvatar(card);
  });
  roleDiv.appendChild(avatarBtn);

  const partnerBtn = document.createElement("button");
  partnerBtn.textContent = (card.role==="partner") ? "パートナー解除" : "パートナーに設定";
  partnerBtn.addEventListener("click", async (e) => {
    e.stopPropagation();
    await togglePartner(card);
  });
  roleDiv.appendChild(partnerBtn);

  infoCont.appendChild(roleDiv);

  cardFront.appendChild(infoCont);

  // 裏面
  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  cardEl.appendChild(cardInner);

  return cardEl;
}

/** アバター切り替え（1枚限定） */
async function toggleAvatar(card) {
  // もし既にアバターなら解除
  if(card.role==="avatar"){
    card.role="none";
  } else {
    // 他のavatarを解除
    window.characterData.forEach(c => {
      if(c.group==="Party" && c.partyId===currentPartyId && c.role==="avatar"){
        c.role="none";
      }
    });
    card.role="avatar";
  }
  await saveCharacterDataToIndexedDB(window.characterData);
  renderAllParty();
}

/** パートナー切り替え（複数可） */
async function togglePartner(card){
  if(card.role==="partner"){
    card.role="none";
  } else {
    card.role="partner";
  }
  await saveCharacterDataToIndexedDB(window.characterData);
  renderAllParty();
}

/** 倉庫モーダル表示 */
function showWarehouseModal(){
  const modal = document.getElementById("warehouse-modal");
  modal.style.display = "flex";

  const whContainer = document.getElementById("warehouse-card-container");
  whContainer.innerHTML = "";

  // group==="Warehouse" のみ
  const warehouseCards = window.characterData.filter(c => c.group==="Warehouse");
  if(warehouseCards.length===0){
    whContainer.textContent = "倉庫にカードがありません。";
    return;
  }
  // カード要素生成
  warehouseCards.forEach(card => {
    const cardEl = createWarehouseCardElement(card);
    whContainer.appendChild(cardEl);
  });
  updateWarehouseAddButtonVisibility();
}

/** 倉庫カード生成 */
function createWarehouseCardElement(card){
  const cardEl = document.createElement("div");
  cardEl.className="card ";
  cardEl.className += "rarity" + card.rarity.replace("★", "").trim();

  cardEl.setAttribute("data-id", card.id);

  cardEl.addEventListener("click",(e)=>{
    if(window.warehouseSelectionMode){
      e.stopPropagation();
      cardEl.classList.toggle("selected");
      updateWarehouseAddButtonVisibility();
    } else {
      cardEl.classList.toggle("flipped");
    }
  });

  const cardInner = document.createElement("div");
  cardInner.className="card-inner";

  const cardFront = document.createElement("div");
  cardFront.className="card-front";

  // 背景CSS
  const bgStyle = (card.backgroundcss||"")
    .replace("background-image:","")
    .replace("background","")
    .trim();
  cardFront.style = "background-image:"+bgStyle;

  // レアリティ
  const rv = (typeof card.rarity==="string")? card.rarity.replace("★","").trim():"0";
  cardFront.innerHTML = `<div class='bezel rarity${rv}'></div>`;

  // タイプ
  const typeEl = document.createElement("div");
  typeEl.className="card-type";
  typeEl.textContent = card.type||"不明";
  cardFront.appendChild(typeEl);

  // 画像
  const imgC = document.createElement("div");
  imgC.className="card-image";
  if(card.imageData){
    const im = document.createElement("img");
    im.src = card.imageData;
    im.alt = card.name;
    imgC.appendChild(im);
  }
  cardFront.appendChild(imgC);

  // info
  const info = document.createElement("div");
  info.className="card-info";

  const nameP = document.createElement("p");
  nameP.innerHTML = "<h3>"+DOMPurify.sanitize(card.name)+"</h3>";
  info.appendChild(nameP);

  if(card.state){
    const stP = document.createElement("p");
    stP.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(card.state);
    info.appendChild(stP);
  }
  const spP = document.createElement("p");
  spP.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(card.special);
  info.appendChild(spP);

  const capP = document.createElement("p");
  capP.innerHTML = "<span>" + DOMPurify.sanitize(card.caption) + "</span>";
  info.appendChild(capP);

  cardFront.appendChild(info);

  const cardBack = document.createElement("div");
  cardBack.className="card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  cardEl.appendChild(cardInner);

  return cardEl;
}

/** 倉庫 -> パーティ追加ボタンの表示/非表示 */
function updateWarehouseAddButtonVisibility(){
  const addBtn = document.getElementById("add-to-party-btn");
  if(!warehouseSelectionMode){
    addBtn.style.display="none";
    return;
  }
  const sel = document.querySelectorAll("#warehouse-card-container .card.selected");
  addBtn.style.display = (sel.length>0) ? "inline-block" : "none";
}

/** パーティ -> 倉庫に戻すボタンの表示/非表示 */
function updatePartyMoveButtonVisibility(){
  const moveBtn = document.getElementById("move-selected-to-warehouse-btn");
  if(!partySelectionMode){
    moveBtn.style.display="none";
    return;
  }
  const sel = document.querySelectorAll(
    "#avatar-card-container .card.selected, " +
    "#partner-card-container .card.selected, " +
    "#party-card-container .card.selected"
  );
  moveBtn.style.display = (sel.length>0) ? "inline-block" : "none";
}
--- 
partyList.js 
// partyList.js

let editingPartyId = null;

window.addEventListener("load", async () => {
  // IndexedDB初期化
  await initIndexedDB();

  // パーティ一覧を取得して描画
  await renderPartyList();

  // 新規作成ボタン
  document.getElementById("create-party-button").addEventListener("click", async () => {
    const newName = document.getElementById("new-party-name").value.trim();
    if(!newName){
      alert("パーティ名を入力してください。");
      return;
    }
    try {
      const newId = await createParty(newName);
      document.getElementById("new-party-name").value = "";
      await renderPartyList();
    } catch(e){
      console.error(e);
      alert("パーティ作成に失敗しました:\n" + e.message);
    }
  });

  // 戻るボタン
  document.getElementById("back-to-menu").addEventListener("click", () => {
    window.location.href = "index.html";
  });

  // パーティ名変更モーダルのキャンセル
  document.getElementById("edit-party-cancel-button").addEventListener("click", ()=>{
    hideEditPartyModal();
  });

  // パーティ名変更モーダルの保存
  document.getElementById("edit-party-save-button").addEventListener("click", async ()=>{
    const newName = document.getElementById("edit-party-name").value.trim();
    if(!newName){
      alert("パーティ名を入力してください。");
      return;
    }
    if(editingPartyId == null){
      hideEditPartyModal();
      return;
    }
    try{
      const party = await getPartyById(editingPartyId);
      if(!party){
        alert("対象パーティが見つかりません。");
        hideEditPartyModal();
        return;
      }
      party.name = newName;
      party.updatedAt = new Date().toISOString();
      await updateParty(party);
      editingPartyId = null;
      hideEditPartyModal();
      await renderPartyList();
    } catch(e){
      console.error(e);
      alert("パーティ名の更新に失敗:\n" + e.message);
    }
  });
});

/** パーティ一覧を描画 */
async function renderPartyList(){
  const container = document.getElementById("party-list-container");
  container.innerHTML = "";

  let parties = [];
  try {
    parties = await listAllParties(); // indexedDB.js で実装
  } catch(e){
    console.error(e);
    container.textContent = "パーティ一覧の取得に失敗しました。";
    return;
  }

  if(parties.length === 0){
    container.textContent = "パーティがありません。";
    return;
  }

  // 現在のカレントIDをlocalStorageから読む
  const currentPartyIdStr = localStorage.getItem("currentPartyId") || "";
  const currentPartyId = currentPartyIdStr ? parseInt(currentPartyIdStr,10) : null;

  parties.forEach(party => {
    const div = document.createElement("div");
    div.style.marginBottom = "10px";
    div.style.border = "1px solid #ccc";
    div.style.padding = "10px";

    const info = document.createElement("span");
    info.textContent = `ID:${party.partyId} / ${party.name} (更新:${party.updatedAt || "なし"})`;
    div.appendChild(info);

    // カレント設定ボタン
    const setBtn = document.createElement("button");
    setBtn.textContent = "カレントに設定";
    setBtn.style.marginLeft = "10px";
    setBtn.addEventListener("click", () => {
      localStorage.setItem("currentPartyId", party.partyId.toString());
      alert(`パーティ「${party.name}」をカレントに設定しました。`);
      renderPartyList();
    });
    div.appendChild(setBtn);

    // もしカレントならラベル表示
    if(currentPartyId === party.partyId){
      const label = document.createElement("strong");
      label.textContent = " (現在のパーティ)";
      label.style.color = "#4CAF50";
      div.appendChild(label);
    }

    // 名前変更ボタン
    const editBtn = document.createElement("button");
    editBtn.textContent = "名前変更";
    editBtn.style.marginLeft = "10px";
    editBtn.addEventListener("click", () => {
      editingPartyId = party.partyId;
      showEditPartyModal(party.name);
    });
    div.appendChild(editBtn);

    // ★ 追加: 編成ボタン( partyCreate.html?partyId=xxx へ遷移 )
    const arrangeBtn = document.createElement("button");
    arrangeBtn.textContent = "編成";
    arrangeBtn.style.marginLeft = "10px";
    arrangeBtn.addEventListener("click", () => {
      window.location.href = `partyCreate.html?partyId=${party.partyId}`;
    });
    div.appendChild(arrangeBtn);

    // 削除ボタン（削除時、該当パーティのキャラを倉庫に戻す）
    const delBtn = document.createElement("button");
    delBtn.textContent = "削除";
    delBtn.style.marginLeft = "10px";
    delBtn.style.backgroundColor = "#f44336";
    delBtn.addEventListener("click", async ()=>{
      if(!confirm(`パーティ「${party.name}」を削除します。よろしいですか？`)){
        return;
      }
      try {
        // 1) characterDataをロードして、このpartyIdを持つカードを倉庫へ戻す
        const storedChars = await loadCharacterDataFromIndexedDB();
        let changed = false;
        for(const c of storedChars){
          if(c.group === "Party" && c.partyId === party.partyId){
            c.group = "Warehouse";
            c.role = "none";
            c.partyId = null;
            changed = true;
          }
        }
        if(changed){
          await saveCharacterDataToIndexedDB(storedChars);
        }

        // 2) party本体を削除
        await deletePartyById(party.partyId);

        // もしカレントパーティならカレントをクリア
        if(currentPartyId === party.partyId){
          localStorage.removeItem("currentPartyId");
        }

        // 再描画
        await renderPartyList();
      } catch(e){
        console.error(e);
        alert("パーティ削除に失敗しました:\n" + e.message);
      }
    });
    div.appendChild(delBtn);

    container.appendChild(div);
  });
}

function showEditPartyModal(currentName){
  document.getElementById("edit-party-name").value = currentName;
  document.getElementById("edit-party-modal").style.display = "flex";
}
function hideEditPartyModal(){
  document.getElementById("edit-party-modal").style.display = "none";
  editingPartyId = null;
}
--- 
scenarioPage.js 
/********************************
 * scenarioPage.js
 * - 「セクション」情報や「導入シーン」を可視化
 * - 「全セクションを閲覧する」ボタンでZIP解凍して表示
 * - 冒頭シーン(最初にDBへ登録されたscene)も履歴に出る
 ********************************/

window.addEventListener("load", async () => {
  // IndexedDB初期化 & characterDataロード
  await initIndexedDB();
  const storedChars = await loadCharacterDataFromIndexedDB();
  if (storedChars) {
    window.characterData = storedChars;
  } else {
    window.characterData = [];
  }

  // ネタバレ関連
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.style.display = "flex";
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.style.display = "none";
    });
  }

  // 「カードを取得する」ボタン
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    getCardButton.addEventListener("click", async () => {
      const sceneSummary = await getLastSceneSummary();
      let onlyTitle="";
      let onlyType="";
      let addPrompt="";

      const lines = sceneSummary.split("\n");
      lines.forEach(line=>{
        const t=line.trim();
        if(t.startsWith("【名前】")){
          onlyTitle=t.replace("【名前】","").replace("：","").trim();
        } else if(t.startsWith("【タイプ】")){
          onlyType=t.replace("【タイプ】","").replace("：","").trim();
        } else if(t.startsWith("【外見】")){
          addPrompt=t.replace("【外見】","").replace("：","").trim();
        }
      });

      const previewModal = document.getElementById("card-preview-modal");
      const previewContainer = document.getElementById("preview-card-container");
      if(!previewModal||!previewContainer)return;

      previewContainer.innerHTML="";
      const p=document.createElement("p");
      p.textContent=
        `【名前】：${onlyTitle}\n【タイプ】：${onlyType}\n【外見】：${addPrompt}\nこの内容で作成しますか？`;
      p.style.whiteSpace="pre-wrap";
      previewContainer.appendChild(p);

      previewModal.style.display="flex";

      const addBtn = document.getElementById("add-to-gachabox-button");
      if(addBtn){
        addBtn.onclick=async()=>{
          previewModal.style.display="none";
          const gachaModal=document.getElementById("gacha-modal");
          if(gachaModal) gachaModal.style.display="flex";

          try{
            await runGacha(1,addPrompt,onlyTitle,onlyType);
            alert("ガチャ箱に追加しました。");
          }catch(e){
            console.error(e);
            alert("カード生成失敗:"+e.message);
          }finally{
            if(gachaModal) gachaModal.style.display="none";
          }
        };
      }
      const cancelBtn = document.getElementById("cancel-card-preview-button");
      if(cancelBtn){
        cancelBtn.onclick=()=>{
          previewModal.style.display="none";
        };
      }
    });
  }

  // 回答候補を生成
  const generateActionCandidatesBtn = document.getElementById("generate-action-candidates-button");
  if(generateActionCandidatesBtn){
    generateActionCandidatesBtn.addEventListener("click", onGenerateActionCandidates);
  }

  // パーティモーダル
  const showPartyBtn = document.getElementById("show-party-button");
  if(showPartyBtn){
    showPartyBtn.addEventListener("click", showPartyModal);
  }
  const closePartyModalBtn = document.getElementById("close-party-modal");
  if(closePartyModalBtn){
    closePartyModalBtn.addEventListener("click",()=>{
      const modal = document.getElementById("party-modal");
      if(modal) modal.style.display="none";
    });
  }

  // 全セクション閲覧
  const viewAllSectionsBtn = document.getElementById("view-all-sections-button");
  if(viewAllSectionsBtn){
    viewAllSectionsBtn.addEventListener("click", showAllSectionsModal);
  }
  const closeAllSecBtn = document.getElementById("close-all-sections-modal");
  if(closeAllSecBtn){
    closeAllSecBtn.addEventListener("click",()=>{
      document.getElementById("all-sections-modal").style.display="none";
    });
  }
});

/** 回答候補 */
async function onGenerateActionCandidates(){
  if(!window.apiKey){
    alert("APIキー未設定");
    return;
  }
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e=> e.type==="scene");
  const lastSceneText = lastSceneEntry? lastSceneEntry.content : "(シーン無し)";

  window.cancelRequested=false;
  showLoadingModal(true);

  try{
    window.currentRequestController=new AbortController();
    const signal=window.currentRequestController.signal;

    const prompt=`
      あなたはTRPGのGMです。
      下記シーンを踏まえ、プレイヤーが可能な行動案を5つ提案してください。
      ---
      ${lastSceneText}
    `;
    const resp=await fetch("https://api.openai.com/v1/chat/completions",{
      method:"POST",
      headers:{
        "Content-Type":"application/json",
        "Authorization":`Bearer ${window.apiKey}`
      },
      body:JSON.stringify({
        model:"gpt-4",
        messages:[
          { role:"system", content:"あなたは優秀なTRPGアシスタント" },
          { role:"user", content:prompt }
        ],
        temperature:0.7
      }),
      signal
    });
    const data=await resp.json();
    if(data.error) throw new Error(data.error.message);

    const content = data.choices[0].message.content||"";
    const lines = content.split("\n").map(l=>l.trim()).filter(l=>l);

    const container = document.getElementById("action-candidates-container");
    if(!container)return;
    container.innerHTML="";

    lines.forEach(line=>{
      const btn=document.createElement("button");
      btn.textContent=line.replace(/^\d+\.\s*/,"");
      btn.style.display="block";
      btn.style.margin="5px 0";
      btn.addEventListener("click",()=>{
        const playerInput=document.getElementById("player-input");
        if(playerInput){
          playerInput.value=btn.textContent;
        }
      });
      container.appendChild(btn);
    });
  }catch(e){
    if(e.name==="AbortError"){
      console.log("候補生成キャンセル");
    } else {
      console.error(e);
      alert("候補生成失敗:"+e.message);
    }
  }finally{
    showLoadingModal(false);
  }
}

/** 全セクション表示モーダル */
function showAllSectionsModal(){
  const modal=document.getElementById("all-sections-modal");
  if(!modal)return;

  // scenario.jsの loadScenarioData() で window.currentScenario.wizardData が格納済み
  const wd = (window.currentScenario && window.currentScenario.wizardData)||{};
  const sections = wd.sections||[];

  const container=document.getElementById("all-sections-content");
  container.textContent="";

  if(!sections.length){
    container.textContent="セクション情報がありません。";
  } else {
    let text="";
    for(const sec of sections){
      text += `【セクション${sec.number}】`+(sec.cleared?"(クリア済み)":"(未クリア)")+"\n";
      text += "条件: "+(decompressCondition(sec.conditionZipped))+"\n\n";
    }
    container.textContent=text;
  }

  modal.style.display="flex";
}

/** ZIP解凍 */
function decompressCondition(zippedBase64){
  if(!zippedBase64)return"(不明)";
  try{
    const bin=atob(zippedBase64);
    const uint8=new Uint8Array([...bin].map(c=>c.charCodeAt(0)));
    const inf=pako.inflate(uint8);
    return new TextDecoder().decode(inf);
  }catch(e){
    console.error("decompress失敗:",e);
    return"(解凍エラー)";
  }
}

/** パーティ確認モーダル */
function showPartyModal(){
  const modal=document.getElementById("party-modal");
  if(!modal)return;
  modal.style.display="flex";

  renderPartyCardsInModal();
}
function renderPartyCardsInModal(){
  const container=document.getElementById("party-modal-card-container");
  if(!container)return;
  container.innerHTML="";

  const partyCards=window.characterData.filter(c=>c.group==="Party");
  if(!partyCards.length){
    container.textContent="パーティにカードがありません。";
    return;
  }
  partyCards.forEach(card=>{
    const cardEl=createPartyCardElement(card);
    container.appendChild(cardEl);
  });
}
function createPartyCardElement(c){
  const cardEl=document.createElement("div");
  cardEl.className="card ";
  cardEl.className += "rarity" + char.rarity.replace("★", "").trim();

  cardEl.setAttribute("data-id",c.id);
  cardEl.addEventListener("click",()=>{
    cardEl.classList.toggle("flipped");
  });

  const cardInner=document.createElement("div");
  cardInner.className="card-inner";

  const cf=document.createElement("div");
  cf.className="card-front";

  const bg=(c.backgroundcss||"").replace("background-image:","").replace("background","").trim();
  cf.style="background-image:"+bg;

  const rv=(typeof c.rarity==="string")? c.rarity.replace("★","").trim() : "0";
  cf.innerHTML=`<div class='bezel rarity${rv}'></div>`;

  let roleLabel="";
  if(c.role==="avatar") roleLabel="(アバター)";
  else if(c.role==="partner") roleLabel="(パートナー)";

  const tEl=document.createElement("div");
  tEl.className="card-type";
  tEl.textContent=(c.type||"不明")+roleLabel;
  cf.appendChild(tEl);

  const imgCont=document.createElement("div");
  imgCont.className="card-image";
  if(c.imageData){
    const im=document.createElement("img");
    im.src=c.imageData;
    im.alt=c.name;
    imgCont.appendChild(im);
  }
  cf.appendChild(imgCont);

  const info=document.createElement("div");
  info.className="card-info";

  const nm=document.createElement("p");
  nm.innerHTML="<h3>"+DOMPurify.sanitize(c.name)+"</h3>";
  info.appendChild(nm);

  if(c.state){
    const st=document.createElement("p");
    st.innerHTML="<strong>状態：</strong>"+DOMPurify.sanitize(c.state);
    info.appendChild(st);
  }

  const sp=document.createElement("p");
  sp.innerHTML="<strong>特技：</strong>"+DOMPurify.sanitize(c.special);
  info.appendChild(sp);

  const cap=document.createElement("p");
  cap.innerHTML="<span>"+DOMPurify.sanitize(c.caption)+"</span>";
  info.appendChild(cap);

  cf.appendChild(info);

  const cb=document.createElement("div");
  cb.className="card-back";
  cb.innerHTML=`<strong>${DOMPurify.sanitize(c.type)}</strong>`;

  cardInner.appendChild(cf);
  cardInner.appendChild(cb);
  cardEl.appendChild(cardInner);
  return cardEl;
}

/** シーン要約からカード用【名前】【タイプ】【外見】を得る */
async function getLastSceneSummary(){
  const lastSceneEntry=[...window.sceneHistory].reverse().find(e=>e.type==="scene");
  if(!lastSceneEntry) return "シーンがありません。";

  const text=lastSceneEntry.content;
  const systemPrompt=`
あなたは優秀なカード作成用プロンプト生成者。
以下フォーマットで【名前】【タイプ】【外見】を作ってください。`;
  const userPrompt=`
シーン文:
${text}
ここからエレメントにできそうな対象1つを抽出し、【名前】【タイプ】【外見】を生成してください。
`;

  try{
    const resp=await fetch("https://api.openai.com/v1/chat/completions",{
      method:"POST",
      headers:{
        "Content-Type":"application/json",
        "Authorization":`Bearer ${window.apiKey}`
      },
      body:JSON.stringify({
        model:"gpt-4",
        messages:[
          { role:"system", content: systemPrompt },
          { role:"user", content: userPrompt }
        ]
      })
    });
    const data=await resp.json();
    if(data.error) throw new Error(data.error.message);

    return data.choices[0].message.content||"";
  }catch(e){
    console.error("要約失敗:",e);
    return"(要約失敗)";
  }
}

/** ローディング表示 */
function showLoadingModal(show){
  const m=document.getElementById("loading-modal");
  if(!m)return;
  m.style.display=show?"flex":"none";
}
function onCancelFetch(){
  if(window.currentRequestController){
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}
--- 
scenarioWizard.js 
// scenarioWizard.js

let wizardData = {
  genre: "",           // 「【舞台】...【テーマ】...【雰囲気】...」 or 自由入力
  scenarioType: "",    // "objective" or "exploration"
  clearCondition: "",
  scenarioSummary: "",
  introScene: "",
  party: [],
  partyId: 0,          // ★追加: 紐づけるパーティID
  sections: []
};

// 舞台(複数), テーマ(単一), 雰囲気(単一)
let wizStoredStageArr = [];
let wizStoredTheme = "";
let wizStoredMood = "";

// カスタムチップ
let wizCustomStageChips = [];
let wizCustomThemeChips = [];
let wizCustomMoodChips = [];

// 「その他」モーダル操作中
let wizardCurrentOtherCategory = "";
// 削除モーダル操作中
let wizardDeletingChipLabel = "";
let wizardDeletingChipCategory = "";

// 軸選択 or 自由入力 の選択状態 ("axis" | "free" | "")
let wizardChoice = "";

window.apiKey = localStorage.getItem("apiKey") || "";

window.addEventListener("load", async function () {
  // IndexedDB初期化
  await initIndexedDB();

  // 既存wizardDataあればロード
  const storedWizard = await loadWizardDataFromIndexedDB();
  if (storedWizard) {
    wizardData = storedWizard;
  }

  initWizardChips();

  // Stepボタン
  document.getElementById("go-step2-btn").addEventListener("click", onGoStep2);
  document.getElementById("back-to-step1-button").addEventListener("click", onBackToStep1);
  document.getElementById("back-to-step2-button").addEventListener("click", onBackToStep2FromStep3);
  document.getElementById("start-scenario-button").addEventListener("click", onStartScenario);

  document.getElementById("type-objective-btn").addEventListener("click", () => onSelectScenarioType("objective"));
  document.getElementById("type-exploration-btn").addEventListener("click", () => onSelectScenarioType("exploration"));

  document.getElementById("confirm-scenario-ok").addEventListener("click", onConfirmScenarioModalOK);
  document.getElementById("confirm-scenario-cancel").addEventListener("click", onConfirmScenarioModalCancel);

  const cancelReqBtn = document.getElementById("cancel-request-button");
  if (cancelReqBtn) {
    cancelReqBtn.addEventListener("click", onCancelFetch);
  }

  // 「その他」モーダルのボタン
  document.getElementById("wizard-other-generate-btn").addEventListener("click", wizardOtherGenerate);
  document.getElementById("wizard-other-ok-btn").addEventListener("click", wizardOtherOk);
  document.getElementById("wizard-other-cancel-btn").addEventListener("click", wizardOtherCancel);

  // 「削除」確認モーダルのボタン
  document.getElementById("wizard-delete-confirm-ok").addEventListener("click", wizardDeleteConfirmOk);
  document.getElementById("wizard-delete-confirm-cancel").addEventListener("click", wizardDeleteConfirmCancel);

  // ▼ 軸or自由入力のチップにイベント付与
  const axisChip = document.getElementById("choice-axis");
  const freeChip = document.getElementById("choice-free");
  axisChip.addEventListener("click", () => {
    wizardChoice = "axis";
    axisChip.classList.add("selected");
    freeChip.classList.remove("selected");
    enableAxisInput(true);
    enableFreeInput(false);
  });
  freeChip.addEventListener("click", () => {
    wizardChoice = "free";
    freeChip.classList.add("selected");
    axisChip.classList.remove("selected");
    enableAxisInput(false);
    enableFreeInput(true);
  });

  // 初期状態は未選択
  wizardChoice = "";
  axisChip.classList.remove("selected");
  freeChip.classList.remove("selected");
  enableAxisInput(false);
  enableFreeInput(false);

  updateSelectedGenreDisplay();
  updateSummaryUI();
});

/** 軸入力を有効/無効にする */
function enableAxisInput(flag) {
  const group = document.getElementById("axis-input-group");
  if (!group) return;
  if (flag) {
    group.style.opacity = "1.0";
    group.style.display = "block";
    group.style.pointerEvents = "auto";
  } else {
    group.style.opacity = "0.2";
    group.style.display = "none";
    group.style.pointerEvents = "none";
  }
}

/** 自由入力を有効/無効にする */
function enableFreeInput(flag) {
  const group = document.getElementById("free-input-group");
  if (!group) return;
  if (flag) {
    group.style.opacity = "1.0";
    group.style.display = "block";
    group.style.pointerEvents = "auto";
  } else {
    group.style.opacity = "0.2";
    group.style.display = "none";
    group.style.pointerEvents = "none";
  }
}

function initWizardChips() {
  // localStorage 読み込み
  const sjson = localStorage.getItem("elementStageArr");
  if (sjson) {
    try {
      wizStoredStageArr = JSON.parse(sjson);
    } catch (e) {
      wizStoredStageArr = [];
    }
  } else {
    wizStoredStageArr = [];
  }
  wizStoredTheme = localStorage.getItem("elementTheme") || "";
  wizStoredMood = localStorage.getItem("elementMood") || "";

  wizCustomStageChips = loadWizardCustom("customStageChips");
  wizCustomThemeChips = loadWizardCustom("customThemeChips");
  wizCustomMoodChips = loadWizardCustom("customMoodChips");

  renderWizardStageChips();
  renderWizardThemeChips();
  renderWizardMoodChips();

  updateWizGenreResultText();
}

function loadWizardCustom(key) {
  try {
    const j = localStorage.getItem(key);
    if (!j) return [];
    return JSON.parse(j);
  } catch (e) {
    return [];
  }
}

// 舞台(複数)
function renderWizardStageChips() {
  const defaultList = ["ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク"];
  const container = document.getElementById("wiz-stage-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const all = [...defaultList, ...wizCustomStageChips, "その他"];
  all.forEach(label => {
    const chip = createWizardChip(label, "stage");
    container.appendChild(chip);
  });
}

// テーマ(単一)
function renderWizardThemeChips() {
  const defaultList = [
    "アクション / 冒険",
    "ミステリー / サスペンス",
    "ロマンス / ドラマ",
    "コメディ / ほのぼの",
    "ホラー / スリラー"
  ];
  const container = document.getElementById("wiz-theme-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const all = [...defaultList, ...wizCustomThemeChips, "その他"];
  all.forEach(label => {
    const chip = createWizardChip(label, "theme");
    container.appendChild(chip);
  });
}

// 雰囲気(単一)
function renderWizardMoodChips() {
  const defaultList = ["ライト / ポップ", "中間 / バランス型", "ダーク / シリアス"];
  const container = document.getElementById("wiz-mood-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const all = [...defaultList, ...wizCustomMoodChips, "その他"];
  all.forEach(label => {
    const chip = createWizardChip(label, "mood");
    container.appendChild(chip);
  });
}

function createWizardChip(label, category) {
  const isOther = (label === "その他");
  const chip = document.createElement("div");
  chip.className = "chip";
  chip.textContent = label;

  if (category === "stage") {
    if (wizStoredStageArr.includes(label)) {
      chip.classList.add("selected");
    }
  } else if (category === "theme") {
    if (wizStoredTheme === label) {
      chip.classList.add("selected");
    }
  } else if (category === "mood") {
    if (wizStoredMood === label) {
      chip.classList.add("selected");
    }
  }

  chip.addEventListener("click", () => {
    if (!canEditAxisInput()) return; // 軸入力が無効な場合はクリックしても反応しない
    if (isOther) {
      openWizardOtherModal(category);
      return;
    }

    if (category === "stage") {
      // 複数トグル
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        wizStoredStageArr = wizStoredStageArr.filter(x => x !== label);
      } else {
        chip.classList.add("selected");
        wizStoredStageArr.push(label);
      }
      localStorage.setItem("elementStageArr", JSON.stringify(wizStoredStageArr));
    } else if (category === "theme") {
      // 単一
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        wizStoredTheme = "";
        localStorage.setItem("elementTheme", "");
      } else {
        const cont = document.getElementById("wiz-theme-chips-container");
        const all = cont.querySelectorAll(".chip");
        all.forEach(c => c.classList.remove("selected"));
        chip.classList.add("selected");
        wizStoredTheme = label;
        localStorage.setItem("elementTheme", wizStoredTheme);
      }
    } else if (category === "mood") {
      // 単一
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        wizStoredMood = "";
        localStorage.setItem("elementMood", "");
      } else {
        const cont = document.getElementById("wiz-mood-chips-container");
        const all = cont.querySelectorAll(".chip");
        all.forEach(c => c.classList.remove("selected"));
        chip.classList.add("selected");
        wizStoredMood = label;
        localStorage.setItem("elementMood", wizStoredMood);
      }
    }
    updateWizGenreResultText();
  });

  // カスタム削除
  if (!isOther) {
    if (category === "stage" && wizCustomStageChips.includes(label)) {
      addWizardRemoveButton(chip, label, "stage");
    } else if (category === "theme" && wizCustomThemeChips.includes(label)) {
      addWizardRemoveButton(chip, label, "theme");
    } else if (category === "mood" && wizCustomMoodChips.includes(label)) {
      addWizardRemoveButton(chip, label, "mood");
    }
  }

  return chip;
}

/** 軸入力が有効なときのみチップを操作できるようにするための判定 */
function canEditAxisInput() {
  return (wizardChoice === "axis");
}

function addWizardRemoveButton(chip, label, category) {
  const span = document.createElement("span");
  span.textContent = "×";
  span.style.marginLeft = "4px";
  span.style.cursor = "pointer";
  span.style.color = "red";
  span.addEventListener("click", (e) => {
    e.stopPropagation();
    wizardDeletingChipLabel = label;
    wizardDeletingChipCategory = category;
    document.getElementById("wizard-delete-confirm-modal").style.display = "flex";
  });
  chip.appendChild(span);
}

function openWizardOtherModal(category) {
  wizardCurrentOtherCategory = category;
  const catText =
    (category === "stage") ? "舞台に追加する「その他」" :
      (category === "theme") ? "テーマに追加する「その他」" :
        "雰囲気に追加する「その他」";

  document.getElementById("wizard-other-input-modal-category").textContent = catText;
  document.getElementById("wizard-other-input-text").value = "";
  document.getElementById("wizard-other-input-modal").style.display = "flex";
}

async function wizardOtherGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  let existingList = [];
  if (wizardCurrentOtherCategory === "stage") {
    existingList = ["ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク", ...wizCustomStageChips];
  } else if (wizardCurrentOtherCategory === "theme") {
    existingList = [
      "アクション / 冒険",
      "ミステリー / サスペンス",
      "ロマンス / ドラマ",
      "コメディ / ほのぼの",
      "ホラー / スリラー",
      ...wizCustomThemeChips
    ];
  } else if (wizardCurrentOtherCategory === "mood") {
    existingList = ["ライト / ポップ", "中間 / バランス型", "ダーク / シリアス", ...wizCustomMoodChips];
  }

  showLoadingModal(true);
  try {
    const systemPrompt = "あなたは創造力豊かなアシスタントです。回答は1つだけ。";
    const userPrompt = `既存候補:${existingList.join(" / ")}\nこれらに無い新しい案を1つ提案してください。`;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const newCandidate = (data.choices[0].message.content || "").trim();
    document.getElementById("wizard-other-input-text").value = newCandidate;
  } catch (err) {
    console.error(err);
    alert("その他生成失敗:\n" + err.message);
  } finally {
    showLoadingModal(false);
  }
}

function wizardOtherOk() {
  const val = document.getElementById("wizard-other-input-text").value.trim();
  if (!val) {
    document.getElementById("wizard-other-input-modal").style.display = "none";
    return;
  }

  if (wizardCurrentOtherCategory === "stage") {
    if (!wizCustomStageChips.includes(val)) {
      wizCustomStageChips.push(val);
      localStorage.setItem("customStageChips", JSON.stringify(wizCustomStageChips));
    }
    renderWizardStageChips();
  } else if (wizardCurrentOtherCategory === "theme") {
    if (!wizCustomThemeChips.includes(val)) {
      wizCustomThemeChips.push(val);
      localStorage.setItem("customThemeChips", JSON.stringify(wizCustomThemeChips));
    }
    renderWizardThemeChips();
  } else if (wizardCurrentOtherCategory === "mood") {
    if (!wizCustomMoodChips.includes(val)) {
      wizCustomMoodChips.push(val);
      localStorage.setItem("customMoodChips", JSON.stringify(wizCustomMoodChips));
    }
    renderWizardMoodChips();
  }

  document.getElementById("wizard-other-input-modal").style.display = "none";
  updateWizGenreResultText();
}

function wizardOtherCancel() {
  document.getElementById("wizard-other-input-modal").style.display = "none";
}

function wizardDeleteConfirmOk() {
  if (wizardDeletingChipCategory === "stage") {
    wizCustomStageChips = wizCustomStageChips.filter(c => c !== wizardDeletingChipLabel);
    localStorage.setItem("customStageChips", JSON.stringify(wizCustomStageChips));
    wizStoredStageArr = wizStoredStageArr.filter(x => x !== wizardDeletingChipLabel);
    localStorage.setItem("elementStageArr", JSON.stringify(wizStoredStageArr));
    renderWizardStageChips();
  } else if (wizardDeletingChipCategory === "theme") {
    wizCustomThemeChips = wizCustomThemeChips.filter(c => c !== wizardDeletingChipLabel);
    localStorage.setItem("customThemeChips", JSON.stringify(wizCustomThemeChips));
    if (wizStoredTheme === wizardDeletingChipLabel) {
      wizStoredTheme = "";
      localStorage.setItem("elementTheme", "");
    }
    renderWizardThemeChips();
  } else if (wizardDeletingChipCategory === "mood") {
    wizCustomMoodChips = wizCustomMoodChips.filter(c => c !== wizardDeletingChipLabel);
    localStorage.setItem("customMoodChips", JSON.stringify(wizCustomMoodChips));
    if (wizStoredMood === wizardDeletingChipLabel) {
      wizStoredMood = "";
      localStorage.setItem("elementMood", "");
    }
    renderWizardMoodChips();
  }
  wizardDeletingChipLabel = "";
  wizardDeletingChipCategory = "";
  document.getElementById("wizard-delete-confirm-modal").style.display = "none";
  updateWizGenreResultText();
}

function wizardDeleteConfirmCancel() {
  wizardDeletingChipLabel = "";
  wizardDeletingChipCategory = "";
  document.getElementById("wizard-delete-confirm-modal").style.display = "none";
}

function updateWizGenreResultText() {
  let stagePart = (wizStoredStageArr.length > 0) ? "【舞台】" + wizStoredStageArr.join("/") : "";
  let themePart = wizStoredTheme ? "【テーマ】" + wizStoredTheme : "";
  let moodPart = wizStoredMood ? "【雰囲気】" + wizStoredMood : "";
  let result = stagePart + themePart + moodPart;
  if(result == "") result = "テーマは選択されていません";
  document.getElementById("wiz-genre-result-text").textContent = result;
}

/* STEP1 -> STEP2 */
async function onGoStep2() {
  // 軸 or 自由入力 の選択必須
  if (!wizardChoice) {
    alert("「選択して入力」か「自由入力」を選んでください。");
    return;
  }

  if (wizardChoice === "axis") {
    const result = buildChipsGenre();
    if (!result) {
      alert("舞台・テーマ・雰囲気のどれかを入力してください。");
      return;
    }
    wizardData.genre = result;
  } else {
    // "free"の場合
    const freeVal = document.getElementById("free-genre-input").value.trim();
    if (!freeVal) {
      alert("自由入力ジャンルを入力してください。");
      return;
    }
    wizardData.genre = freeVal;
  }

  await saveWizardDataToIndexedDB(wizardData);

  document.getElementById("wizard-step1").style.display = "none";
  document.getElementById("wizard-step2").style.display = "block";
  updateSelectedGenreDisplay();
}

function buildChipsGenre() {
  let stagePart = (wizStoredStageArr.length > 0) ? "【舞台】" + wizStoredStageArr.join("/") : "";
  let themePart = wizStoredTheme ? "【テーマ】" + wizStoredTheme : "";
  let moodPart = wizStoredMood ? "【雰囲気】" + wizStoredMood : "";
  return stagePart + themePart + moodPart;
}

function onBackToStep1() {
  document.getElementById("wizard-step2").style.display = "none";
  document.getElementById("wizard-step1").style.display = "block";
}

function updateSelectedGenreDisplay() {
  const el = document.getElementById("selected-genre-display");
  if (!el) return;
  el.textContent = wizardData.genre || "(未選択)";
}

function onBackToStep2FromStep3() {
  document.getElementById("wizard-step3").style.display = "none";
  document.getElementById("wizard-step2").style.display = "block";
}

function onSelectScenarioType(type) {
  wizardData.scenarioType = type;
  saveWizardDataToIndexedDB(wizardData);
  // 英語→日本語に変換するラベルを用意
  let typeLabel = "";
  if (type === "objective") {
    typeLabel = "目的達成型";
  } else {
    typeLabel = "探索型";
  }

  const textEl = document.getElementById("confirm-genre-type-text");
  textEl.textContent = `ジャンル: ${wizardData.genre}\nシナリオタイプ: ${typeLabel}`;
  document.getElementById("confirm-scenario-modal").style.display = "flex";
}

function onConfirmScenarioModalCancel() {
  document.getElementById("confirm-scenario-modal").style.display = "none";
}

/** シナリオ生成(ステップ2 OK) */
async function onConfirmScenarioModalOK() {
  showLoadingModal(true);
  document.getElementById("confirm-scenario-modal").style.display = "none";

  try {
    // 1) カレントパーティをwizardDataに格納
    await storePartyInWizardData();

    // 2) シナリオ概要＆クリア条件などをGPTで生成
    if (wizardData.scenarioType === "objective") {
      await generateScenarioSummaryAndClearCondition();
    } else {
      await generateScenarioSummary();
    }

    // 3) セクション
    await generateSections();

    // 4) 導入シーン
    await generateIntroScene();

    // ステップ2->3
    document.getElementById("wizard-step2").style.display = "none";
    document.getElementById("wizard-step3").style.display = "block";
    updateSummaryUI();

  } catch (err) {
    console.error(err);
    alert("シナリオ生成に失敗しました:\n" + err.message);
  } finally {
    showLoadingModal(false);
  }
}

async function onStartScenario() {
  try {
    let title = wizardData.genre || "新シナリオ";
    const scenarioId = await createNewScenario(wizardData, title);

    // 導入シーンがあればDBに登録 + 画像用のpromptも生成
    if (wizardData.introScene && wizardData.introScene.trim()) {
      const introPrompt = await generateIntroImagePrompt(wizardData.introScene);
      const firstScene = {
        scenarioId: scenarioId,
        type: "scene",
        sceneId: "intro_" + Date.now(),
        content: wizardData.introScene,
        prompt: introPrompt
      };
      await addSceneEntry(firstScene);
    }

    window.location.href = `scenario.html?scenarioId=${scenarioId}`;
  } catch (err) {
    console.error("シナリオ開始失敗:", err);
    alert("シナリオ開始失敗: " + err.message);
  }
}

async function generateScenarioSummaryAndClearCondition() {
  try {
    const apiKey = window.apiKey || "";
    if (!apiKey) throw new Error("APIキー未設定");

    wizardData.scenarioSummary = "";
    wizardData.clearCondition = "";

    const prompt = `
      あなたはTRPG用のシナリオ作成に長けたアシスタントです。
      ジャンル:${wizardData.genre}, タイプ:目的達成型。
      1) シナリオ概要(短めで背景黒が前提の装飾のタグ(br,h3,h4,h5,p style="color:red"等)あり)
      2) 【クリア条件】(非公開,プレイヤー非表示)。必ず明示してください。
    `;
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGシナリオメーカーです。" },
          { role: "user", content: prompt }
        ],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const text = data.choices[0].message.content || "";
    let sum = text;
    let cc = "";
    if (text.includes("【クリア条件】")) {
      const arr = text.split("【クリア条件】");
      sum = arr[0].trim();
      cc = arr[1] ? arr[1].trim() : "";
    }
    wizardData.scenarioSummary = sum;
    wizardData.clearCondition = cc;
    await saveWizardDataToIndexedDB(wizardData);
  } catch (err) {
    console.error(err);
    alert("目的達成型シナリオ生成失敗: " + err.message);
  }
}

async function generateScenarioSummary() {
  try {
    const apiKey = window.apiKey || "";
    if (!apiKey) throw new Error("APIキー未設定");

    wizardData.scenarioSummary = "";

    const prompt = `
      あなたはTRPGシナリオ作成のプロ。ジャンル:${wizardData.genre}, タイプ:探索型。
      エレメント取得可能。短めで背景黒が前提の装飾のタグ(br,h3,h4,h5,p style="color:aqua"等)ありの概要を作ってください。
    `;
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGシナリオメーカーです。" },
          { role: "user", content: prompt }
        ],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    wizardData.scenarioSummary = data.choices[0].message.content || "(概要なし)";
    await saveWizardDataToIndexedDB(wizardData);
  } catch (err) {
    console.error(err);
    alert("探索型シナリオ生成失敗: " + err.message);
  }
}

async function generateSections() {
  wizardData.sections = [];
  const count = Math.floor(Math.random() * 4) + 2; // 2..5

  const systemPrompt = `
あなたはTRPGシナリオを小分けにして目標を作るエキスパートです。
絶対に動詞を用いた条件文で書いてください(例:「XXを発見する」「XXを調べる」など)。
セクション数:${count}個、それぞれ1行ずつ動詞で始まるようお願いします。`;
  const userPrompt = `
ジャンル:${wizardData.genre}, シナリオタイプ:${wizardData.scenarioType} 用のセクション達成条件:
必ず動詞～で書いてください。${count}個分、箇条書きで。
`;

  try {
    const apiKey = window.apiKey || "";
    if (!apiKey) throw new Error("APIキー未設定");

    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7
      })
    });
    const d = await r.json();
    if (d.error) throw new Error(d.error.message);

    const text = d.choices[0].message.content || "";
    const lines = text.split("\n").map(l => l.trim()).filter(l => l);

    for (let i = 0; i < count; i++) {
      const raw = lines[i] || (`セクション${i + 1}のダミー(動詞)`);
      wizardData.sections.push({
        number: (i + 1),
        conditionZipped: zipString(raw),
        cleared: false
      });
    }
  } catch (err) {
    console.error("セクション生成失敗:", err);
    // ダミー
    for (let i = 0; i < count; i++) {
      wizardData.sections.push({
        number: (i + 1),
        conditionZipped: zipString(`セクション${i + 1}ダミー(動詞形)`),
        cleared: false
      });
    }
  }
  await saveWizardDataToIndexedDB(wizardData);
}

function zipString(str) {
  const utf8 = new TextEncoder().encode(str);
  const def = pako.deflate(utf8);
  return btoa(String.fromCharCode(...def));
}

async function generateIntroScene() {
  const apiKey = window.apiKey || "";
  if (!apiKey) {
    wizardData.introScene = "(導入生成失敗：APIキー無し)";
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }
  try {
    const pro = `
      あなたはTRPGのゲームマスターです。
      次のシナリオ概要を踏まえ、プレイヤーが何らかの行動したくなる導入シーン(300字程度)を背景黒が前提の装飾のタグ(br,h3,h4,h5,p style="color:aqua"等)ありで作ってください。
      シナリオ概要:
      ${wizardData.scenarioSummary}
    `;
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGシナリオライターです。" },
          { role: "user", content: pro }
        ],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    wizardData.introScene = data.choices[0].message.content || "(導入空)";
  } catch (err) {
    console.error(err);
    wizardData.introScene = "(導入生成失敗)";
  }
  await saveWizardDataToIndexedDB(wizardData);
}

/** ★カレントパーティ情報を wizardData に格納 */
async function storePartyInWizardData() {
  // currentPartyId
  const cpidStr = localStorage.getItem("currentPartyId") || "";
  if (!cpidStr) {
    // パーティ未設定の場合でもエラーにはしない
    wizardData.party = [];
    wizardData.partyId = 0;
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }
  const pid = parseInt(cpidStr, 10);
  wizardData.partyId = pid;

  const charData = await loadCharacterDataFromIndexedDB();
  if (!charData) {
    wizardData.party = [];
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }
  const partyCards = charData.filter(c => c.group === "Party" && c.partyId === pid);
  const stripped = partyCards.map(c => ({
    id: c.id,
    name: c.name,
    type: c.type,
    rarity: c.rarity,
    state: c.state,
    special: c.special,
    caption: c.caption,
    backgroundcss: c.backgroundcss,
    role: c.role
  }));
  wizardData.party = stripped;
  await saveWizardDataToIndexedDB(wizardData);
}

function updateSummaryUI() {
  const el = document.getElementById("scenario-summary");
  if (!el) return;

  // タグやstyle属性を許可する例:
  const config = {
    ALLOWED_TAGS: ["p", "br", "hr", "h3", "h4", "h5", "span", "div", "strong", "em"],
    ALLOWED_ATTR: ["style"]
  };

  // sanitize結果をinnerHTMLに反映
  const sanitized = DOMPurify.sanitize(wizardData.scenarioSummary, config);
  el.innerHTML = sanitized || "(シナリオ概要なし)";
}

function showLoadingModal(show) {
  const m = document.getElementById("loading-modal");
  if (!m) return;
  m.style.display = show ? "flex" : "none";
}

function onCancelFetch() {
  showLoadingModal(false);
}

/* -------------------------------------------------
   ▼ 追加: 導入シーン用 画像プロンプト生成関数
   （scene.jsのgenerateImagePromptFromScene相当を簡易転用）
-------------------------------------------------*/
async function generateIntroImagePrompt(sceneText) {
  if (!window.apiKey) return "";
  try {
    const systemMsg = {
      role: "system",
      content: "あなたは画像生成のための短い英語プロンプトを作るアシスタントです。"
    };
    const userMsg = {
      role: "user",
      content: `
以下の文章を参考に、英語メインのキーワード列を作ってください。
説明文や文章体は禁止。NGワード:'goblin'
シーン:
${sceneText}
      `
    };

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [systemMsg, userMsg],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) {
      console.warn("intro prompt失敗:", data.error);
      return "";
    }
    const result = (data.choices[0].message.content || "").trim();
    return result;
  } catch (e) {
    console.error("generateIntroImagePrompt失敗:", e);
    return "";
  }
}
--- 
scene.js 
/********************************
 * scene.js
 * シナリオ/シーン管理
 *  - シーン生成時、画像用のプロンプトもfunction callingで取得し「prompt」に保存
 *  - 自動生成/カスタム生成ボタンで prompt を使って画像を生成
 ********************************/

window.apiKey = '';
window.sceneHistory = [];
window.currentScenarioId = null;
window.currentScenario = null;
window.currentRequestController = null;
window.cancelRequested = false;

window.scenarioType = null;
window.clearCondition = null;
window.sections = [];

const DOMPURIFY_CONFIG = {
  ALLOWED_TAGS: ["p", "br", "hr", "h3", "h4", "h5", "span", "div", "strong", "em"],
  ALLOWED_ATTR: ["style"]
};

/** DBからシナリオ情報を読み込み */
async function loadScenarioData(scenarioId) {
  try {
    const sc = await getScenarioById(scenarioId);
    if (!sc) {
      alert("指定シナリオが存在しません。");
      return;
    }
    window.currentScenario = sc;

    const wd = sc.wizardData || {};
    window.scenarioType = wd.scenarioType;
    window.clearCondition = wd.clearCondition || "";
    window.sections = wd.sections || [];

    const ents = await getSceneEntriesByScenarioId(scenarioId);
    window.sceneHistory = ents.map(e => ({
      entryId: e.entryId,
      type: e.type,
      sceneId: e.sceneId,
      content: e.content,
      dataUrl: e.dataUrl,
      // ★ 画像用プロンプトは "prompt" フィールドに格納
      prompt: e.prompt || ""
    }));

    // ネタバレ(目的達成型)
    if (window.scenarioType === "objective") {
      const sb = document.getElementById("spoiler-button");
      if (sb) sb.style.display = "inline-block";
      const sp = document.getElementById("clear-condition-text");
      if (sp) sp.textContent = window.clearCondition || "(クリア条件なし)";
    } else if (window.scenarioType === "exploration") {
      const gcb = document.getElementById("get-card-button");
      if (gcb) gcb.style.display = "inline-block";
    }
  } catch (err) {
    console.error("シナリオ読み込み失敗:", err);
    alert("読み込み失敗:" + err.message);
  }
}

/** 次のシーンを生成し、履歴に追加 → 画像用プロンプトもfunction callingで作成 → その後セクション達成判定を行う */
async function getNextScene() {
  if (!window.apiKey) {
    alert("APIキー未設定");
    return;
  }
  const pinput = (document.getElementById("player-input")?.value || "").trim();
  const hasScene = window.sceneHistory.some(e => e.type === "scene");
  if (hasScene && !pinput) {
    alert("プレイヤー行動を入力してください");
    return;
  }

  window.cancelRequested = false;
  showLoadingModal(true);

  // システムプロンプト
  let systemText = "あなたはTRPGのゲームマスターです。背景黒が前提の装飾のタグを使って構いません。";
  const msgs = [{ role: "system", content: systemText }];

  // シナリオ概要 + パーティ情報
  if (window.currentScenario) {
    const wd = window.currentScenario.wizardData || {};
    const summ = wd.scenarioSummary || "(概要なし)";
    msgs.push({ role: "user", content: "シナリオ概要:" + summ });

    const charData = await loadCharacterDataFromIndexedDB();
    const party = charData.filter(e => e.group === "Party");
    const ptxt = buildPartyInsertionText(party);
    msgs.push({ role: "user", content: ptxt });
  }

  // 履歴
  window.sceneHistory.forEach(e => {
    if (e.type === "scene") {
      msgs.push({ role: "assistant", content: e.content });
    } else if (e.type === "action") {
      msgs.push({ role: "user", content: "プレイヤーの行動:" + e.content });
    }
  });

  // 今回の行動
  if (pinput) {
    msgs.push({ role: "user", content: "プレイヤーの行動:" + pinput });
  }

  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: msgs
      }),
      signal
    });
    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    const data = await resp.json();
    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    if (data.error) throw new Error(data.error.message);

    const nextScene = data.choices[0].message.content || "";

    // (1) 行動を履歴に追加
    if (pinput) {
      const act = {
        scenarioId: window.currentScenarioId || 0,
        type: "action",
        content: pinput,
        sceneId: null
      };
      const actId = await addSceneEntry(act);
      window.sceneHistory.push({ entryId: actId, type: "action", content: pinput, prompt: "" });
      document.getElementById("player-input").value = "";
    }

    // (2) 新シーンを履歴に追加
    const sid = "scene_" + Date.now();
    // まずテキストを先に登録
    const se = {
      scenarioId: window.currentScenarioId || 0,
      type: "scene",
      sceneId: sid,
      content: nextScene,
      prompt: "" // 画像プロンプトは後で設定
    };
    const newSid = await addSceneEntry(se);
    const newSceneEntry = {
      entryId: newSid,
      type: "scene",
      sceneId: sid,
      content: nextScene,
      prompt: ""
    };
    window.sceneHistory.push(newSceneEntry);

    // (2.5) シーンの画像promptをfunction callingで生成
    const imagePromptText = await generateImagePromptFromScene(nextScene);
    if (imagePromptText) {
      // DB更新
      newSceneEntry.prompt = imagePromptText;
      const updateRec = {
        entryId: newSid,
        scenarioId: window.currentScenarioId || 0,
        type: "scene",
        sceneId: sid,
        content: nextScene,
        prompt: imagePromptText
      };
      await updateSceneEntry(updateRec);
    }

    // (3) シナリオ更新
    if (window.currentScenario) {
      await updateScenario({
        ...window.currentScenario,
        updatedAt: new Date().toISOString()
      });
    }

    // (4) セクション達成チェック
    await checkSectionClearViaChatGPT(pinput, nextScene);

    // 再描画
    updateSceneHistory();
    showLastScene();

  } catch (e) {
    if (e.name === "AbortError") {
      console.warn("シーン取得キャンセル");
    } else {
      console.error(e);
      alert("シーン取得失敗:" + e.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/** シーン本文から画像用プロンプトをfunction callingで生成(ダミー実装) */
async function generateImagePromptFromScene(sceneText) {
  console.log("sceneTextシーンテキスト", sceneText);
  if (!window.apiKey) return "";
  try {
    const systemMsg = {
      role: "system",
      content: "あなたは画像生成のための短い英語プロンプトを作る関数を呼び出すアシスタントです。"
    };
    const userMsg = {
      role: "user",
      content: `
        以下のシーン文章をもとに、イラストを生成するための英語メインのキーワード列を作ってください。
        ただし、説明文や文章体は禁止。キーワードの羅列にしてください。
        NGワード: 'goblin'
        シーン:
        ${sceneText}
      `
    };

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4-0613",
        messages: [systemMsg, userMsg],
        temperature: 0.7
        // function_call: ...
      })
    });
    const data = await resp.json();
    if (data.error) {
      console.warn("imagePrompt function callingエラー:", data.error);
      return "";
    }
    const result = (data.choices[0].message.content || "").trim();
    console.log("resultシーンテキスト", result);

    return result;
  } catch (e) {
    console.error("generateImagePromptFromScene失敗:", e);
    return "";
  }
}

/** セクション達成チェック */
async function checkSectionClearViaChatGPT(latestAction, latestScene) {
  const wd = window.currentScenario?.wizardData;
  if (!wd || !wd.sections) return;
  const sorted = wd.sections.slice().sort((a, b) => a.number - b.number);
  const firstUncleared = sorted.find(s => !s.cleared);
  if (!firstUncleared) {
    return; // 全部クリア済
  }

  const conditionText = decompressCondition(firstUncleared.conditionZipped);

  const scenarioSummary = wd.scenarioSummary || "(概要なし)";
  const messages = [
    {
      role: "system",
      content: "あなたはTRPGゲームマスターのサポートAIです。回答はYESまたはNOのみでお願いします。"
    },
    {
      role: "user",
      content: `
シナリオ概要:
${scenarioSummary}

達成条件:
「${conditionText}」

最新の行動とシーン:
(行動) ${latestAction}
(シーン) ${latestScene}

この達成条件は、今の行動やシーン内容から見て、既に満たされましたか？
YESかNOのみで答えてください。判断が難しい時はYESにしてください。
`
    }
  ];

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.0
      })
    });
    const data = await response.json();
    if (data.error) throw new Error(data.error.message);

    const answer = (data.choices[0].message.content || "").trim().toUpperCase();
    console.log("セクション判定GPT回答=", answer);

    if (answer.startsWith("YES")) {
      firstUncleared.cleared = true;
      window.currentScenario.wizardData.sections = wd.sections;
      await updateScenario(window.currentScenario);
      alert(`セクション${firstUncleared.number}をクリアしました。`);
    } else {
      console.log("未達成と判定されました。");
    }
  } catch (err) {
    console.error("セクション判定API失敗:", err);
  }
}

/** シーン履歴を表示 */
function updateSceneHistory() {
  const his = document.getElementById("scene-history");
  if (!his) return;
  his.innerHTML = "";

  // 未クリアセクションの最小番号
  const wd = window.currentScenario?.wizardData;
  let sections = [];
  if (wd && wd.sections) {
    sections = wd.sections;
  }
  const sorted = [...sections].sort((a, b) => a.number - b.number);
  const firstUncleared = sorted.find(s => !s.cleared);

  if (!firstUncleared && sorted.length > 0) {
    // 全クリア
    const tile = document.createElement("div");
    tile.className = "history-tile";
    tile.textContent = "シナリオ達成";
    his.appendChild(tile);
  } else if (sorted.length > 0) {
    // クリア済み部分だけ表示
    for (const s of sorted) {
      if (s.number < (firstUncleared?.number || 99999)) {
        const t = document.createElement("div");
        t.className = "history-tile";
        t.textContent = `セクション${s.number} (クリア済み)`;
        his.appendChild(t);
      } else if (s.number === firstUncleared.number) {
        const t = document.createElement("div");
        t.className = "history-tile";
        t.textContent = `セクション${s.number} (未クリア)`;
        his.appendChild(t);
      } else {
        // それより先は非表示
      }
    }
  }

  // 最後のシーンを除く行動/シーン/画像
  const lastScene = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  const skipIds = [];
  if (lastScene) {
    skipIds.push(lastScene.entryId);
    window.sceneHistory.forEach(x => {
      if (x.type === "image" && x.sceneId === lastScene.sceneId) {
        skipIds.push(x.entryId);
      }
    });
  }
  const showEntries = window.sceneHistory
    .filter(e => !skipIds.includes(e.entryId))
    .sort((a, b) => a.entryId - b.entryId);

  for (const e of showEntries) {
    if (e.type === "scene") {
      const tile = document.createElement("div");
      tile.className = "history-tile";

      const delBtn = document.createElement("button");
      delBtn.textContent = "削除";
      delBtn.style.marginBottom = "5px";
      delBtn.addEventListener("click", async () => {
        const removeIds = [e.entryId];
        window.sceneHistory.forEach(x => {
          if (x.type === "image" && x.sceneId === e.sceneId) {
            removeIds.push(x.entryId);
          }
        });
        for (const rid of removeIds) {
          await deleteSceneEntry(rid);
        }
        window.sceneHistory = window.sceneHistory.filter(x => !removeIds.includes(x.entryId));
        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(delBtn);

      const st = document.createElement("p");
      st.className = "scene-text";
      st.setAttribute("contenteditable", window.apiKey ? "true" : "false");
      st.innerHTML = DOMPurify.sanitize(e.content);
      st.addEventListener("blur", async () => {
        if (!window.apiKey) return;
        e.content = st.innerHTML.trim();
        const up = {
          entryId: e.entryId,
          scenarioId: window.currentScenarioId || 0,
          type: "scene",
          sceneId: e.sceneId,
          content: e.content,
          prompt: e.prompt || ""
        };
        await updateSceneEntry(up);
      });
      tile.appendChild(st);

      his.appendChild(tile);

    } else if (e.type === "action") {
      const tile = document.createElement("div");
      tile.className = "history-tile";

      const delBtn = document.createElement("button");
      delBtn.textContent = "削除";
      delBtn.style.backgroundColor = "#f44336";
      delBtn.style.marginBottom = "5px";
      delBtn.addEventListener("click", async () => {
        await deleteSceneEntry(e.entryId);
        window.sceneHistory = window.sceneHistory.filter(x => x.entryId !== e.entryId);
        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(delBtn);

      const at = document.createElement("p");
      at.className = "action-text";
      at.setAttribute("contenteditable", window.apiKey ? "true" : "false");
      at.innerHTML = DOMPurify.sanitize(e.content);
      at.addEventListener("blur", async () => {
        if (!window.apiKey) return;
        e.content = at.innerHTML.trim();
        const up = {
          entryId: e.entryId,
          scenarioId: window.currentScenarioId || 0,
          type: "action",
          content: e.content
        };
        await updateSceneEntry(up);
      });
      tile.appendChild(at);

      his.appendChild(tile);

    } else if (e.type === "image") {
      const tile = document.createElement("div");
      tile.className = "history-tile";

      const img = document.createElement("img");
      img.src = e.dataUrl;
      img.alt = "生成画像";
      img.style.maxWidth = "100%";
      tile.appendChild(img);

      const reBtn = document.createElement("button");
      reBtn.textContent = "再生成";
      reBtn.addEventListener("click", () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(e);
        if (idx >= 0) {
          openImagePromptModal(e.prompt, idx);
        }
      });
      tile.appendChild(reBtn);

      const delBtn = document.createElement("button");
      delBtn.textContent = "画像だけ削除";
      delBtn.addEventListener("click", async () => {
        if (!window.apiKey) return;
        await deleteSceneEntry(e.entryId);
        window.sceneHistory = window.sceneHistory.filter(x => x.entryId !== e.entryId);
        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(delBtn);

      his.appendChild(tile);
    }
  }
  his.scrollTop = his.scrollHeight;
}

/** 最新シーンを表示 */
function showLastScene() {
  const storyDiv = document.getElementById("story");
  const lastSceneImagesDiv = document.getElementById("last-scene-images");
  if (!storyDiv || !lastSceneImagesDiv) return;

  const nextSceneBtn = document.getElementById("next-scene");
  const playerInput = document.getElementById("player-input");
  const playerActionLabel = document.getElementById("player-action");

  const lastScene = [...window.sceneHistory].reverse().find(e => e.type === "scene");

  if (lastScene) {
    storyDiv.innerHTML = "";
    const st = document.createElement("p");
    st.className = "scene-text";
    st.setAttribute("contenteditable", window.apiKey ? "true" : "false");
    st.innerHTML = DOMPurify.sanitize(lastScene.content, DOMPURIFY_CONFIG);
    st.addEventListener("blur", async () => {
      if (!window.apiKey) return;
      lastScene.content = st.innerHTML.trim();
      const up = {
        entryId: lastScene.entryId,
        scenarioId: window.currentScenarioId || 0,
        type: "scene",
        sceneId: lastScene.sceneId,
        content: lastScene.content,
        prompt: lastScene.prompt || ""
      };
      await updateSceneEntry(up);
    });
    storyDiv.appendChild(st);

    lastSceneImagesDiv.innerHTML = "";
    const images = window.sceneHistory.filter(x => x.type === "image" && x.sceneId === lastScene.sceneId);
    images.forEach(imgEntry => {
      const c = document.createElement("div");
      c.style.marginBottom = "10px";

      const i = document.createElement("img");
      i.src = imgEntry.dataUrl;
      i.alt = "シーン画像";
      i.style.maxWidth = "100%";
      c.appendChild(i);

      const reBtn = document.createElement("button");
      reBtn.textContent = "再生成";
      reBtn.addEventListener("click", () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(imgEntry);
        if (idx >= 0) {
          openImagePromptModal(imgEntry.prompt, idx);
        }
      });
      c.appendChild(reBtn);

      const dBtn = document.createElement("button");
      dBtn.textContent = "画像削除";
      dBtn.addEventListener("click", async () => {
        if (!window.apiKey) return;
        await deleteSceneEntry(imgEntry.entryId);
        window.sceneHistory = window.sceneHistory.filter(x => x.entryId !== imgEntry.entryId);
        showLastScene();
        updateSceneHistory();
      });
      c.appendChild(dBtn);

      lastSceneImagesDiv.appendChild(c);
    });

    if (window.apiKey) {
      nextSceneBtn.style.display = "inline-block";
      playerInput.style.display = "inline-block";
      playerActionLabel.textContent = "プレイヤーがどんな行動を？";
    } else {
      nextSceneBtn.style.display = "none";
      playerInput.style.display = "none";
      playerActionLabel.textContent = "";
    }
  } else {
    // シーンが無い場合
    storyDiv.innerHTML = "";
    lastSceneImagesDiv.innerHTML = "";

    if (window.apiKey) {
      nextSceneBtn.style.display = "inline-block";
      playerInput.style.display = "block";
      playerActionLabel.textContent = "最初のシーンを作るため行動を入力してください。";
    } else {
      nextSceneBtn.style.display = "none";
      playerInput.style.display = "none";
      playerActionLabel.textContent = "";
    }
  }
}

/** パーティ情報の文章 */
function buildPartyInsertionText(party) {
  let txt = "【パーティ編成情報】\n";
  const ava = party.find(e => e.role === "avatar");
  if (ava) {
    txt += `アバター: ${ava.name}\n(実プレイヤー)\n\n`;
  }
  const pt = party.filter(e => e.role === "partner");
  if (pt.length > 0) {
    txt += "パートナー:\n";
    pt.forEach(p => txt += " - " + p.name + "\n");
    txt += "\n";
  }
  const others = party.filter(e => !e.role || e.role === "none");
  if (others.length > 0) {
    const cset = others.filter(x => x.type === "キャラクター");
    const mset = others.filter(x => x.type === "モンスター");
    const iset = others.filter(x => x.type === "アイテム");
    if (cset.length > 0) {
      txt += "◆キャラクター\n";
      cset.forEach(c => txt += " - " + c.name + "\n");
      txt += "\n";
    }
    if (mset.length > 0) {
      txt += "◆モンスター\n";
      mset.forEach(m => txt += " - " + m.name + "\n");
      txt += "\n";
    }
    if (iset.length > 0) {
      txt += "◆アイテム\n";
      iset.forEach(i => txt += " - " + i.name + "\n");
      txt += "\n";
    }
  }
  txt += "以上を踏まえて、アバターは実プレイヤー、パートナーは味方NPCとして扱ってください。";
  return txt;
}

/** pakoで解凍 */
function decompressCondition(zippedBase64) {
  if (!zippedBase64) return "(不明)";
  try {
    const bin = atob(zippedBase64);
    const uint8 = new Uint8Array([...bin].map(c => c.charCodeAt(0)));
    const inf = pako.inflate(uint8);
    return new TextDecoder().decode(inf);
  } catch (e) {
    console.error("decompress失敗:", e);
    return "(解凍エラー)";
  }
}

/** ローディングモーダル表示 */
function showLoadingModal(show) {
  const m = document.getElementById("loading-modal");
  if (!m) return;
  m.style.display = show ? "flex" : "none";
}

/** リクエストキャンセル */
function onCancelFetch() {
  window.cancelRequested = true;
  if (window.currentRequestController) {
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}


/* --------------------------------------------
   画像生成ボタン：自動生成(現シーンから)
   1) 今のシーンにpromptがあれば、それを使う
   2) 無ければ「生成する為のプロンプトがありません」を表示
   3) 生成時は characterCreate.jsのgenerateCharacterImage の仕様に準拠
-------------------------------------------- */
async function generateImageFromCurrentScenePrompt() {
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  if (!lastSceneEntry) {
    alert("まだシーンがありません。");
    return;
  }
  if (!lastSceneEntry.prompt) {
    alert("生成する為のプロンプトがありません");
    return;
  }
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }

  // ボディ文言は "Now generate the next anime wide image.\n↓↓↓↓\n" + prompt
  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓\n" +
    lastSceneEntry.prompt;

  window.cancelRequested = false;
  showLoadingModal(true);

  try {
    const resp = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1792x1024",
        response_format: "b64_json"
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // 新しいimage entry追加
    const newEntry = {
      scenarioId: window.currentScenarioId || 0,
      type: "image",
      sceneId: lastSceneEntry.sceneId,
      content: "", // 画像にテキストなし
      dataUrl,
      // 画像生成時点のpromptを記録しておく
      prompt: lastSceneEntry.prompt
    };
    const newId = await addSceneEntry(newEntry);
    window.sceneHistory.push({
      entryId: newId,
      type: "image",
      sceneId: lastSceneEntry.sceneId,
      content: "",
      dataUrl,
      prompt: lastSceneEntry.prompt
    });

    // 表示更新
    updateSceneHistory();
    showLastScene();

  } catch (err) {
    console.error("画像生成失敗:", err);
    alert("画像生成に失敗:\n" + err.message);
  } finally {
    showLoadingModal(false);
  }
}

/** カスタム画像生成モーダルを開く */
function openImagePromptModal(scenePrompt = "", index = null) {
  window.editingImageEntry = null;
  if (index !== null) {
    // 既存画像の再生成
    window.editingImageEntry = { index };
    const entry = window.sceneHistory[index];
    if (entry && entry.type === "image") {
      scenePrompt = entry.prompt;
    }
  } else {
    // 新規
    const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
    if (lastSceneEntry && lastSceneEntry.prompt) {
      scenePrompt = lastSceneEntry.prompt;
    } else {
      scenePrompt = "";
    }
  }

  document.getElementById("image-custom-prompt").value = scenePrompt;
  document.getElementById("image-prompt-modal").style.display = "flex";
}

/** カスタム画像生成モーダルを閉じる */
function closeImagePromptModal() {
  document.getElementById("image-prompt-modal").style.display = "none";
  window.editingImageEntry = null;
}

/** カスタム画像生成ボタン押下 */
async function onCustomImageGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  const userPromptText = document.getElementById("image-custom-prompt").value.trim();
  if (!userPromptText) {
    alert("プロンプトが空です。");
    return;
  }

  // 前提文 + userPromptText
  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓\n" +
    userPromptText;

  showLoadingModal(true);
  closeImagePromptModal();
  try {
    const resp = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1792x1024",
        response_format: "b64_json"
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    if (window.editingImageEntry) {
      // 既存画像を再生成
      const idx = window.editingImageEntry.index;
      const entry = window.sceneHistory[idx];
      if (entry && entry.type === "image") {
        entry.dataUrl = dataUrl;
        entry.prompt = userPromptText;
        // DB更新
        const upRec = {
          entryId: entry.entryId,
          scenarioId: window.currentScenarioId || 0,
          type: "image",
          sceneId: entry.sceneId,
          content: "",
          dataUrl,
          prompt: userPromptText
        };
        await updateSceneEntry(upRec);
      }
    } else {
      // 新規画像
      const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
      if (!lastSceneEntry) {
        alert("シーンがありません。");
        showLoadingModal(false);
        return;
      }
      const newRec = {
        scenarioId: window.currentScenarioId || 0,
        type: "image",
        sceneId: lastSceneEntry.sceneId,
        content: "",
        dataUrl,
        prompt: userPromptText
      };
      const newId = await addSceneEntry(newRec);
      window.sceneHistory.push({
        entryId: newId,
        type: "image",
        sceneId: lastSceneEntry.sceneId,
        content: "",
        dataUrl,
        prompt: userPromptText
      });
    }

    updateSceneHistory();
    showLastScene();
  } catch (e) {
    console.error("カスタム画像生成失敗:", e);
    alert("カスタム画像生成失敗:\n" + e.message);
  } finally {
    showLoadingModal(false);
  }
}


/* -------------------------------------------
   イベントリスナー (scenario.html 内) で呼ばれる
-------------------------------------------*/
window.generateImageFromCurrentScene = generateImageFromCurrentScenePrompt;
window.onCustomImageGenerate = onCustomImageGenerate;

--- 
