貴方は会社の中で一番のエンジニアです。
・
・
・
・
・
以上を実施し、編集しないファイルを除き完全なコードを下さい。
--------
bookshelf.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>本棚</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <!-- 背景管理用スクリプト（編集不要） -->
  <script src="js/background.js"></script>
  <script src="js/common.js"></script>
</head>

<body>
  <!-- メニューに戻るボタン -->
  <button id="back-to-menu">メニューに戻る</button>

  <!-- 背景を変更するボタン -->
  <button id="change-bg-button">背景を変更する</button>

  <!-- ▼ 背景選択モーダル -->
  <div id="bg-modal" class="modal">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <div class="c-flexbox">
        <button id="bg-none-button" class="btn-secondary">背景無し</button>
        <button id="bg-generate-button">生成する</button>
      </div>
      <div class="c-flexbox">
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>
  </div>
  <div id="bg-generate-modal" class="modal">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">
    <h1>本棚</h1>
    <p style="text-align:center;">本棚に収納されたシナリオが表示されます。</p>

    <!-- ▼ 「アップロード」ボタン＆隠しファイル入力 -->
    <div id="upload" style="display: flex; justify-content: right;align-items: end; width: 100%; margin: 10px auto;">
      <button>アップロード</button>
    </div>
    <input id="scenario-upload-input" type="file" accept=".zip" style="display: none;" />

    <!-- ▼ 棚とリストを左右に配置するラッパ -->
    <div style="display: flex; gap: 20px; flex-direction: column;">

      <!-- 1. 右スクロール可能な本棚 -->
      <div style="
          height: 250px;
          box-sizing: border-box;
          overflow: auto;
          flex: 1;
          padding-top: 45px;
          padding-bottom: 25px;
          overflow-x: auto;
          background-image:
            linear-gradient(
              180deg,
              #ffffff00 0%,
              #ffffff00 215px,
              rgb(0 0 0 / 0%) 237px,
              rgb(0 0 0 / 50%) 246px,
              rgb(255 173 105) 246px
            ),
            linear-gradient(
              180deg,
              #dd7f37 0%,
              rgb(233 168 104) 25px,
              rgb(0 0 0 / 62%) 25px,
              rgb(0 0 0 / 0%) 34px,
              rgb(194 113 73 / 0%) 20px
            ),
            linear-gradient(0, #b37417, #ffbb6f);
          white-space: nowrap;
        ">
        <div id="bookshelf-container" style="display: flex; flex-direction: row; gap: 7.5px; padding-left: 5px;"></div>
      </div>

      <!-- 2. リスト表示（本一覧） -->
      <div id="bookshelf-list-panel" style="
          min-height: 50vh;
          max-height: 60vh;
          overflow: auto;
        ">
        <div id="bookshelf-list-container"></div>
      </div>
    </div>
  </div>

  <!-- ▼ コピー確認用モーダル -->
  <div id="copy-scenario-modal" class="modal">
    <div class="modal-content">
      <h3>シナリオコピーの確認</h3>
      <p>このシナリオをコピーします。よろしいですか？</p>
      <div class="c-flexbox">
        <button id="copy-scenario-ok">OK</button>
        <button id="copy-scenario-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ▼ 削除確認用モーダル -->
  <div id="delete-scenario-modal" class="modal">
    <div class="modal-content">
      <h3>シナリオ削除の確認</h3>
      <p>このシナリオを削除します。よろしいですか？</p>
      <div class="c-flexbox">
        <button id="delete-scenario-ok">OK</button>
        <button id="delete-scenario-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ★ シナリオ取り込み確認用モーダル -->
  <div id="import-scenario-modal" class="modal">
    <div class="modal-content">
      <h3>シナリオを取り込みますか？</h3>
      <p>このURLからシナリオを読み込み、本棚に収納します。</p>
      <div class="c-flexbox">
        <button id="import-scenario-ok">OK</button>
        <button id="import-scenario-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ★ 追加: ダウンロード時の確認モーダル -->
  <div id="download-with-images-modal" class="modal">
    <div class="modal-content">
      <h3>ダウンロードの確認</h3>
      <p>画像を含めるとサイズが大きくなる可能性があります。<br>
        画像を含めたシナリオをダウンロードしますか？</p>
      <div class="c-flexbox">
        <button id="download-images-yes">画像付き</button>
        <button id="download-images-no">画像なし</button>
        <button id="download-images-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ★ シナリオ編集モーダル -->
  <div id="edit-scenario-modal" class="modal">
    <div class="modal-content edit-scenario-modal-content">
      <h3>本編集</h3>

      <!-- タイトル入力行 -->
      <div class="edit-row">
        <label for="edit-scenario-title">タイトル</label>
        <input type="text" id="edit-scenario-title" />
      </div>

      <!-- 装丁色入力行 -->
      <div class="edit-row">
        <div class="edit-row">
          <label for="edit-scenario-covercolor1">装丁色1</label>
          <input type="color" id="edit-scenario-covercolor1" />
        </div>
        <div class="edit-row">
          <label for="edit-scenario-covercolor2">装丁色2</label>
          <input type="color" id="edit-scenario-covercolor2" />
        </div>
      </div>

      <!-- 例）シナリオ編集モーダル内 -->
      <div class="edit-row">
        <label>装丁画像</label>
      </div>
      <div class="edit-row">
        <div class="chips-container" id="cover-image-choice">
          <div class="chip chip-mini" data-value="on">あり</div>
          <div class="chip chip-mini" data-value="off">なし</div>
        </div>
      </div>


      <!-- ボタン -->
      <div class="modal-buttons">
        <button id="edit-scenario-ok">OK</button>
        <button id="edit-scenario-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ▼ スクリプト読み込み -->
  <!-- JSZip（ZIP圧縮ライブラリ） -->
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>

  <script src="js/indexedDB.js"></script>
  <script src="js/bookshelfPage.js"></script>
  <script>
    window.addEventListener("DOMContentLoaded", async () => {
      await initIndexedDB();
      await initBackground("bookshelf");
      initBookshelfPage();      // 本棚ページ初期化
      setupScenarioUpload();    // シナリオアップロード処理のセットアップ
    });
  </script>
</body>

</html>---- 
characterCreate.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>エレメント作成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- 背景管理用スクリプト -->
  <script src="js/background.js"></script>
  <script src="js/common.js"></script>
</head>

<body>
  <!-- 戻るボタン -->
  <button id="back-to-menu">一覧に戻る</button>

  <!-- 背景を変更するボタン -->
  <button id="change-bg-button">
    背景を変更する
  </button>
  <!-- ▼ 背景選択モーダル -->
  <div id="bg-modal" class="modal">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <div class="c-flexbox">
        <button id="bg-none-button" class="btn-secondary">背景無し</button>
        <button id="bg-generate-button">生成する</button>
      </div>
      <div class="c-flexbox">
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>
  </div>
  <div id="bg-generate-modal" class="modal">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">
    <h1>エレメント作成</h1>
    <!-- ガチャボタンのみ残し、ガチャ箱の移動関連ボタンは削除 -->
    <button id="gacha-btn" style="margin:10px;">エレメントガチャ</button>
    <!-- 「すべて見る」ボタン（最初に生成した時のみ表示する） -->
    <button id="see-all-btn" style="margin:10px; display:none;">
      すべて見る
    </button>

    <!-- ガチャ生成中モーダル -->
    <div id="gacha-modal" class="modal">
      <div class="modal-content">
        <p>生成中...</p>
        <button id="cancel-gacha-btn">キャンセル</button>
      </div>
    </div>

    <!-- エレメントのジャンル設定モーダル -->
    <div id="element-genre-modal" class="modal">
      <div class="modal-content">
        <h2>エレメントのジャンルを設定</h2>
        <p style="font-size: 0.9em; margin-bottom: 10px;">
          下記の軸を選択してください。<br>
          一度選択すると、ストレージに保存され次回以降も復元されます。
        </p>

        <!-- 舞台（複数可） -->
        <div style="margin-top:10px;">
          <strong>舞台（複数選択可）</strong><br>
          <div id="stage-chips-container" class="chips-container">
            <!-- 例：ファンタジー, SF, 歴史・時代劇... -->
          </div>
        </div>

        <!-- 雰囲気（単一） -->
        <div style="margin-top:10px;">
          <strong>雰囲気（単一選択）</strong><br>
          <div id="mood-chips-container" class="chips-container">
            <!-- 例：ライト/ポップ, 中間/バランス, ダーク/シリアス -->
          </div>
        </div>

        <div style="margin-top:20px;">
          <button id="genre-setting-ok-btn" style="margin-right:10px;">OK</button>
          <button id="genre-setting-cancel-btn">キャンセル</button>
        </div>
      </div>
    </div>

    <!-- 「その他」登録用モーダル -->
    <div id="other-input-modal" class="modal">
      <div class="modal-content" style="max-width:400px;">
        <h2>「その他」を追加</h2>
        <p id="other-input-modal-category" style="font-weight:bold;"></p>
        <textarea id="other-input-text" rows="3" placeholder="新しく追加する候補"></textarea>
        <div style="margin-top:10px;">
          <button id="other-generate-btn">生成</button>
          <button id="other-ok-btn">OK</button>
          <button id="other-cancel-btn">キャンセル</button>
        </div>
        <p style="font-size:0.8em; color:#666; margin-top:10px;">
          ※「生成」ボタンを押すと、現状の候補にない新しい案をChatGPTで生成し、<br>
          その結果を上のテキストボックスに自動入力します。
        </p>
      </div>
    </div>

    <!-- 「削除」確認モーダル -->
    <div id="delete-confirm-modal" class="modal">
      <div class="modal-content">
        <p>この選択肢を削除しますが、よろしいですか？</p>
        <button id="delete-confirm-ok">OK</button>
        <button id="delete-confirm-cancel">キャンセル</button>
      </div>
    </div>

    <!-- 選んだジャンルの出力例 -->
    <div style="margin-top:20px;">
      <p><strong>選んだジャンルの出力例：</strong></p>
      <p id="genre-result-text" style="font-weight:bold; white-space:pre-wrap;"></p>
    </div>

    <!-- 画面上に表示する「最後に生成したカード一覧」 -->
    <div id="card-container"></div>

    <!-- 画像プレビュー用モーダル -->
    <div id="card-image-preview-modal" class="modal">
      <div class="modal-content">
        <img id="card-preview-img" src="" alt="card image" style="max-width: 95vw;max-height: 95vh;" />
        <button id="card-preview-close-btn" style="margin-top:10px;">閉じる</button>
      </div>
    </div>
  </div>

  <!-- IndexedDBなどの共通スクリプト -->
  <script src="js/indexedDB.js"></script>
  <!-- gachaCore.js -->
  <script src="js/gachaCore.js"></script>
  <!-- characterCreate.js（改変版） -->
  <script src="js/characterCreate.js"></script>

  <script>
    // ページ読み込み時にDB初期化 & 背景適用
    window.addEventListener("load", async () => {
      await initIndexedDB();
      // 背景初期化(選択済みがあれば適用)
      await initBackground("characterCreate");
    });

    // メニューに戻るボタン
    document.getElementById("back-to-menu").addEventListener("click", function () {
      window.location.href = "index.html";
    });
  </script>
</body>

</html>---- 
index.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>one and only</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <!-- 黒背景 + 白文字ベースのCSS -->
  <link rel="stylesheet" href="styles.css" />

  <!-- DOMPurify(カード表示などで使用) -->
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- 背景管理用スクリプト（編集不要） -->
  <script src="js/background.js"></script>
  <script src="js/common.js"></script>
</head>

<body>

  <!-- 背景を変更するボタン -->
  <button id="change-bg-button">
    背景を変更する
  </button>
  <!-- ▼ 背景選択モーダル -->
  <div id="bg-modal" class="modal">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <div class="c-flexbox">
        <button id="bg-none-button" class="btn-secondary">背景無し</button>
        <button id="bg-generate-button">生成する</button>
      </div>
      <div class="c-flexbox">
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>
  </div>
  <div id="bg-generate-modal" class="modal">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">
    <h1 style="font-size:3rem;letter-spacing:-0.03rem;margin-bottom: 70px;margin-top: 80px;">one and only
      <div style="font-size: 0.8rem;font-family: serif;">
        <span style="letter-spacing:0.75rem;white-space: nowrap;">ー 選択の先に ー</span>
      </div>
    </h1>

    <!-- APIキー関連 -->
    <div class="api-key-section" style="margin-top:20px;">
      <!-- BGM停止/再生ボタン -->
      <button id="stop-bgm-button"></button>
      <!-- すでにキーがあれば「キー設定済」、なければ「APIキー設定」を表示 -->
      <button id="set-api-key-button" style="margin-bottom: 0;">
        APIキー設定
      </button>
    </div>

    <!-- APIキー設定用モーダル -->
    <div id="api-key-modal" class="modal">
      <div class="modal-content" style="padding: 20px;">
        <h2>APIキー設定</h2>
        <input type="text" id="api-key-input" placeholder="APIキーを入力" style="margin-bottom: 20px;width:80%;" />
        <div style="display:flex;justify-content:center;gap:20px;">
          <button id="api-key-ok-button">OK</button>
          <button id="api-key-clear-button" style="background-color:#f44336;">クリア</button>
        </div>
      </div>
    </div>

    <div class="element-section">
      <button id="character-create">ガチャ</button>
      <button id="party-list">パーティ</button>
      <button id="clear-character-btn" style="background-color:#f44336;display: none;">全エレメントをクリア</button>
    </div>
    <div class="element-section">
      <button id="you-avatar-btn">あなたの分身</button>
    </div>
    <div class="element-section">
      <button id="show-warehouse-btn">倉庫</button>
    </div>

    <!-- 新たに本棚ボタン → bookshelf.htmlへ -->
    <div class="element-section">
      <button id="show-bookshelf-btn">本棚</button>
    </div>

    <!-- 新しいシナリオを始めるボタン -->
    <div class="scenario-wizard-section">
      <button id="start-new-scenario-button">
        新しいシナリオを始める
      </button>
    </div>

    <!-- ▼ アコーディオン構造 -->
    <div class="accordion">
      <!-- ヘッダー部分 -->
      <div class="accordion-header" id="ongoing-scenarios-header">
        <div>進行中のシナリオ一覧</div>
        <div style="position: absolute; height: 100%; right: 0; top: 0; box-sizing: border-box;">
          <label for="show-hidden-scenarios" style="display: flex; align-items: center; justify-content: left;height: 100%; padding-right: 20px;">
            <input type="checkbox" id="show-hidden-scenarios" />
            非表示シナリオ
          </label>
        </div>
      </div>

      <!-- コンテンツ部分 -->
      <div class="accordion-content" id="ongoing-scenarios-content">
        <!-- リスト表示コンテナ -->
        <div id="scenario-list-container"></div>
        <!-- 0件時メッセージ -->
        <div id="no-scenarios-message" style="display:none;">
          進行中のシナリオはありません。
        </div>
      </div>
    </div>
    <!-- ▲ アコーディオンここまで -->
  </div>

  <!-- シナリオ削除用の確認モーダル -->
  <div id="delete-scenario-modal" class="modal">
    <div class="modal-content">
      <h3>シナリオ削除の確認</h3>
      <p>このシナリオを削除します。よろしいですか？</p>
      <div class="c-flexbox">
        <button id="delete-scenario-ok">OK</button>
        <button id="delete-scenario-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- ▼ エクスポート/インポート関連 -->
  <div class="c-flexbox">
    <button id="export-metadata-button">メタデータZIPエクスポート</button>
    <button id="export-images-button" style="margin-left:30px;">画像ZIPエクスポート</button>
  </div>
  <div class="c-flexbox">
    <button id="import-metadata-button">メタデータZIPインポート</button>
    <input type="file" id="import-metadata-file" accept=".zip" style="display:none;" />
    <button id="import-images-button" style="margin-left:30px;">画像ZIPインポート</button>
    <input type="file" id="import-images-file" accept=".zip" style="display:none;" />
  </div>

  <!-- BGM関連 -->
  <audio id="bgm" src="main-back.mp3" loop></audio>

  <!-- ▼ 各種スクリプト読み込み -->
  <script src="js/indexedDB.js"></script>
  <script src="js/avatar.js"></script>
  <script src="js/menu.js"></script> <!-- ★ メニューJS: 差分更新ロジックなど -->
  <script src="js/warehouse.js"></script>

  <!-- exportImportMulti.js (ZIP入出力) -->
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
  <script src="js/exportImportMulti.js"></script>

  <script>
    // ページ初期処理
    function fadeInPlay(audio) {
      audio.volume = 0;
      audio.play().then(() => {
        const fadeInInterval = setInterval(() => {
          if (audio.volume < 1.0) {
            audio.volume = Math.min(audio.volume + 0.01, 1);
          } else {
            clearInterval(fadeInInterval);
          }
        }, 100);
      }).catch(err => {});
    }

    window.addEventListener("DOMContentLoaded", async () => {
      try {
        await initIndexedDB(); 
        initAvatar(); 
        await initBackground("index");
        initMenuPage(); // ← menu.js内の初期化
      } catch (e) {
        console.error("DB初期化エラー:", e);
      }

      const bgmAudio = document.getElementById("bgm");
      const stopBgmButton = document.getElementById("stop-bgm-button");

      if (!bgmAudio || !stopBgmButton) return;

      const isBgmStopped = localStorage.getItem("bgmStopped") === "true";

      if (!isBgmStopped) {
        fadeInPlay(bgmAudio);

        bgmAudio.addEventListener("playing", () => {
          document.removeEventListener("click", handleUserGesture);
        });

        function handleUserGesture() {
          if (bgmAudio.paused) {
            fadeInPlay(bgmAudio);
          }
        }
        document.addEventListener("click", handleUserGesture);
      }

      if (isBgmStopped) {
        stopBgmButton.innerHTML = `<div class="iconmoon icon-volume-mute2"></div>`;
        stopBgmButton.style.backgroundColor = "rgb(255,115,68)";
      } else {
        stopBgmButton.innerHTML = `<div class="iconmoon icon-volume-high"></div>`;
        stopBgmButton.style.backgroundColor = "#4caf50";
      }

      stopBgmButton.addEventListener("click", () => {
        if (bgmAudio.paused) {
          fadeInPlay(bgmAudio);
          localStorage.setItem("bgmStopped", "false");
          stopBgmButton.style.backgroundColor = "#4caf50";
          stopBgmButton.innerHTML = `<div class="iconmoon icon-volume-high"></div>`;
        } else {
          bgmAudio.pause();
          bgmAudio.currentTime = 0;
          localStorage.setItem("bgmStopped", "true");
          stopBgmButton.style.backgroundColor = "rgb(255,115,68)";
          stopBgmButton.innerHTML = `<div class="iconmoon icon-volume-mute2"></div>`;
        }
      });
    });
  </script>
</body>
</html>
---- 
partyCreate.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>パーティ編成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- 背景管理用スクリプト -->
  <script src="js/background.js"></script>
  <script src="js/common.js"></script>
</head>

<body>
  <!-- 戻るボタン -->
  <button id="back-to-menu">一覧に戻る</button>

  <!-- 背景を変更するボタン -->
  <button id="change-bg-button">
    背景を変更する
  </button>
  <!-- ▼ 背景選択モーダル -->
  <div id="bg-modal" class="modal">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <div class="c-flexbox">
        <button id="bg-none-button" class="btn-secondary">背景無し</button>
        <button id="bg-generate-button">生成する</button>
      </div>
      <div class="c-flexbox">
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>
  </div>
  <div id="bg-generate-modal" class="modal">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">

    <h1>パーティ編成</h1>

    <!-- パーティ名入力欄 -->
    <div>
      <label for="party-name-input">パーティ名：</label>
      <input type="text" id="party-name-input" placeholder="例: 勇者一行" style="margin-bottom:10px;" />
      <button id="save-party-name-btn">保存</button>
    </div>
    <div class="r-flexbox">

      <!-- 倉庫ボタン -->
      <button id="show-warehouse-btn">倉庫から持ってくる</button>
    </div>
    <!-- 選択モードボタン & 倉庫に戻すボタン -->
    <div class="l-flexbox">
      <button id="toggle-party-selection-mode-btn" >選択モード</button>
      <button id="move-selected-to-warehouse-btn" style="display:none;">
        選択したカードを倉庫に戻す
      </button>

    </div>

    <!-- ▼ プレイヤーの分身（アバター） -->
    <section style="margin-top:20px;">
      <h2>プレイヤーの分身（アバター）</h2>
      <p style="color:#EEE; font-size:14px;">
        ※ ここに配置できるのは1つだけ。複数設定された場合、自動で以前のアバター設定が解除されます。
      </p>
      <div id="avatar-card-container" style="display:flex; flex-wrap:wrap; gap:20px;"></div>
    </section>

    <!-- ▼ パートナー（複数可） -->
    <section style="margin-top:20px;">
      <h2>パートナー（複数可）</h2>
      <div id="partner-card-container" style="display:flex; flex-wrap:wrap; gap:20px;"></div>
    </section>

    <!-- ▼ その他パーティ枠 -->
    <section style="margin-top:20px;">
      <h2>その他パーティ枠</h2>
      <div id="party-card-container" style="display:flex; flex-wrap:wrap; gap:20px;"></div>
    </section>
  </div>
  <!-- ▼ スクリプト読み込み -->
  <script src="js/indexedDB.js"></script>
  <script src="js/partyCreate.js"></script>
  <script src="js/warehouse.js"></script>

  <!-- ページ読込時にDB初期化 → initPartyCreatePage() -->
  <script>
    window.addEventListener("DOMContentLoaded", async () => {
      try {
        await initIndexedDB();
        await initBackground("partyCreate");
        initPartyCreatePage();
      } catch (e) {
        console.error("DB初期化エラー:", e);
      }
    });
  </script>
</body>

</html>---- 
partyList.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>パーティ一覧</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- 背景管理用スクリプト -->
  <script src="js/background.js"></script>
  <script src="js/common.js"></script>
</head>

<body>
  <!-- 戻るボタン -->
  <button id="back-to-menu">一覧に戻る</button>

  <!-- 背景を変更するボタン -->
  <button id="change-bg-button">
    背景を変更する
  </button>
  <!-- ▼ 背景選択モーダル -->
  <div id="bg-modal" class="modal">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <div class="c-flexbox">
        <button id="bg-none-button" class="btn-secondary">背景無し</button>
        <button id="bg-generate-button">生成する</button>
      </div>
      <div class="c-flexbox">
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>
  </div>
  <div id="bg-generate-modal" class="modal">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">
    <h1>パーティ一覧</h1>
    <p style="margin-bottom:20px;">
      複数のパーティを作成して管理できます。<br>
      「カレントのパーティ」に設定すると、<br>
      以後の「パーティ編成」や「シナリオウィザード」画面でそれが使われます。
    </p>

    <div style="margin-bottom:20px;">
      <label for="new-party-name">新しいパーティ名:</label>
      <input type="text" id="new-party-name" placeholder="パーティ名..." />
      <button id="create-party-button">作成</button>
    </div>

    <div id="party-list-container" style="margin-bottom:30px;text-align: right;"></div>
  </div>

  <script src="js/indexedDB.js"></script>
  <script src="js/partyList.js"></script>

  <script>
    window.addEventListener("load", async () => {
      await initIndexedDB();
      await initBackground("partyList");
    });
  </script>
</body>

</html>---- 
scenario.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>シンプルTRPG</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js"></script>

  <!-- 背景管理スクリプト -->
  <script src="js/background.js"></script>
  <script src="js/common.js"></script>
</head>

<body>
  <!-- メニューに戻るボタン -->
  <button id="back-to-menu">メニューに戻る</button>

  <!-- 背景を変更するボタン -->
  <button id="change-bg-button">
    背景を変更する
  </button>
  <!-- ▼ 背景選択モーダル -->
  <div id="bg-modal" class="modal">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <div class="c-flexbox">
        <button id="bg-none-button" class="btn-secondary">背景無し</button>
        <button id="bg-generate-button">生成する</button>
      </div>
      <div class="c-flexbox">
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>
  </div>
  <div id="bg-generate-modal" class="modal">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>
  <!-- ▼ トークン調整ボタン -->
  <button id="token-adjust-button">
    トークン調整
  </button>
  <!-- トークン調整モーダル -->
  <div id="token-adjust-modal" class="modal">
    <div class="modal-content" style="max-width:500px;">
      <h2>英語データの生成</h2>
      <p id="token-adjust-message"></p>
      <button id="token-adjust-ok-button">OK</button>
      <button id="token-adjust-cancel-button">キャンセル</button>
      <p id="token-adjust-progress" style="margin-top:20px;white-space:pre;"></p>
    </div>
  </div>

  <!-- ネタバレボタン（目的達成型のみ表示） -->
  <!--button id="spoiler-button" style="display:none; background-color:#E91E63; margin-top:20px; float:right;">
    ネタバレ
  </button-->

  <!-- ネタバレモーダル -->
  <div id="spoiler-modal" class="modal">
    <div class="modal-content">
      <h2>クリア条件</h2>
      <p id="clear-condition-text" style="white-space:pre-wrap;"></p>
      <button id="close-spoiler-modal">閉じる</button>
    </div>
  </div>

  <div class="container">
    <!-- シーン履歴 -->
    <div id="scene-history" class="scene-history"></div>

    <!-- ゲーム画面セクション -->
    <div class="game-section" style="display:none;">
      <div id="story" style="margin-bottom:20px;"></div>
      <div id="last-scene-images" style="margin-bottom:20px;"></div>

      <!-- 画像生成ボタン -->
      <div class="r-flexbox">
        <button id="image-auto-generate-button">挿絵生成</button>
        <!--button id="image-prompt-modal-button">編集して生成(カスタム)</button-->
      </div>

      <div id="player-action">プレイヤーの行動を入力してください</div>
      <!-- 回答候補を生成ボタンとチェックボックス -->
      <div style="margin-top:10px;display: flex;">
        <button id="generate-action-candidates-button">回答候補を生成</button>
        <label style="margin-left:10px;display: flex;">
          <input type="checkbox" id="auto-generate-candidates-checkbox" />
          <p style="width: 100%;">自動的に生成する</p>
        </label>
      </div>
      <div id="action-candidates-container" style="margin-top:10px;"></div>

      <div id="action-candidates-container" style="margin-top:10px;"></div>

      <textarea id="player-input" rows="4" placeholder="プレイヤーの行動を入力..."></textarea>

      <div class="s-flexbox">
        <button id="next-scene">次のシーン</button>

        <!-- パーティーを確認ボタン -->
        <button id="show-party-button">パーティーを確認</button>
      </div>

    </div>
    <div class="c-flexbox">
      <!-- ▼ エンディング関連ボタン&モーダル（追加） -->
      <button id="ending-button" style="display:none;">エンディング</button>
      <button id="clear-ending-button" style="display:none;">クリア・エンディング</button>

    </div>

  </div>

  <!-- 全セクションを閲覧するボタン -->
  <button id="view-all-sections-button">全セクションを閲覧する</button>

  <!-- 全セクション表示モーダル -->
  <div id="all-sections-modal" class="modal">
    <div class="modal-content">
      <h2>全セクション一覧</h2>
      <div id="all-sections-content" style="white-space:pre-wrap; text-align:left;"></div>
      <button id="close-all-sections-modal" style="margin-top:10px;">閉じる</button>
    </div>
  </div>

  <!-- ローディングモーダル -->
  <div id="loading-modal" class="modal">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- カスタム画像生成モーダル -->
  <div id="image-prompt-modal" class="modal">
    <div class="modal-content" style="max-width:400px;">
      <p>画像生成のプロンプトを編集してください</p>
      <textarea id="image-custom-prompt" rows="5" style="width:100%;"></textarea>
      <div style="margin-top:10px;">
        <button id="image-custom-generate-button">生成</button>
        <button id="image-custom-cancel-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- カードプレビューモーダル -->
  <div id="card-preview-modal" class="modal">
    <div class="modal-content" style="max-width:400px;">
      <h2>新しいカード</h2>
      <div id="preview-card-container"></div>

      <div style="margin-top:10px;">
        <button id="add-to-gachabox-button">倉庫に追加</button>
        <button id="cancel-card-preview-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- パーティ表示用モーダル -->
  <div id="party-modal" class="modal">
    <div class="modal-content">
      <h2>パーティ確認</h2>
      <button id="close-party-modal">閉じる</button>
      <div id="party-modal-card-container"></div>
    </div>
  </div>

  <!-- 探索型の場合のみ表示される「カードを取得」ボタン -->
  <button id="get-card-button" style="display:none;">
    カードを取得する
  </button>

  <div id="ending-modal" class="modal">
    <div class="modal-content" style="padding: 10vw;">
      <h2 id="ending-modal-title"></h2>
      <div id="ending-modal-story" style="white-space:pre-wrap; text-align:left; margin-top:10px;"></div>
      <button id="ending-modal-close-button" style="margin-top:10px;">閉じる</button>
      <button id="ending-modal-regenerate-button" style="margin-top:10px;">再生成</button>
    </div>
  </div>
  <!-- ▲ エンディング関連ここまで -->

  <!-- スクリプト群 -->
  <script src="js/indexedDB.js"></script>
  <script src="js/scene.js"></script>
  <script src="js/main.js"></script>
  <script src="js/gachaCore.js"></script>
  <script src="js/scenarioPage.js"></script>

  <script>
    window.addEventListener("load", async () => {
      await initIndexedDB();
      await initBackground("scenario");
    });

    // ▼ 「編集して生成(カスタム)」ボタンをクリック → openImagePromptModal() 呼び出し
    window.addEventListener("DOMContentLoaded", () => {
      const customBtn = document.getElementById("image-prompt-modal-button");
      if (customBtn) {
        customBtn.addEventListener("click", () => {
          openImagePromptModal();
        });
      }
    });
    window.addEventListener('DOMContentLoaded', () => {
      const autoCbx = document.getElementById("auto-generate-candidates-checkbox");
      if (autoCbx) {
        // 初期状態読み込み
        autoCbx.checked = (localStorage.getItem("autoGenerateCandidates") === "true");

        // 変更時に保存
        autoCbx.addEventListener("change", () => {
          localStorage.setItem("autoGenerateCandidates", autoCbx.checked);
        });
      }
    });
  </script>
</body>

</html>---- 
scenarioWizard.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>新しいシナリオ作成ウィザード</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- ▼ 背景管理用スクリプト -->
  <script src="js/background.js"></script>
  <script src="js/common.js"></script>
</head>

<body>
  <!-- 戻るボタン -->
  <button id="back-to-menu">一覧に戻る</button>

  <!-- 背景を変更するボタン -->
  <button id="change-bg-button">背景を変更する</button>
  <!-- ▼ 背景選択モーダル -->
  <div id="bg-modal" class="modal">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>
      <div id="bg-stock-container" class="bg-stock-grid"></div>
      <div class="c-flexbox">
        <button id="bg-none-button" class="btn-secondary">背景無し</button>
        <button id="bg-generate-button">生成する</button>
      </div>
      <div class="c-flexbox">
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>
  </div>
  <div id="bg-generate-modal" class="modal">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <div class="container">
    <h1>シナリオ作成ウィザード</h1>

    <!-- ▼ ステップ0：パーティ選択 -->
    <!-- ステップ0：パーティ選択 -->
    <div id="wizard-step0" style="display:block;">
      <h2>ステップ0：パーティを選択してください</h2>
      <p style="margin-bottom:1rem;">
        以下のリストから一つだけ選択してください。カードが1枚以上入ったパーティのみが表示されます。<br>
        パーティが不要な場合は「パーティなし」を選んでください。
      </p>

      <!-- パーティ一覧を表示する領域 -->
      <div id="wizard-party-list" style="margin-bottom:20px;"></div>

      <!-- 次へボタン -->
      <div class="l-flexbox">
        <button id="go-wizard-step1-btn">次へ</button>
      </div>
    </div>

    <!-- ▲ ステップ0ここまで -->

    <!-- ステップ1：ジャンル選択 -->
    <div id="wizard-step1" style="display:none;">
      <div class="l-flexbox">
        <!-- ▼ 新しく追加する「戻る」ボタン -->
        <button id="back-to-step0-button">ステップ0に戻る</button>
      </div>

      <h2>ステップ1：ジャンルを選択</h2>
      <p style="font-size:0.9em; margin-bottom:10px;">
        ジャンルの軸を選択しますか？それともジャンルを自由入力しますか？
      </p>

      <div class="chips-container" id="wiz-genre-choice" style="margin-bottom:20px;">
        <div class="chip" id="choice-axis">選択して入力</div>
        <div class="chip" id="choice-free">自由入力</div>
      </div>

      <!-- 軸入力UI -->
      <div id="axis-input-group" style="opacity:0.5; pointer-events:none;">
        <div style="margin-top:10px;">
          <strong>舞台（複数選択可）</strong>
          <div id="wiz-stage-chips-container" class="chips-container"></div>
        </div>
        <div style="margin-top:10px;">
          <strong>テーマ（単一選択）</strong>
          <div id="wiz-theme-chips-container" class="chips-container"></div>
        </div>
        <div style="margin-top:10px;">
          <strong>雰囲気（単一選択）</strong>
          <div id="wiz-mood-chips-container" class="chips-container"></div>
        </div>
        <div style="margin-top:30px;">
          <p id="wiz-genre-result-text" style="border: 1px solid; padding: 10px; font-size: 1.2rem; background-color: #434343;"></p>
        </div>
      </div>

      <!-- 自由入力UI -->
      <div id="free-input-group" style="margin-top:10px; opacity:0.5; pointer-events:none;">
        <input type="text" id="free-genre-input" placeholder="自由入力ジャンル..." style="width: 100%;">
      </div>

      <div class="l-flexbox">
        <!-- 「次へ」ボタン -->
        <button id="go-step2-btn">次へ</button>
      </div>
      <!-- ▲ ステップ1ここまで -->
    </div>
    <!-- ステップ2：シナリオタイプ -->
    <div id="wizard-step2" style="display:none;">
      <div class="l-flexbox">
        <button id="back-to-step1-button">ステップ1に戻る</button>
      </div>

      <h2>ステップ2：シナリオタイプを選択</h2>

      <!-- ▼ 追加: パーティ表示 -->
      <p>
        選択したパーティ：
        <span id="selected-party-display" style="font-weight:bold; color:#2196F3;">(未選択)</span>
      </p>

      <p style="margin-bottom: 1rem;">
        選択したジャンル：
        <span id="selected-genre-display" style="font-weight:bold; color:#2196F3;">（未選択）</span>
      </p>

      <div class="l-flexbox">
        <button id="type-objective-btn">目的達成型</button>
        <button id="type-exploration-btn">探索型</button>
      </div>

      <p style="margin-top:10px;">
        ※ 目的達成型では、<strong>クリア条件</strong>が密かに生成されます。<br />
        ※ 探索型では、シーン中で<span style="text-decoration:underline;">カード(エレメント)取得</span>が可能になります。
      </p>
    </div>
    <!-- ▲ ステップ2ここまで -->

    <!-- シナリオ作成確認モーダル -->
    <div id="confirm-scenario-modal" class="modal">
      <div class="modal-content" style="max-width:500px;">
        <h3>シナリオ生成の確認</h3>
        <p id="confirm-party-text" style="white-space:pre-wrap;">パーティ: (未選択)</p>
        <p id="confirm-genre-type-text" style="white-space:pre-wrap;"></p>
        <p>この条件でシナリオを作成します。よろしいですか？</p>
        <div class="c-flexbox">
          <button id="confirm-scenario-ok">OK</button>
          <button id="confirm-scenario-cancel">キャンセル</button>
        </div>
      </div>
    </div>

    <!-- ステップ3：最終確認(シナリオ要約表示) -->
    <div id="wizard-step3" style="display:none;">
      <h2>ステップ3：シナリオ要約</h2>
      <div id="scenario-summary" style="border:1px solid #ccc; padding:10px; margin-bottom:10px;"></div>

      <div class="c-flexbox">
        <button id="back-to-step2-button" style="margin-right:10px;">ステップ2に戻る</button>
        <button id="start-scenario-button" style="background-color:#4CAF50;">このシナリオで始める</button>
      </div>
    </div>
    <!-- ▲ ステップ3ここまで -->

  </div><!-- /.container -->

  <!-- ChatGPT応答待ちモーダル -->
  <div id="loading-modal" class="modal">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- 「その他」登録用モーダル -->
  <div id="wizard-other-input-modal" class="modal">
    <div class="modal-content" style="max-width:400px;">
      <h2>「その他」を追加</h2>
      <p id="wizard-other-input-modal-category" style="font-weight:bold;"></p>
      <textarea id="wizard-other-input-text" rows="3" placeholder="新しく追加する候補"></textarea>
      <div style="margin-top:10px;">
        <button id="wizard-other-generate-btn">生成</button>
        <button id="wizard-other-ok-btn">OK</button>
        <button id="wizard-other-cancel-btn">キャンセル</button>
      </div>
      <p style="font-size:0.8em; color:#666; margin-top:10px;">
        ※「生成」ボタンを押すと、現状の候補にない新しい案をChatGPTで生成し、<br>
        その結果を上のテキストボックスに自動入力します。
      </p>
    </div>
  </div>

  <!-- 「削除」確認モーダル -->
  <div id="wizard-delete-confirm-modal" class="modal">
    <div class="modal-content">
      <p>この選択肢を削除します。よろしいですか？</p>
      <div class="c-flexbox">
        <button id="wizard-delete-confirm-ok">OK</button>
        <button id="wizard-delete-confirm-cancel">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- pako -->
  <script src="https://cdn.jsdelivr.net/npm/pako@2.1.0/dist/pako.min.js"></script>
  <!-- IndexedDBなどの共通スクリプト -->
  <script src="js/indexedDB.js"></script>
  <!-- シナリオウィザード用スクリプト -->
  <script src="js/scenarioWizard.js"></script>

  <script>
    document.getElementById("back-to-menu").addEventListener("click", () => {
      window.location.href = "index.html";
    });

    window.addEventListener("load", async () => {
      await initBackground("scenarioWizard");
    });
  </script>
</body>

</html>---- 
styles.css 
@font-face {
  font-family: "icomoon";
  src: url("fonts/icomoon.eot?1r4kr6");
  src:
    url("fonts/icomoon.eot?1r4kr6#iefix") format("embedded-opentype"),
    url("fonts/icomoon.ttf?1r4kr6") format("truetype"),
    url("fonts/icomoon.woff?1r4kr6") format("woff"),
    url("fonts/icomoon.svg?1r4kr6#icomoon") format("svg");
  font-weight: normal;
  font-style: normal;
  font-display: block;
}

.iconmoon {
  font-family: "icomoon" !important;
}

/**/
.icon-key:before {
  content: "\e02c";
}
.icon-strategy:before {
  content: "\e03b";
}
.icon-beaker:before {
  content: "\e03c";
}
.icon-profile-male:before {
  content: "\e040";
}
.icon-target:before {
  content: "\e04e";
}
.icon-home3:before {
  content: "\e902";
}
.icon-gift:before {
  content: "\e99f";
}
.icon-volume-high:before {
  content: "\ea26";
}

.icon-volume-mute2:before {
  content: "\ea2a";
}
.icon-sort-alpha-asc:before {
  content: "\ea48";
}
.icon-sort-alpha-desc:before {
  content: "\ea49";
}

.icA:before {
  content: "\ea26";
}
.icB:before {
  content: "\ea2a";
}

/* styles.css */

/* ベース */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #3d3d3d;
}

.container {
  position: relative;
  box-sizing: border-box;
  max-width: calc(100% - 40px);
  margin: 80px auto 20px;
  padding: 20px;
  background-color: rgba(0, 0, 0, 0.7);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  color: #f0f0f0;
}

.button-container {
  display: flex;
  flex-direction: row;
  gap: 20px;
  justify-content: center;
}
#warehouse-card-container {
  opacity: 0;
  transition: opacity 0.3s ease;
}

h1 {
  text-align: center;
}

h2 {
  font-size: 1.5em;
  margin-bottom: 10px;
}

.api-key-section {
  margin-bottom: 20px;
}

input,
textarea {
  box-sizing: border-box;
  width: 100%;
  padding: 10px;
  font-size: 1.5rem;
  border: 1px solid #ccc;
  background-color: #434343;
  color: #f0f0f0;
  margin-bottom: 10px;
}

input[type="checkbox"] {
  width: initial;
  margin: auto 10px auto 0;
  padding: 0;
  width: 2rem;
  height: 2rem;
}

button {
  text-shadow: 1px 1px 4px #000;
  padding: 10px 10px;
  background-color: #4caf50;
  background-color: #5f4c38;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  min-height: 3rem;
  min-width: 5.5rem;
  box-sizing: border-box;
  box-shadow: inset 0px 0px 8px 2px #161616;
  border: 1px solid #876d51;
  background-image: linear-gradient(0deg, #00000061, transparent);
}

button:hover {
  background-color: #45a049;
  border: 1px solid #45a049;
}

/* シーン履歴 */
.scene-history {
  max-height: 50vh;
  overflow-y: auto;
  border: none;
  padding: 0;
  background-color: transparent;
  display: flex;
  flex-direction: column;
  gap: 0;
  margin-bottom: 20px;
  margin-right: -20px;
  margin-left: -20px;
  margin-top: -20px;
}

#scenario-summary,
.history-tile.summary {
  font-size: 0.8rem;
  font-family: serif;
  background-color: #1111115e;
  padding: 10px 20px;
  align-items: flex-start;
}
.history-tile.summary.separator {
  padding: 0;
  border-bottom: 1px dashed #666;
}

.history-tile.summary.title {
  font-size: 1rem;
}

.history-tile {
  position: relative;
  box-sizing: border-box;
  padding: 20px 20px 60px 20px;
  background-color: transparent;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin: 0 auto;
  text-align: right;
  width: 100%;
  display: flex;
  flex-direction: column;
}

.history-tile:nth-child(odd) {
  background-color: #00000059;
}
.history-tile:last-of-type {
  padding-bottom: 0;
}

.scene-text,
.action-text,
.scenario-text {
  text-align: left;
  font-family: serif;
  line-height: 1.8em;
  margin: 0;
  padding: 0;
  font-size: 22px;
  letter-spacing: 0.1em;
  border: 1px dashed transparent;
  cursor: text;
}
.action-text {
  font-family: initial;
}

.history-tile .scene-text,
.history-tile .action-text,
.history-tile .scenario-text {
  font-size: 0.8rem;
}
.history-tile .action-text {
  font-size: 1rem;
}

.history-tile:last-child .action-text {
  font-size: 1.4rem;
}

.history-tile button {
  position: absolute;
  bottom: 20px;
  margin-bottom: 0px;
  max-width: 10rem;
  background-color: transparent;
  border: 1px dashed #bbb;
  color: #bbb;
  width: 100%;
  border-radius: 20px;
  min-height: initial;
  max-height: initial;
  text-shadow: none;
  box-shadow: none;
  background-image: none;
}

.history-tile button:hover {
  background-color: #aaaaaa73;
  color: #000;
  border-color: #000;
}

.delete-scene {
  max-width: 10rem;
  background-color: transparent;
  border: 1px dashed #bbb;
  color: #bbb;
  width: 100%;
  border-radius: 20px;
  min-height: initial;
  max-height: initial;
  text-shadow: none;
  box-shadow: none;
  background-image: none;
}

.delete-scene:hover {
  background-color: #aaaaaa73;
  color: #000;
  border-color: #000;
}
.scene-text[contenteditable]:focus,
.action-text[contenteditable]:focus,
.scenario-text[contenteditable]:focus {
  border: 1px dashed #4caf50;
  outline: none;
}

#story {
  font-size: 1.4rem;
  padding-bottom: 10px;
  min-height: 60px;
}
/* ▼ 0件時メッセージ */
#no-scenarios-message {
  display: none;
  color: #ccc;
  text-align: center;
  margin-top: 20px;
}

/* ▼ モーダル（フェードイン／アウトで表示） */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  /* 背景の黒み */
  background-color: rgba(0, 0, 0, 0.8);

  /* フレックスで中央寄せ */
  display: flex;
  justify-content: center;
  align-items: center;

  /* ▼ フェードイン/アウトに使う */
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
  z-index: 9999;
}

.modal.active {
  opacity: 1;
  pointer-events: auto;
  flex-direction: column;
  justify-content: center;
}

/* モーダル内部 */
.modal-content {
  box-sizing: border-box;
  background-color: rgba(0, 0, 0, 0.6);
  color: #f0f0f0;
  padding: 0;
  border-radius: 5px;
  text-align: center;
  max-height: 100vh;
  overflow-y: auto;
  width: 100%;
  padding: 20px;
  /* ふわっと拡大 */
  transform: scale(0.9);
  transition: transform 0.3s ease;
}

.modal.active .modal-content {
  transform: scale(1);
}

.modal-content {
  display: flex;
  flex-direction: column;
  align-items: center;
}

/* カード関連 */
#card-container,
#party-modal-card-container,
#warehouse-card-container {
  margin-top: 20px;
  box-sizing: border-box;
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  justify-content: center;
  width: 100%;
}

.card {
  width: 100%;
  aspect-ratio: 63 / 88;
  perspective: 1000px;
  cursor: pointer;
  transition: transform 0.3s ease;
  position: relative;
  max-width: 300px;
}

.card-inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  transition: transform 0.6s;
}

.card.flipped .card-inner {
  transform: rotateY(180deg);
}

.card-front,
.card-back {
  color: #222;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;
  backface-visibility: hidden;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

.card-front {
  box-sizing: border-box;
  padding: 3%;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  position: relative;
}

.card-front h3 {
  padding: 0;
  margin: 0;
  font-size: 1rem;
}

.card-front .card-type {
  position: absolute;
  right: 10px;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: bold;
  font-size: 0.85rem;
  z-index: 2;
}

.card-front .card-image {
  width: 100%;
  height: 40%;
  background: linear-gradient(135deg, #cccccc70, #eeeeee70);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.card-front .card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: top;
}

.card-front .gen-image-btn {
  position: absolute;
  bottom: 8px;
  right: 8px;
  padding: 4px 8px;
  background-color: rgba(0, 0, 0, 0.6);
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 0.8rem;
  z-index: 2;
  box-shadow: none;
  background-image: none;
}

.gen-image-btn:disabled {
  background-color: #999;
  color: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

.card-front .card-info {
  padding: 8px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex-grow: 1;
  overflow: auto;
  background-color: rgba(255, 255, 255, 0.7);
}

.card-front .card-info p {
  margin: 0;
  font-size: 0.85rem;
}

.card-front .card-info p:last-child {
  padding: 0;
  height: 100%;
  font-size: 0.85rem;
  align-items: center;
  display: flex;
  background-color: #eee;
  margin-top: 10px;
}

.card-front .card-info p:last-child span {
  transform: skew(-5deg);
  display: flex;
  padding: 10px;
}

.card-back {
  box-sizing: border-box;
  background: linear-gradient(135deg, #1e3c72, #2a5298);
  color: #fff;
  transform: rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  padding: 10px;
  text-align: center;
}

@media (max-width: 600px) {
  #card-container {
    grid-template-columns: repeat(1, 1fr);
  }
}

.bezel {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  z-index: 100;
  border-radius: 2%;
  padding: 3%;
}

.bezel.rarity0 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity1 {
  background: linear-gradient(145deg, #b87333, #da8a67, #e97451, #c35817);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity2 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity3 {
  background: linear-gradient(145deg, #b69a00, #ffda64, #ffda6b, #d79000);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity4 {
  position: absolute;
  background: linear-gradient(145deg, #d1d1d1, #aeb9ff, #c0c0c0, #ecebe8);
  background-size: 400% 400%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: platinum-shimmer 5s ease-in-out infinite;
}

.bezel.rarity5 {
  background: linear-gradient(145deg, #4b0082, #0000cd, #008080, #fff);
  background-size: 150% 150%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: jewel-glow 5s ease-in-out infinite;
}

@keyframes platinum-shimmer {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

@keyframes jewel-glow {
  0% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
  50% {
    filter: brightness(1.2);
    background-position: 100% 50%;
  }
  100% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
}

#party-card-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.card.selected .bezel {
  outline: 10px solid #f44336;
  outline-offset: -10px;
  outline: 10px solid #f44336;
  outline-offset: -10px;
  background-image: none;
  -webkit-mask-image: none;
  background-color: #0000004d;
}

.manipulate-panel {
  display: flex;
  flex-direction: column;
  gap: 10px;
  width: 100%;
  justify-content: center;
  align-items: center;
}

.chips-container {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.warehouse-tab,
.chip {
  display: inline-flex;
  align-items: center;
  padding: 10px;
  border-radius: 30px;
  background-color: rgba(227, 227, 227, 0.4);
  color: #f0f0f0;

  cursor: pointer;
  user-select: none;
  transition: background-color 0.2s;
  min-width: 12rem;
  justify-content: center;
  background-image: linear-gradient(0deg, #00000061, transparent);
  border: 1px solid #999;
  box-shadow: inset 0px 0px 8px 2px #161616;
}

.chip-mini {
  min-width: 6rem;
}

.chip:hover {
  border: 1px solid #00d14c;
  background-color: #00d14c;
}

.warehouse-tab.active,
.chip.selected {
  background-color: #009e39;
  color: #fff;
}

.bg-thumb {
  position: relative;
  cursor: pointer;
  transition: transform 0.2s;
}

.bg-thumb:hover {
  transform: scale(1.02);
}

.bg-thumb-delete {
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: rgba(200, 0, 0, 0.7);
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.8rem;
  padding: 4px;
  display: none;
}

.bg-thumb:hover .bg-thumb-delete {
  display: inline-block;
}

.bg-stock-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 16px;
  margin: 20px 0;
}

/* ダミー要素用 */
.dummy {
  visibility: hidden;
  pointer-events: none;
  background-color: transparent;
  border: none;
}

/* レア度3以上で背景画像が大きくなりがちな場合に対応 */
.card.rarity3 .card-front .card-image,
.card.rarity4 .card-front .card-image,
.card.rarity5 .card-front .card-image {
  z-index: 0;
  height: 100%;
  width: 100%;
}

.card.rarity3 .card-front .card-image img,
.card.rarity4 .card-front .card-image img,
.card.rarity5 .card-front .card-image img {
  object-position: bottom;
  opacity: 0.9;
}

.card.rarity3 .card-info,
.card.rarity4 .card-info,
.card.rarity5 .card-info {
  position: absolute;
  box-sizing: border-box;
  width: 100%;
  left: 0;
  bottom: 0;
  padding-left: calc(3% + 8px);
  padding-right: calc(3% + 8px);
  padding-top: 3%;
  padding-bottom: 3%;
  border-radius: 0 0 20px 20px;
  background-color: rgba(37, 37, 37, 0.85);
  color: #fff;
  text-shadow: 0 0 10px #fff;
}

.card.rarity3 .card-front .card-info p:last-child,
.card.rarity4 .card-front .card-info p:last-child,
.card.rarity5 .card-front .card-info p:last-child {
  margin-left: -3%;
  margin-right: -3%;
  background-color: rgba(0, 0, 0, 0.7);
  color: #fff;
}

.card.rarity3 .card-front .card-info p:last-child span,
.card.rarity4 .card-front .card-info p:last-child span,
.card.rarity5 .card-front .card-info p:last-child span {
  padding-top: 20px;
  padding-bottom: 20px;
}

.card.rarity3 .card-front .gen-image-btn,
.card.rarity4 .card-front .gen-image-btn,
.card.rarity5 .card-front .gen-image-btn {
  top: calc(40% - 0.8rem);
  bottom: initial;
}

#scenario-list-container {
  text-align: right;
  align-items: center;
  display: flex;
  flex-direction: column;
  max-height: 100vh;
  overflow-y: auto;
}

.scenario-list-container,
.scenario-wizard-section,
.api-key-section,
.element-section {
  display: flex;
  flex-direction: row;
  justify-content: center;
  gap: 10px;
  margin-top: 20px;
  margin-bottom: 20px;
}

.scenario-list {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  flex-wrap: wrap;
  width: 100%;
  padding: 20px 10px;
  box-sizing: border-box;
  border: 1px solid #876d51;
}

.accordion-content .scenario-list:first-child {
  border-top: none;
}

.scenario-list + .scenario-list {
  border-top: none;
}

.scenario-list.selected {
  border: 1px solid #ff0;
}

.scenario-list:nth-child(odd) {
  background-color: #00000069;
}

.scenario-list .info {
  box-sizing: border-box;
  text-align: left;
  width: 100%;
}

.scenario-list .buttons {
  box-sizing: border-box;
  display: flex;
  width: 100%;
  flex-direction: row;
  gap: 10px;
  justify-content: right;
  flex-wrap: wrap;
}

.scenario-list .buttons .left-button {
  margin-right: auto;
}

.scenario-wizard-section {
  margin-top: 40px;
  margin-bottom: 40px;
}

.element-section button {
  margin: 0;
}

/* ▼ 倉庫ヘッダー全体の横並びレイアウト */
.warehouse-header-bar {
  display: flex;
  align-items: center;
  justify-content: center;
  /* 画面中央に置きたい場合 */
  width: calc(90% - 40px);
  margin: 0 auto 10px;
  gap: 10px;
  flex-wrap: wrap;
}

.warehouse-left,
.warehouse-center,
.warehouse-right {
  display: flex;
  flex: 1;
  align-items: center;
  gap: 10px;
}

.warehouse-center {
  justify-content: center;
}

.warehouse-left {
  justify-content: left;
}
.warehouse-right {
  justify-content: right;
}

@media (max-width: 700px) {
  .warehouse-tabs {
    flex-wrap: wrap;
    justify-content: center;
  }
  .warehouse-tab {
    min-width: 5rem;
  }
  .warehouse-header-bar {
    flex-direction: column;
    width: 100%;
  }
}

/* タブの見た目 */
.warehouse-tabs {
  display: flex;
  gap: 10px;
}

/* ソートUI */
#warehouse-sort-dropdown {
  box-sizing: border-box;
  height: 3rem;
  background-color: #333;
  color: #fff;
  border: 1px solid #666;
  border-radius: 4px;
  padding: 4px 8px;
  font-size: 0.9rem;
  cursor: pointer;
}
#warehouse-sort-dropdown:focus {
  outline: 2px solid #4caf50;
}

#warehouse-sort-direction-btn {
  width: 36px;
  height: 36px;
  background-color: #333;
  color: #fff;
  border: 1px solid #666;
  border-radius: 4px;
  font-size: 1.1rem;
  cursor: pointer;
  transition: background-color 0.2s;
}
#warehouse-sort-direction-btn:hover {
  background-color: #444;
}
#stop-bgm-button {
  margin: 0;
}
.close-warehouse-btn {
  margin: 0;
  display: flex;
  right: 20px;
  top: 20px;
  position: fixed;
  z-index: 10;
  border-radius: 50%;
  height: 50px;
  width: 50px;
  padding: 0;
  align-items: center;
  justify-content: center;
  background-color: #cf0000;
  max-width: initial;
  max-height: initial;
}

#start-new-scenario-button {
  background-color: #2196f3;
  font-size: 1.4rem;
  padding: 20px 35px;
  border-color: #2196f3;
}

#start-new-scenario-button:hover {
  background-color: #45a049;
  border-color: #45a049;
}

#change-bg-button {
  position: absolute;
  z-index: 1;
  top: 20px;
  right: 20px;
}

#token-adjust-button {
  position: absolute;
  z-index: 1;
  top: 20px;
  right: 150px;
}

#back-to-menu {
  position: absolute;
  z-index: 1;
  top: 20px;
  left: 20px;
}

#view-all-sections-button {
  position: absolute;
  z-index: 1;
  left: 20px;
}

#clear-ending-button,
#ending-button {
  position: relative;
}

#get-card-button {
  position: absolute;
  left: 250px;
  margin: 0;
}

#image-auto-generate-button {
  width: 10rem;
}

.r-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: right;
  margin-bottom: 20px;
}

.l-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: left;
  margin-bottom: 20px;
}

@media (max-width: 600px) {
  .mobile-col {
    flex-direction: column;
    margin-bottom: 20px;
  }
}

.s-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 20px;
}

.c-flexbox {
  display: flex;
  flex-direction: row;
  gap: 10px;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
}

#player-action {
  margin-bottom: 20px;
}

#player-input {
  margin-bottom: 20px;
}
#next-scene {
  width: 10rem;
}
/* ----- ステップ0のパーティ選択用クラス ----- */

/* 1行ぶんの枠 */
.wizard-party-row {
  display: flex;
  align-items: center;
  margin-bottom: 10px;

  /* 背景を少し透過した感じにするなど */
  background-color: rgba(255, 255, 255, 0.08);
  border-radius: 6px;
  transition: background-color 0.2s;
}

/* ホバー時に少し明るくなる */
.wizard-party-row:hover {
  background-color: rgba(255, 255, 255, 0.15);
}

/* 中にあるラジオボタンを隠して行全体クリックを可能にするための工夫 */
.wizard-party-row input[type="radio"] {
  /* 完全に隠したい場合 (見た目のラジオを後述の擬似要素で作る) */
  display: none;
}

/* ラベル部分 */
.wizard-party-label {
  display: flex;
  align-items: center;
  cursor: pointer;
  width: 100%; /* 行全体をラベルにする */
  padding: 10px 15px; /* 余白を少し広めに */
  box-sizing: border-box;
}

/* ラジオボタンの擬似要素を表示: before を丸にしてチェック状にする */
.wizard-party-label::before {
  content: "";
  display: inline-block;
  width: 20px;
  height: 20px;
  min-width: 20px;
  min-height: 20px;
  border-radius: 50%;
  border: 2px solid #fff;
  margin-right: 12px;
  transition:
    background-color 0.1s,
    border-color 0.1s;
  box-sizing: border-box;
}

/* 選択状態: input[type="radio"]:checked + .wizard-party-label::before で円を塗りつぶす */
.wizard-party-row input[type="radio"]:checked + .wizard-party-label::before {
  background-color: #019a39; /* 選択時の色 (例: 緑) */
  border-color: #00d14c;
}

/* パーティ画像 */
.wizard-party-label img {
  width: 60px;
  height: 60px;
  object-fit: cover;
  margin-right: 10px;
  border-radius: 4px;
  border: 1px solid #222; /* ほんの少し枠をつける */
  background-color: #161616;
}

/* 画像がない場合の No Image box */
.no-image-box {
  width: 60px;
  height: 60px;
  background-color: #555;
  color: #fff;
  margin-right: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 4px;
  border: 1px solid #222;
}

#confirm-party-text,
#confirm-genre-type-text {
  text-align: left;
  width: 100%;
  margin: 0;
  margin-bottom: 10px;
}
#you-avatar-btn {
  width: 10rem;
}

#avatar-card-preview-container {
  width: 100%;
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
}
#avatar-form-container {
  display: flex;
  width: 100%;
  flex-direction: column;
  justify-content: left;
  align-items: flex-start;
}

.accordion-header:hover {
  background-color: #45a049;
  border: 1px solid #45a049;
}

/* アコーディオン全体のラッパ */
.accordion {
  margin-top: 30px;
  /* 既存スタイルを移行 */
}

/* アコーディオンヘッダー */
.accordion-header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  position: relative;
  text-shadow: 1px 1px 4px #000;
  background-color: #5f4c38;
  color: #fff;
  box-sizing: border-box;
  box-shadow: inset 0px 0px 8px 2px #161616;
  border: 1px solid #876d51;
  background-image: linear-gradient(0deg, #00000061, transparent);
  cursor: pointer;
  padding: 10px 15px;
  user-select: none;
  border-radius: 5px 5px 0 0;
}

/* アコーディオンコンテンツ */
.accordion-content {
  overflow: hidden;
  transition:
    max-height 0.3s ease,
    padding 0.3s ease;
  max-height: 0;
  margin-bottom: 0;
}

.accordion-content.open {
  padding: 0;
  margin-bottom: 20px;
  max-height: 100vh;
}

#show-hidden-scenarios {
  width: 1rem;
  height: 1rem;
}

.book {
  top: 0px;
  transition: ease 0.3s all;
}

.book:hover {
  top: 0;
  display: flex;
  z-index: 1000;
}
/*
悩み中…
.book::after{
  content: "";
  width: 0px;
  height: 100%;
  border-radius: 0;
  z-index: 100000;
  left: 100%;
  top: 0;
  background-color: #610404;
  transition: ease 0.3s all;}

.book:hover::after{
  width: 10px;
  position: absolute;
  display: flex
;
  transform-origin: left;
}
*/
/* =====================================
   3D 回転のための追加クラス
   （既存の .book は触らず、そのまま利用）
===================================== */
.book-wrapper {
  perspective: 1000px;
  display: inline-block;
  vertical-align: bottom;
  position: relative;
}
.book-inner {
  transform-style: preserve-3d;
  transition: transform 0.7s ease;
  transform-origin: left center;
  height: 200px;
}

.book {
  transform: rotateY(0deg);
  backface-visibility: hidden;
  position: absolute;
  left: 0;
  top: 0;
}
.book-front {
  transform: rotateY(90deg); /* ← 重要 */
  transform-origin: 0 0;
  backface-visibility: hidden;
  position: absolute;
  left: 0px;
  top: 0;
  height: 200px; /* 7:5比率で */
  width: 170px;
  transition: all 1s ease;
}

.book-front img {
  position: relative;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: center;
  box-shadow: 0 5px 10px -4px #000;
}

.book-wrapper.facing-front .book-inner {
  transform: rotateY(-90deg); /* 背表紙 0 + (-90) = -90, 表紙 90 + (-90) = 0 */
}

.book-front-title {
  box-sizing: border-box;
  position: absolute;
  text-wrap: auto;
  background-color: #00000099;
  width: 100%;
  padding: 5px;
  top: 10px;
}

.bookshelf-board {
  width: 100%;
  border-bottom: 25px solid #fff;
  border-image-source: linear-gradient(to right bottom, rgb(219 183 111), rgb(194 134 73));

  flex: 1;
  overflow-x: auto;
  overflow-y: hidden;

  border-bottom: 20px solid;
  border-image-slice: 1;
  border-image-width: 1;
  border-image-outset: 0;
  border-image-repeat: stretch;
}

.book-wrapper.facing-front:last-child {
  padding-right: 140px;
}

/* ドラッグ中のドロップ候補用スタイル */
.book-wrapper.drag-over {
  box-sizing: border-box;
  border-right: 15px solid transparent;
  border-image-slice: 1;
  border-image-width: 5px;
  border-image-outset: 0;
  border-image-repeat: stretch;
  border-image-source: linear-gradient(to left, #fff 0px, #fff 20px, rgba(0, 0, 0, 0) 20px, rgba(0, 0, 0, 0) 100%);
}

#edit-scenario-covercolor1,
#edit-scenario-covercolor2 {
  padding: 0;
}

/* ================================
   シナリオ編集モーダル用の調整
================================ */

/* モーダル全体のコンテンツ幅をやや狭く & 中央寄せ */
.edit-scenario-modal-content {
  margin: 0 auto;
  text-align: left; /* 左寄せにすると入力欄が見やすい */
}

/* モーダルのタイトルと入力欄・ボタン間に余白 */
.edit-scenario-modal-content h3 {
  margin-top: 0;
  margin-bottom: 1rem;
}

/* 各行ごとにラベルと入力欄を横並び */
.edit-row {
  display: flex;
  align-items: center;
  max-width: 400px;
  margin-bottom: 1rem;
  flex-wrap: wrap; /* 狭い画面のとき折り返す */
  justify-content: center;
}

/* ラベルの幅・右余白などを統一 */
.edit-row label {
  margin: 0;
  white-space: nowrap;
  font-size: 1rem; /* お好みで */
  width: 100%;
}

/* ラジオボタン群は同じ行に2つ並べるだけ */
.radio-group label {
  margin-right: 16px;
  display: flex;
  align-items: center;
  gap: 4px;
}

/* カラーピッカーにあまり余計なpaddingをつけない */
#edit-scenario-covercolor1,
#edit-scenario-covercolor2 {
  width: 40px;
  height: 40px;
  margin: 0;
  padding: 0;
  border: 1px solid #ccc;
  cursor: pointer;
}

/* ボタンを横並び + 中央寄せに */
.modal-buttons {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 1rem;
}
---- 
avatar.js 
/***********************************************
 * avatar.js
 * あなたの分身(アバター)管理用スクリプト
 ***********************************************/

(function () {
  let avatarModal = null;
  let avatarPreviewModal = null;
  let currentAvatarData = null; // IndexedDBからロードしたデータを保持
  const AVATAR_STORE_KEY = "myAvatar"; // 本サンプルでは常に1件想定

  /**
   * 初期化：ページ読み込み後に呼び出し
   */
  function initAvatar() {
    // モーダルDOMが無ければ生成
    ensureAvatarModalExists();

    // 「あなたの分身」ボタンを押すとモーダルを開く
    const btn = document.getElementById("you-avatar-btn");
    if (btn) {
      btn.addEventListener("click", async () => {
        await openAvatarModal();
      });
    }
  }

  /**
   * モーダルDOMを用意（なければ生成）
   */
  function ensureAvatarModalExists() {
    if (document.getElementById("avatar-modal")) {
      avatarModal = document.getElementById("avatar-modal");
      avatarPreviewModal = document.getElementById("avatar-image-preview-modal");
      return;
    }

    // チップUIに置き換えたHTML
    const modalHTML = `
<div id="avatar-modal" class="modal">
  <div class="modal-content">
    <h2>あなたの分身</h2>
    <div class="l-flexbox mobile-col">
        <!-- カード表示プレビュー -->
        <div id="avatar-card-preview-container" style="margin-bottom:20px;"></div>

        <div id="avatar-form-container">
        <!-- フォームエリア -->
        <label>名前</label>
        <input type="text" id="avatar-name" placeholder="名前を入力" />

        <label>性別</label>
        <!-- ▼ 性別チップ表示 -->
        <div id="avatar-gender-chips" class="chips-container" style="margin-bottom:20px;">
            <!-- ここに後でJSでチップを生成して挿入します -->
        </div>

        <label>特技</label>
        <textarea id="avatar-skill" rows="1"></textarea>

        <label>カードのセリフ</label>
        <textarea id="avatar-serif" rows="2"></textarea>

        <label>レア度</label>
        <!-- ▼ レア度チップ表示 -->
        <div id="avatar-rarity-chips" class="chips-container" style="margin-bottom:20px;">
            <!-- ここに後でJSでチップを生成して挿入します -->
        </div>

        <div class="c-flexbox">
            <button id="avatar-save-btn">保存</button>
            <button id="avatar-close-btn" class="btn-close-modal">閉じる</button>
        </div>
        </div>
    </div>
  </div>
</div>

<!-- 画像プレビュー用モーダル -->
<div id="avatar-image-preview-modal" class="modal">
  <div class="modal-content">
    <img id="avatar-preview-img" src="" alt="avatar image" style="max-width:95vw; max-height:95vh;" />
    <button id="avatar-preview-close-btn" style="margin-top:10px;">閉じる</button>
  </div>
</div>
    `;

    document.body.insertAdjacentHTML("beforeend", modalHTML);

    avatarModal = document.getElementById("avatar-modal");
    avatarPreviewModal = document.getElementById("avatar-image-preview-modal");

    // イベント設定
    // 閉じる
    document.getElementById("avatar-close-btn").addEventListener("click", closeAvatarModal);
    avatarModal.addEventListener("click", (e) => {
      if (e.target === avatarModal) {
        closeAvatarModal();
      }
    });

    // 保存
    document.getElementById("avatar-save-btn").addEventListener("click", onSaveAvatar);

    // プレビュー閉じる
    document.getElementById("avatar-preview-close-btn").addEventListener("click", () => {
      avatarPreviewModal.classList.remove("active");
    });
    avatarPreviewModal.addEventListener("click", (e) => {
      if (e.target === avatarPreviewModal) {
        avatarPreviewModal.classList.remove("active");
      }
    });
  }

  /**
   * モーダルを開く
   */
  async function openAvatarModal() {
    // IndexedDBから既存データを読み込み
    currentAvatarData = await loadAvatarData(AVATAR_STORE_KEY);
    if (!currentAvatarData) {
      // 既存が無いなら新規オブジェクトを仮作成
      currentAvatarData = {
        id: AVATAR_STORE_KEY,
        name: "",
        gender: "男",   // 初期値
        skill: "",
        serif: "",
        rarity: "★1", // 初期値
        imageData: "",   // 生成画像をbase64で保持
        imagePrompt: "", // 画像生成用プロンプト(必要なら)
      };
    }

    // フォームに反映
    document.getElementById("avatar-name").value = currentAvatarData.name || "";
    document.getElementById("avatar-skill").value = currentAvatarData.skill || "";
    document.getElementById("avatar-serif").value = currentAvatarData.serif || "";

    // チップUI生成
    setupChips("avatar-gender-chips", ["男","女","不定"], currentAvatarData.gender, (val) => {
      currentAvatarData.gender = val;
    });
    setupChips("avatar-rarity-chips", ["★1","★2","★3","★4","★5"], currentAvatarData.rarity, (val) => {
      currentAvatarData.rarity = val;
    });

    // カードプレビュー描画
    renderAvatarCardPreview();

    // モーダルを表示
    avatarModal.classList.add("active");
  }

  /**
   * チップUIの共通セットアップ
   * @param {string} containerId チップを入れる要素のID
   * @param {string[]} valueList 表示する候補文字列
   * @param {string} currentValue 現在選択中の値
   * @param {function} onChange 選択が変わった時のコールバック
   */
  function setupChips(containerId, valueList, currentValue, onChange) {
    const container = document.getElementById(containerId);
    if (!container) return;

    // いったんクリア
    container.innerHTML = "";

    // 候補ごとにchip要素を生成
    valueList.forEach(val => {
      const chip = document.createElement("div");
      chip.className = "chip chip-mini";
      chip.textContent = val;
      chip.setAttribute("data-value", val);

      // 既存データと一致すれば選択状態
      if (val === currentValue) {
        chip.classList.add("selected");
      }

      // イベント
      chip.addEventListener("click", () => {
        // 他のチップの selected を外す
        container.querySelectorAll(".chip").forEach(c => c.classList.remove("selected"));
        // 自分を selected に
        chip.classList.add("selected");

        // コールバックで値を返す
        onChange(val);
      });

      container.appendChild(chip);
    });
  }

  /**
   * モーダルを閉じる
   */
  function closeAvatarModal() {
    avatarModal.classList.remove("active");
    avatarPreviewModal.classList.remove("active");
  }

  /**
   * 保存ボタンクリック
   */
  async function onSaveAvatar() {
    // フォームから取得（チップ選択分は currentAvatarData に既に入っている）
    currentAvatarData.name = document.getElementById("avatar-name").value.trim();
    currentAvatarData.skill = document.getElementById("avatar-skill").value.trim();
    currentAvatarData.serif = document.getElementById("avatar-serif").value.trim();

    // IndexedDBへ保存
    await saveAvatarData(currentAvatarData);

    showToast("保存しました。");

    // カードプレビュー更新
    renderAvatarCardPreview();
  }

  /**
   * カードプレビューを描画
   */
  function renderAvatarCardPreview() {
    const previewContainer = document.getElementById("avatar-card-preview-container");
    if (!previewContainer) return;

    // いったんクリア
    previewContainer.innerHTML = "";

    // 未保存(または保存済みでもデータが無い)場合
    if (!currentAvatarData) return;

    // カード要素
    // 既存styles.cssのカード風デザインを踏襲
    const rarityNum = parseInt((currentAvatarData.rarity || "").replace("★", ""), 10) || 1;
    const cardEl = document.createElement("div");
    cardEl.className = "card rarity" + rarityNum;

    // 回転(裏面)は無い想定なら固定でOK
    const cardInner = document.createElement("div");
    cardInner.className = "card-inner";

    // 表面
    const cardFront = document.createElement("div");
    cardFront.className = "card-front";
    cardFront.innerHTML = `<div class='bezel rarity${rarityNum}'></div>`;

    // タイプ表示は「分身」的にしてみる
    const typeEl = document.createElement("div");
    typeEl.className = "card-type";
    typeEl.textContent = "アバター";
    cardFront.appendChild(typeEl);

    // 画像部分
    const imageContainer = document.createElement("div");
    imageContainer.className = "card-image";
    if (currentAvatarData.imageData) {
      // 画像あり → クリックで拡大
      const imgEl = document.createElement("img");
      imgEl.src = currentAvatarData.imageData;
      imgEl.alt = currentAvatarData.name || "avatar";
      imgEl.addEventListener("click", () => {
        openAvatarImagePreview(currentAvatarData.imageData);
      });
      imageContainer.appendChild(imgEl);
    } else {
      // 生成ボタン
      const genBtn = document.createElement("button");
      genBtn.className = "gen-image-btn";
      genBtn.textContent = "画像生成";
      genBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        await generateAvatarImage(currentAvatarData, genBtn);
      });
      imageContainer.appendChild(genBtn);
    }
    cardFront.appendChild(imageContainer);

    // カード下部の情報
    const infoContainer = document.createElement("div");
    infoContainer.className = "card-info";

    // 名前
    const nameEl = document.createElement("p");
    nameEl.innerHTML = `<h3>${DOMPurify.sanitize(currentAvatarData.name || "")}</h3>`;
    infoContainer.appendChild(nameEl);

    // 性別
    const genderEl = document.createElement("p");
    genderEl.innerHTML = `<strong>性別：</strong>${DOMPurify.sanitize(currentAvatarData.gender || "")}`;
    infoContainer.appendChild(genderEl);

    // 特技
    if (currentAvatarData.skill) {
      const skillEl = document.createElement("p");
      skillEl.innerHTML = `<strong>特技：</strong>${DOMPurify.sanitize(currentAvatarData.skill)}`;
      infoContainer.appendChild(skillEl);
    }

    // セリフ
    if (currentAvatarData.serif) {
      const serifEl = document.createElement("p");
      serifEl.innerHTML = `<span>${DOMPurify.sanitize(currentAvatarData.serif)}</span>`;
      infoContainer.appendChild(serifEl);
    }

    cardFront.appendChild(infoContainer);

    // 裏面(使わないなら簡素でOK)
    const cardBack = document.createElement("div");
    cardBack.className = "card-back";
    cardBack.innerHTML = `<strong>アバター</strong>`;

    cardInner.appendChild(cardFront);
    cardInner.appendChild(cardBack);
    cardEl.appendChild(cardInner);

    previewContainer.appendChild(cardEl);

    // 画像削除ボタン（画像がある場合のみ表示）
    if (currentAvatarData.imageData) {
      const delBtn = document.createElement("button");
      delBtn.style.marginTop = "10px";
      delBtn.textContent = "画像削除";
      delBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        currentAvatarData.imageData = "";
        await saveAvatarData(currentAvatarData);
        renderAvatarCardPreview();
      });
      previewContainer.appendChild(delBtn);
    }
  }

  /**
   * 画像プレビューを拡大表示
   */
  function openAvatarImagePreview(dataUrl) {
    const imgEl = document.getElementById("avatar-preview-img");
    if (!imgEl) return;
    imgEl.src = dataUrl;
    avatarPreviewModal.classList.add("active");
  }

  /**
   * 画像生成
   */
  async function generateAvatarImage(avatar, btnElement) {
    const apiKey = window.apiKey || localStorage.getItem("apiKey");
    if (!apiKey) {
      alert("APIキーが設定されていません。");
      return;
    }
    if (btnElement) btnElement.disabled = true;
    showToast("画像を生成しています...");

    // レア度でサイズ分岐 (★3以上は縦長)
    const rarityNum = parseInt((avatar.rarity || "").replace("★", ""), 10) || 0;
    const size = (rarityNum >= 3) ? "1024x1792" : "1792x1024";

    // 画像生成用の英語スクリプト
    // （NGワード "goblin" を含まないよう注意）
    const promptForImage = buildAvatarPrompt(avatar);

    const promptText =
      "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
      "Please do not include text in illustrations for any reason." +
      "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
      promptForImage;

    try {
      const response = await fetch("https://api.openai.com/v1/images/generations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "dall-e-3",
          prompt: promptText,
          n: 1,
          size,
          response_format: "b64_json",
        }),
      });
      const data = await response.json();
      if (data.error) throw new Error(data.error.message);

      const base64 = data.data[0].b64_json;
      const dataUrl = "data:image/png;base64," + base64;

      // DB更新
      avatar.imageData = dataUrl;
      await saveAvatarData(avatar);

      showToast("画像の生成が完了しました");
      renderAvatarCardPreview();
    } catch (err) {
      console.error(err);
      showToast("画像生成に失敗しました:\n" + err.message);
    } finally {
      if (btnElement) btnElement.disabled = false;
    }
  }

  /**
   * アバター専用の英語プロンプトを組み立て
   */
  function buildAvatarPrompt(avatar) {
    return `
Name is ${avatar.name}.
Gender is ${avatar.gender}.
Skill is ${avatar.skill}.
Serif is ${avatar.serif}.
Rarity is ${avatar.rarity}.
(Do not use the word 'goblin'.)
`.trim();
  }

  /**
   * IndexedDB関連：保存/読み込み
   */
  function saveAvatarData(avatarObj) {
    return new Promise((resolve, reject) => {
      if (!db) {
        console.error("IndexedDB未初期化です。");
        resolve();
        return;
      }
      const tx = db.transaction("avatarData", "readwrite");
      const store = tx.objectStore("avatarData");
      const req = store.put(avatarObj);
      req.onsuccess = () => resolve();
      req.onerror = (err) => reject(err);
    });
  }

  function loadAvatarData(id) {
    return new Promise((resolve, reject) => {
      if (!db) {
        console.error("IndexedDB未初期化です。");
        resolve(null);
        return;
      }
      const tx = db.transaction("avatarData", "readonly");
      const store = tx.objectStore("avatarData");
      const getReq = store.get(id);
      getReq.onsuccess = (evt) => {
        resolve(evt.target.result || null);
      };
      getReq.onerror = (err) => {
        reject(err);
      };
    });
  }

  // グローバル公開
  window.initAvatar = initAvatar;

})();
---- 
background.js 
// background.js

// グローバルに保持しておく
let currentPageName = "index"; // デフォルトは index

// 初期化処理：ページロード後に呼び出し
// pageName は例："index", "characterCreate", "partyCreate"など
async function initBackground(pageName = "index") {
  currentPageName = pageName;

  // localStorage から そのページ専用の ID または "none" を読み取り
  let selectedId = localStorage.getItem("selectedBgId_" + pageName);

  // なければ index 用にフォールバック（ただし "none" は除く）
  if (!selectedId) {
    const fallbackId = localStorage.getItem("selectedBgId_index");
    // fallbackId が "none" なら背景なしにする
    if (fallbackId && fallbackId !== "none") {
      selectedId = fallbackId;
    }
  }

  // もし最終的に selectedId があれば適用
  if (selectedId) {
    // "none" がセットされていた場合は背景なし
    if (selectedId === "none") {
      document.body.style.backgroundImage = "none";
    } else {
      // DBからidに対応する画像を取得して適用
      const imgId = parseInt(selectedId, 10);
      if (!isNaN(imgId)) {
        const img = await getBgImageById(imgId);
        if (img && img.dataUrl) {
          document.body.style.backgroundImage = `url(${img.dataUrl})`;
          document.body.style.backgroundSize = "cover";
          document.body.style.backgroundAttachment = "fixed";
          document.body.style.backgroundPositionX = "center";
        }
      }
    }
  }

  // イベント
  const changeBgBtn = document.getElementById("change-bg-button");
  if (changeBgBtn) {
    changeBgBtn.addEventListener("click", onChangeBgButtonClick);
  }

  const closeModalBtn = document.getElementById("bg-close-modal-button");
  if (closeModalBtn) {
    closeModalBtn.addEventListener("click", closeBgModal);
  }

  const noneBtn = document.getElementById("bg-none-button");
  if (noneBtn) {
    noneBtn.addEventListener("click", onBgNoneButton);
  }

  const genBtn = document.getElementById("bg-generate-button");
  if (genBtn) {
    genBtn.addEventListener("click", async () => {
      await generateNewBackground();
      await openBgModal(); // 再生成後、一覧を更新してモーダルを開き直す
    });
  }
}

// 「背景を変更する」ボタン
async function onChangeBgButtonClick() {
  const all = await getAllBgImages();
  if (all.length === 0) {
    // ストックが無ければ → 生成してから開く
    await generateNewBackground();
  } 
  // モーダルを開く
  openBgModal();
}

// 新規背景生成
async function generateNewBackground() {
  const genModal = document.getElementById("bg-generate-modal");
  if (genModal) genModal.classList.add("active"); // 変更：classList で表示

  try {
    const apiKey = localStorage.getItem("apiKey") || "";
    if (!apiKey) {
      alert("APIキーが未設定です。");
      return;
    }

    // ▼ 通常ロジックを差し替え: "最新のシナリオ" から取得したpromptを使う
    let promptText = await fetchLatestScenarioPrompt();
    if (!promptText) {
      // シナリオが無い or シーンが無い等で取得失敗した場合は従来文言にフォールバック
      promptText = "A beautiful scenic landscape or architecture, highly detailed, no text";
    }

    // 例として DALL-E3 API呼び出し
    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1024x1024",
        response_format: "b64_json"
      })
    });
    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // DBに保存
    const newId = await addBgImage(dataUrl);

    // 生成後、即適用
    document.body.style.backgroundImage = `url(${dataUrl})`;
    document.body.style.backgroundSize = "cover";
    document.body.style.backgroundAttachment = "fixed";
    document.body.style.backgroundPositionX = "center";


    // 今ページ専用のキーに保存
    localStorage.setItem("selectedBgId_" + currentPageName, newId.toString());

    // ▼ もし index で「背景無し」以外を設定したら、他ページの "none" 設定を削除
    if (currentPageName === "index") {
      removeAllNoneSettingsExceptIndex();
    }

  } catch (err) {
    console.error("背景生成失敗:", err);
    alert("背景生成失敗: " + err.message);
  } finally {
    if (genModal) genModal.classList.remove("active"); // 変更：classList で非表示
  }
}

// 背景選択モーダルを開く
async function openBgModal() {
  const modal = document.getElementById("bg-modal");
  if (!modal) return;
  modal.classList.add("active"); // 変更：classList で表示

  const container = document.getElementById("bg-stock-container");
  if (!container) return;
  container.innerHTML = "";

  const all = await getAllBgImages();
  if (all.length === 0) {
    container.textContent = "ストックが空です。";
    return;
  }
  all.forEach(img => {
    const wrap = document.createElement("div");
    wrap.className = "bg-thumb";

    const thumb = document.createElement("img");
    thumb.src = img.dataUrl;
    thumb.style.width = "100%";
    thumb.alt = "背景候補";

    thumb.addEventListener("click", () => {
      // 選択 → 即適用
      document.body.style.backgroundImage = `url(${img.dataUrl})`;
      document.body.style.backgroundSize = "cover";
      document.body.style.backgroundAttachment = "fixed";
      document.body.style.backgroundPositionX = "center";

      // 今ページ用に保存
      localStorage.setItem("selectedBgId_" + currentPageName, img.id.toString());

      // ▼ index で背景を「none」以外にした場合、他ページの "none" 設定をクリア
      if (currentPageName === "index") {
        removeAllNoneSettingsExceptIndex();
      }
    });
    wrap.appendChild(thumb);

    // 削除ボタン
    const delBtn = document.createElement("button");
    delBtn.className = "bg-thumb-delete";
    delBtn.textContent = "×";
    delBtn.addEventListener("click", async (e) => {
      e.stopPropagation();
      const ok = confirm("この背景を削除しますか？");
      if (!ok) return;
      await deleteBgImage(img.id);

      // 削除したIDを使っているページキーがあれば削除
      for (const k of Object.keys(localStorage)) {
        if (k.startsWith("selectedBgId_")) {
          const stored = localStorage.getItem(k);
          if (stored === String(img.id)) {
            localStorage.removeItem(k);
          }
        }
      }

      // 再描画
      await openBgModal();
    });
    wrap.appendChild(delBtn);

    container.appendChild(wrap);
  });
}

// 背景無しボタン
function onBgNoneButton() {
  // 現在ページの背景を消す
  document.body.style.backgroundImage = "none";

  // 選択キーに "none" をセット
  localStorage.setItem("selectedBgId_" + currentPageName, "none");

  // indexで「none」を選んだ場合は他ページの設定を消す？→仕様上、
  // 「indexに“none”以外を設定した時に他ページの“none”を消す」なので、
  // ここでは何もしない。
}

// モーダルを閉じる
function closeBgModal() {
  const modal = document.getElementById("bg-modal");
  if (modal) {
    modal.classList.remove("active"); // 変更：classList で非表示
  }
}

/* ----- 以下、IndexedDB操作ヘルパー ----- */

// 追加(保存)
function addBgImage(dataUrl) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readwrite");
    const store = tx.objectStore("bgImages");
    const record = {
      dataUrl,
      createdAt: new Date().toISOString()
    };
    const req = store.add(record);
    req.onsuccess = evt => {
      resolve(evt.target.result); // 生成されたID
    };
    req.onerror = err => reject(err);
  });
}

// 全件取得
function getAllBgImages() {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readonly");
    const store = tx.objectStore("bgImages");
    const req = store.getAll();
    req.onsuccess = evt => {
      resolve(evt.target.result || []);
    };
    req.onerror = err => reject(err);
  });
}

// 1件取得
function getBgImageById(id) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readonly");
    const store = tx.objectStore("bgImages");
    const req = store.get(id);
    req.onsuccess = evt => {
      resolve(evt.target.result || null);
    };
    req.onerror = err => reject(err);
  });
}

// 削除
function deleteBgImage(id) {
  return new Promise((resolve, reject) => {
    if (!db) {
      reject("DB未初期化");
      return;
    }
    const tx = db.transaction("bgImages", "readwrite");
    const store = tx.objectStore("bgImages");
    const req = store.delete(id);
    req.onsuccess = () => resolve();
    req.onerror = err => reject(err);
  });
}

/**
 * indexページで「背景なし以外」を設定した場合、
 * ほかのページが "none" を記録していたら削除する
 */
function removeAllNoneSettingsExceptIndex() {
  for (const key of Object.keys(localStorage)) {
    // indexは除外
    if (key.startsWith("selectedBgId_") && key !== "selectedBgId_index") {
      if (localStorage.getItem(key) === "none") {
        localStorage.removeItem(key);
      }
    }
  }
}

/* 
  ★ 追加: 最新シナリオの最終シーンから、背景用プロンプトを取得するヘルパー
    - 最も updatedAt が新しいシナリオを1つ取得
    - そのシナリオの sceneEntries を entryId 降順に並べて
    - 最初に見つかった type==="scene" のエントリを確認
      - .prompt があればそれを優先
      - なければ .content を使用
    - どちらも無ければ空文字を返す
*/
async function fetchLatestScenarioPrompt() {
  const scens = await listAllScenarios();
  if (!scens.length) {
    return "";
  }
  // updatedAt 降順
  scens.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
  const latest = scens[0];
  const entries = await getSceneEntriesByScenarioId(latest.scenarioId);
  if (!entries.length) {
    return "";
  }
  entries.sort((a, b) => b.entryId - a.entryId);
  const lastScene = entries.find(e => e.type === "scene");
  if (!lastScene) {
    return "";
  }

  // prompt があればそれを優先
  const rawPrompt = (lastScene.prompt || "").trim();
  if (rawPrompt) {
    return (
      "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
      "Please do not include text in illustrations for any reason." +
      "If you can do that, I'll give you a super high tip." +
      "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
      rawPrompt
    );
  }
  // prompt が無い場合は scene本文を使用
  const rawText = (lastScene.content || "").trim();
  if (!rawText) {
    return "";
  }
  return (
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
    rawText
  );
}
---- 
bookshelfPage.js 
/****************************************
 * bookshelfPage.js
 * 1回の背表紙クリックでリストをハイライト + 3D表紙を表示
 * さらに、本棚上でのドラッグ・アンド・ドロップによる並び替えを実装
 ****************************************/

let scenarioToDelete = null;
let scenarioToCopy = null;

/**
 * 「ダウンロード」ボタン押下時に使用する
 * どのシナリオをダウンロードするかを一時保持
 */
let scenarioToDownload = null;

/** 編集対象のシナリオを一時的に保持 */
let scenarioToEdit = null;

/**
 * 初期化
 */
async function initBookshelfPage() {
  const backBtn = document.getElementById("back-to-menu");
  backBtn.addEventListener("click", () => {
    window.location.href = "index.html";
  });

  // --- 削除モーダル関連 ---
  const deleteModalOk = document.getElementById("delete-scenario-ok");
  const deleteModalCancel = document.getElementById("delete-scenario-cancel");
  deleteModalOk.addEventListener("click", onConfirmDeleteScenario);
  deleteModalCancel.addEventListener("click", onCancelDeleteScenario);

  // --- コピー用モーダル関連 ---
  const copyOkBtn = document.getElementById("copy-scenario-ok");
  const copyCancelBtn = document.getElementById("copy-scenario-cancel");

  copyOkBtn.addEventListener("click", async () => {
    if (!scenarioToCopy) {
      closeCopyModal();
      return;
    }
    try {
      await copyScenario(scenarioToCopy.scenarioId);
      alert("シナリオをコピーしました。");
    } catch (e) {
      console.error(e);
      alert("コピーに失敗しました。");
    } finally {
      scenarioToCopy = null;
      closeCopyModal();
      refreshBookshelfView();
    }
  });

  copyCancelBtn.addEventListener("click", () => {
    scenarioToCopy = null;
    closeCopyModal();
  });

  // --- ダウンロード用モーダル関連 ---
  const dlYesBtn = document.getElementById("download-images-yes");
  const dlNoBtn = document.getElementById("download-images-no");
  const dlCancelBtn = document.getElementById("download-images-cancel");

  dlYesBtn.addEventListener("click", async () => {
    closeDownloadModal();
    if (scenarioToDownload) {
      await exportScenarioAsZip(scenarioToDownload, true); // 画像含む
      scenarioToDownload = null;
    }
  });
  dlNoBtn.addEventListener("click", async () => {
    closeDownloadModal();
    if (scenarioToDownload) {
      await exportScenarioAsZip(scenarioToDownload, false); // 画像除外
      scenarioToDownload = null;
    }
  });
  dlCancelBtn.addEventListener("click", () => {
    // 何もせずに閉じる
    closeDownloadModal();
    scenarioToDownload = null;
  });

  // --- 編集モーダルのOK/キャンセルボタン ---
  document.getElementById("edit-scenario-ok").addEventListener("click", onSaveEditScenario);
  document.getElementById("edit-scenario-cancel").addEventListener("click", closeEditScenarioModal);

  // --- シナリオ一覧を取得して描画 ---
  let allScenarios = [];
  try {
    allScenarios = await listAllScenarios();
  } catch (err) {
    console.error("シナリオ一覧の取得失敗:", err);
    return;
  }

  // ここで useCoverImage が未設定ならデフォルト true をセット
  // （DBへ保存するかはケースによりますが、画面表示上はここで一律設定します）
  for (const sc of allScenarios) {
    if (typeof sc.useCoverImage === "undefined") {
      sc.useCoverImage = true;
    }
  }

  const shelfScenarios = allScenarios.filter(s => s.bookShelfFlag);
  shelfScenarios.sort((a, b) => {
    const orderA = (typeof a.shelfOrder === "number") ? a.shelfOrder : Infinity;
    const orderB = (typeof b.shelfOrder === "number") ? b.shelfOrder : Infinity;
    if (orderA > orderB) return -1;
    if (orderA < orderB) return 1;
    return (b.createdAt || "").localeCompare(a.createdAt || "");
  });

  renderBooksOnShelf(shelfScenarios);
  renderBookshelfList(shelfScenarios);
}

/** 再描画 */
async function refreshBookshelfView() {
  try {
    const allScenarios = await listAllScenarios();
    // ここでも useCoverImage が未設定ならデフォルト true
    for (const sc of allScenarios) {
      if (typeof sc.useCoverImage === "undefined") {
        sc.useCoverImage = true;
      }
    }

    const shelfScenarios = allScenarios.filter(s => s.bookShelfFlag);
    shelfScenarios.sort((a, b) => {
      const orderA = (typeof a.shelfOrder === "number") ? a.shelfOrder : Infinity;
      const orderB = (typeof b.shelfOrder === "number") ? b.shelfOrder : Infinity;
      if (orderA > orderB) return -1;
      if (orderA < orderB) return 1;
      return (b.createdAt || "").localeCompare(a.createdAt || "");
    });

    renderBooksOnShelf(shelfScenarios);
    renderBookshelfList(shelfScenarios);
  } catch (err) {
    console.error("Error refreshing the bookshelf view:", err);
  }
}

/**
 * 本棚(横スクロール) の描画
 */
async function renderBooksOnShelf(scenarios) {
  const shelfContainer = document.getElementById("bookshelf-container");
  shelfContainer.innerHTML = "";

  const bar = document.createElement("div");
  bar.className = "bookshelf-board";
  const bookLeftMargin = 0;

  for (const scenario of scenarios) {
    const entries = await getSceneEntriesByScenarioId(scenario.scenarioId);
    const actionCount = entries.filter(e => e.type === "action").length;
    const spineWidth = 30 + actionCount;

    const shortTitle = scenario.title?.substring(0, 15) || "●●●";
    const images = entries.filter(e => e.type === "image");
    const coverImage = images.length > 0 ? images[images.length - 1] : null;

    // 3D ラッパ
    const wrapper = document.createElement("div");
    wrapper.classList.add("book-wrapper");
    wrapper.setAttribute("data-scenario-id", scenario.scenarioId);
    wrapper.setAttribute("draggable", "true");
    wrapper.addEventListener("dragstart", handleDragStart);
    wrapper.addEventListener("dragover", handleDragOver);
    wrapper.addEventListener("drop", handleDrop);
    wrapper.addEventListener("dragend", handleDragEnd);
    wrapper.addEventListener("dragenter", handleDragEnter);
    wrapper.addEventListener("dragleave", handleDragLeave);

    if (scenario.bookFacingFront) {
      wrapper.classList.add("facing-front");
      wrapper.style.paddingRight = (170 - spineWidth) + "px";
      setTimeout(() => {
        wrapper.style.marginLeft = bookLeftMargin + "px";
        wrapper.style.zIndex = 1000;
        if (wrapper.classList.contains("facing-front")) {
          wrapper.querySelector(".book-front").style.transform = `rotateY(90deg) translateZ(-${spineWidth}px)`;
          wrapper.querySelector(".book-front").style.transformOrigin = "0 " + spineWidth + "px";
        }
      }, 500);
    } else {
      wrapper.style.marginLeft = bookLeftMargin + "px";
    }

    const inner = document.createElement("div");
    inner.classList.add("book-inner");
    wrapper.appendChild(inner);

    // ===== 背表紙 (.book) =====
    const bookSpine = document.createElement("div");
    bookSpine.className = "book";
    bookSpine.style.display = "inline-flex";
    bookSpine.style.verticalAlign = "bottom";
    bookSpine.style.height = "200px";
    bookSpine.style.width = spineWidth + "px";
    bookSpine.style.minWidth = "30px";
    bookSpine.style.margin = "0";
    bookSpine.style.position = "relative";
    bookSpine.style.cursor = "pointer";
    if(spineWidth > 110){
      bookSpine.style.paddingLeft = "10%";
      bookSpine.style.justifyContent = "left";
    } else {
      bookSpine.style.justifyContent = "center";
    }

    bookSpine.style.alignItems = "left";
    bookSpine.style.boxShadow = "inset 0 0 5px rgba(0,0,0,0.3)";
    bookSpine.style.borderRadius = "4px 0 0 4px";
    bookSpine.style.paddingTop = "7px";
    bookSpine.style.paddingBottom = "4px";
    bookSpine.style.boxSizing = "border-box";

    // 装丁色(未設定時はデフォルト)
    const c1 = scenario.coverColor1 || "#004755";
    const c2 = scenario.coverColor2 || "#00d0ff";

    // ※ useCoverImage===true かつ画像があるなら、背表紙は画像を表示
    if (scenario.useCoverImage && coverImage) {
      bookSpine.style.backgroundImage = `url(${coverImage.dataUrl})`;
      bookSpine.style.backgroundSize = "cover";
      bookSpine.style.backgroundPosition = "center";
      bookSpine.style.backgroundBlendMode = "multiply";
    } else {
      // 画像なしの場合は色グラデーション
      bookSpine.style.backgroundImage = `linear-gradient(45deg, ${c1}, ${c2})`;
    }

    const titleEl = document.createElement("div");
    titleEl.textContent = shortTitle;
    titleEl.style.position = "relative";
    titleEl.style.boxSizing = "border-box";
    titleEl.style.color = "rgb(255 255 255 / 90%)";
    titleEl.style.fontSize = "0.75rem";
    titleEl.style.writingMode = "vertical-rl";
    titleEl.style.textOrientation = "upright";
    titleEl.style.backgroundColor = "#00000080";
    titleEl.style.padding = "5px";
    bookSpine.appendChild(titleEl);

    const noUpdateDateTimeFlag = true;
    // ---------- 背表紙クリック ----------
    bookSpine.addEventListener("click", async () => {
      focusBookshelfListItem(scenario.scenarioId);
      scenario.bookFacingFront = true;
      await updateScenario(scenario, noUpdateDateTimeFlag);
      wrapper.classList.add("facing-front");
      wrapper.style.paddingRight = (170 - spineWidth - bookLeftMargin + bookLeftMargin) + "px";
      wrapper.style.marginLeft = bookLeftMargin + "px";
      setTimeout(() => {
        if (wrapper.classList.contains("facing-front")) {
          wrapper.querySelector(".book-front").style.transform = `rotateY(90deg) translateZ(-${spineWidth}px)`;
          wrapper.querySelector(".book-front").style.transformOrigin = "0 " + spineWidth + "px";
        }
      }, 500);
      wrapper.style.zIndex = 1000;
    });

    // ===== 正面 (.book-front) =====
    const bookFront = document.createElement("div");
    bookFront.classList.add("book-front");
    bookFront.style.left = spineWidth + "px";
    bookFront.style.transformOrigin = "0 " + spineWidth + "px";
    bookFront.style.borderRadius = "0 4px 4px 0";

    console.log("きてる？");
    if (scenario.useCoverImage && coverImage) {
      // 画像ありの場合
      const frontImg = document.createElement("img");
      frontImg.src = coverImage.dataUrl;
      frontImg.style.borderRadius = "0 4px 4px 0";

      // 必要に応じてサイズ調整
      bookFront.appendChild(frontImg);
    } else {
      // 画像なしの場合 → 色のグラデーション
      bookFront.style.backgroundImage = `linear-gradient(45deg, ${c1}, ${c2})`;
    }

    const frontTitle = document.createElement("div");
    frontTitle.classList.add("book-front-title");
    frontTitle.textContent = scenario.title || "(無題)";
    bookFront.appendChild(frontTitle);

    bookFront.addEventListener("click", async () => {
      scenario.bookFacingFront = false;
      await updateScenario(scenario, noUpdateDateTimeFlag);
      wrapper.classList.remove("facing-front");
      wrapper.querySelector(".book-front").style.transform = `rotateY(90deg)`;
      wrapper.querySelector(".book-front").style.transformOrigin = "0 " + bookLeftMargin + "px";
      wrapper.style.marginLeft = bookLeftMargin + "px";
      setTimeout(() => {
        wrapper.style.paddingRight = 0;
        wrapper.style.zIndex = 0;
      }, 500);
    });

    inner.appendChild(bookSpine);
    inner.appendChild(bookFront);
    shelfContainer.appendChild(wrapper);
  }
}

/**
 * リスト表示
 */
function renderBookshelfList(scenarios) {
  const listContainer = document.getElementById("bookshelf-list-container");
  listContainer.innerHTML = "";

  if (!scenarios || scenarios.length === 0) {
    listContainer.textContent = "本棚は空です。";
    return;
  }

  for (const sc of scenarios) {
    const div = document.createElement("div");
    div.className = "scenario-list";
    div.style.padding = "20px 10px";
    div.style.transition = "background-color 0.3s";
    div.setAttribute("data-scenario-id", sc.scenarioId);

    const infoDiv = document.createElement("div");
    infoDiv.className = "info";
    infoDiv.textContent = `ID:${sc.scenarioId} / ${sc.title} (更新:${sc.updatedAt})`;
    div.appendChild(infoDiv);

    const buttonsDiv = document.createElement("div");
    buttonsDiv.className = "buttons";

    // ▼ ダウンロードボタン
    const btnShare = document.createElement("button");
    btnShare.textContent = "ダウンロード";
    btnShare.className = "left-button";
    btnShare.addEventListener("click", () => {
      // ダウンロード用モーダルを表示するために対象シナリオを保持
      scenarioToDownload = sc;
      openDownloadModal();
    });
    buttonsDiv.appendChild(btnShare);

    // 読むボタン
    const btnContinue = document.createElement("button");
    btnContinue.textContent = "読む";
    btnContinue.addEventListener("click", async () => {
      sc.hideFromHistoryFlag = false;
      await updateScenario(sc);
      window.location.href = `scenario.html?scenarioId=${sc.scenarioId}`;
    });
    buttonsDiv.appendChild(btnContinue);

    // コピーするボタン
    const btnCopy = document.createElement("button");
    btnCopy.textContent = "コピーする";
    btnCopy.addEventListener("click", () => {
      scenarioToCopy = sc;
      const copyModal = document.getElementById("copy-scenario-modal");
      copyModal.classList.add("active");
    });
    buttonsDiv.appendChild(btnCopy);

    // ★ 編集ボタン (シナリオ編集モーダルを開く)
    const btnEdit = document.createElement("button");
    btnEdit.textContent = "編集";
    btnEdit.addEventListener("click", () => {
      openEditScenarioModal(sc.scenarioId);
    });
    buttonsDiv.appendChild(btnEdit);

    // 削除ボタン
    const btnDelete = document.createElement("button");
    btnDelete.textContent = "削除";
    btnDelete.style.backgroundColor = "rgb(244, 67, 54)";
    btnDelete.addEventListener("click", () => {
      scenarioToDelete = sc;
      const modal = document.getElementById("delete-scenario-modal");
      modal.classList.add("active");
    });
    buttonsDiv.appendChild(btnDelete);

    div.appendChild(buttonsDiv);
    listContainer.appendChild(div);
  }
}

/**
 * 背表紙クリック → リスト項目をハイライト
 */
function focusBookshelfListItem(scenarioId) {
  const listContainer = document.getElementById("bookshelf-list-container");
  listContainer.querySelectorAll(".scenario-list.selected").forEach(el => {
    el.classList.remove("selected");
  });
  const item = listContainer.querySelector(`[data-scenario-id="${scenarioId}"]`);
  if (item) {
    item.scrollIntoView({ behavior: "smooth", block: "center" });
    item.classList.add("selected");
    item.style.backgroundColor = "#444";
    setTimeout(() => {
      item.style.backgroundColor = "";
    }, 1500);
  }
}

/** シナリオコピー */
async function copyScenario(originalScenarioId) {
  const original = await getScenarioById(originalScenarioId);
  if (!original) throw new Error("コピー元が見つかりません");

  const newTitle = original.title + " (copy)";
  const newScenarioId = await createNewScenario(original.wizardData, newTitle);

  const newScenario = await getScenarioById(newScenarioId);
  newScenario.bookShelfFlag = true;
  newScenario.hideFromHistoryFlag = true;
  newScenario.bookFacingFront = false;

  // ★ default: useCoverImage=true
  if (typeof original.useCoverImage === "undefined") {
    newScenario.useCoverImage = true;
  } else {
    newScenario.useCoverImage = original.useCoverImage;
  }

  await updateScenario(newScenario);

  const entries = await getSceneEntriesByScenarioId(originalScenarioId);
  for (const e of entries) {
    const newEntry = {
      scenarioId: newScenarioId,
      type: e.type,
      content: e.content,
      content_en: e.content_en,
      dataUrl: e.dataUrl,
      prompt: e.prompt,
      sceneId: e.sceneId
    };
    await addSceneEntry(newEntry);
  }
}

/** 削除モーダル: OK */
async function onConfirmDeleteScenario() {
  if (!scenarioToDelete) {
    closeDeleteModal();
    return;
  }
  try {
    await deleteScenarioById(scenarioToDelete.scenarioId);
    refreshBookshelfView();
  } catch (e) {
    console.error(e);
    alert("削除に失敗しました。");
  } finally {
    scenarioToDelete = null;
    closeDeleteModal();
  }
}
function onCancelDeleteScenario() {
  scenarioToDelete = null;
  closeDeleteModal();
}
function closeDeleteModal() {
  const modal = document.getElementById("delete-scenario-modal");
  modal.classList.remove("active");
}
function closeCopyModal() {
  const modal = document.getElementById("copy-scenario-modal");
  modal.classList.remove("active");
}

/* ======================
   ダウンロード用モーダル
 ====================== */
function openDownloadModal() {
  const modal = document.getElementById("download-with-images-modal");
  if (!modal) return;
  modal.classList.add("active");
}
function closeDownloadModal() {
  const modal = document.getElementById("download-with-images-modal");
  if (!modal) return;
  modal.classList.remove("active");
}

/* ======================
   ドラッグ＆ドロップ
 ====================== */
function handleDragStart(event) {
  const scenarioId = event.currentTarget.getAttribute("data-scenario-id");
  event.dataTransfer.setData("text/plain", scenarioId);
  event.dataTransfer.effectAllowed = "move";
  event.currentTarget.classList.add("dragging");
}
function handleDragOver(event) {
  event.preventDefault();
  event.dataTransfer.dropEffect = "move";
}
function handleDragEnter(event) {
  event.preventDefault();
  const target = event.currentTarget;
  target.dragCounter = (target.dragCounter || 0) + 1;
  target.classList.add("drag-over");
}
function handleDragLeave(event) {
  const target = event.currentTarget;
  target.dragCounter = (target.dragCounter || 0) - 1;
  if (target.dragCounter <= 0) {
    target.classList.remove("drag-over");
    target.dragCounter = 0;
  }
}
function handleDrop(event) {
  event.preventDefault();
  event.currentTarget.classList.remove("drag-over");
  event.currentTarget.dragCounter = 0;

  const draggedScenarioId = event.dataTransfer.getData("text/plain");
  const shelfContainer = document.getElementById("bookshelf-container");
  const draggedEl = shelfContainer.querySelector(`[data-scenario-id="${draggedScenarioId}"]`);
  const dropTarget = event.currentTarget;
  if (!draggedEl || draggedEl === dropTarget) return;

  const rect = dropTarget.getBoundingClientRect();
  const offsetX = event.clientX - rect.left;
  if (offsetX < rect.width / 2) {
    shelfContainer.insertBefore(draggedEl, dropTarget);
  } else {
    shelfContainer.insertBefore(draggedEl, dropTarget.nextSibling);
  }
  updateBookshelfOrder();
}
function handleDragEnd(event) {
  const target = event.currentTarget;
  target.classList.remove("dragging");
  target.classList.remove("drag-over");
  target.dragCounter = 0;
}

/**
 * 並び順を更新
 */
async function updateBookshelfOrder() {
  const shelfContainer = document.getElementById("bookshelf-container");
  const wrappers = Array.from(shelfContainer.children);
  const total = wrappers.length;
  for (let i = 0; i < total; i++) {
    const scenarioId = wrappers[i].getAttribute("data-scenario-id");
    const newOrder = total - i;
    try {
      const scenario = await getScenarioById(Number(scenarioId));
      scenario.shelfOrder = newOrder;
      await updateScenario(scenario, true);
    } catch (err) {
      console.error("shelfOrder 更新エラー (scenarioId:", scenarioId, "):", err);
    }
  }
}

/* =========================================
   ダウンロード処理本体
 ========================================== */
function saveBlob(blob, filename) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  setTimeout(() => {
    URL.revokeObjectURL(url);
  }, 1000);
}

/**
 * 指定したシナリオについて ZIP を生成＆ダウンロード
 * includeImages === true なら画像も含む
 * false なら画像を除外
 */
async function exportScenarioAsZip(scenario, includeImages) {
  const zip = new JSZip();

  // シナリオ情報
  const scenarioObj = { ...scenario };
  // シーンエントリ
  const entries = await getSceneEntriesByScenarioId(scenario.scenarioId);

  let entriesToExport;
  if (includeImages) {
    entriesToExport = entries; // そのまま
  } else {
    // 画像(type==="image")を除外
    entriesToExport = entries.filter(e => e.type !== "image");
  }

  zip.file("scenario.json", JSON.stringify(scenarioObj, null, 2));
  zip.file("sceneEntries.json", JSON.stringify(entriesToExport, null, 2));

  const blob = await zip.generateAsync({ type: "blob" });
  const filename = (scenario.title || "scenario").replace(/[\\\/:*?"<>|]/g, "");
  saveBlob(blob, filename + ".zip");
}

/* =========================================
   アップロード処理
 ========================================== */
function setupScenarioUpload() {
  const uploadButton = document.querySelector("#upload button");
  const fileInput = document.getElementById("scenario-upload-input");
  if (!uploadButton || !fileInput) return;

  uploadButton.addEventListener("click", () => {
    fileInput.click();
  });

  fileInput.addEventListener("change", async (evt) => {
    const file = evt.target.files[0];
    if (!file) return;

    try {
      const zip = await JSZip.loadAsync(file);
      const scenarioFile = zip.file("scenario.json");
      const entriesFile = zip.file("sceneEntries.json");
      if (!scenarioFile || !entriesFile) {
        throw new Error("ZIPにscenario.jsonまたはsceneEntries.jsonがありません。");
      }

      const scenarioText = await scenarioFile.async("string");
      const scenarioJson = JSON.parse(scenarioText);
      const entriesText = await entriesFile.async("string");
      const entriesJson = JSON.parse(entriesText);

      const newScenarioId = await createNewScenario(
        scenarioJson.wizardData || {},
        scenarioJson.title || "無題"
      );
      const newScenario = await getScenarioById(newScenarioId);
      newScenario.bookShelfFlag = true;
      newScenario.updatedAt = new Date().toISOString();

      // useCoverImage が未設定ならデフォルト true
      if (typeof scenarioJson.useCoverImage === "undefined") {
        newScenario.useCoverImage = true;
      } else {
        newScenario.useCoverImage = scenarioJson.useCoverImage;
      }

      await updateScenario(newScenario);

      for (const entry of entriesJson) {
        const newEntry = { ...entry };
        delete newEntry.entryId;
        newEntry.scenarioId = newScenarioId;
        await addSceneEntry(newEntry);
      }

      alert("シナリオをアップロードしました。");
      refreshBookshelfView();
    } catch (err) {
      console.error("シナリオのアップロードに失敗:", err);
      alert("シナリオのアップロードに失敗しました: " + err.message);
    } finally {
      evt.target.value = "";
    }
  });
}

/* =======================
   シナリオ編集モーダル関連
 ======================= */
/**
 * 編集モーダルを開き、既存のシナリオ情報をフォームにセット
 */
async function openEditScenarioModal(scenarioId) {
  try {
    const sc = await getScenarioById(scenarioId);
    if (!sc) {
      alert("シナリオが見つかりません。");
      return;
    }
    scenarioToEdit = sc;
    // タイトル
    document.getElementById("edit-scenario-title").value = sc.title || "";

    // 装丁色(未設定時はデフォルトで #004755, #00d0ff)
    document.getElementById("edit-scenario-covercolor1").value = sc.coverColor1 || "#004755";
    document.getElementById("edit-scenario-covercolor2").value = sc.coverColor2 || "#00d0ff";

    // ▼ 装丁画像チップを初期化
    const coverImageChoice = document.getElementById("cover-image-choice");
    const chipOn = coverImageChoice.querySelector('.chip[data-value="on"]');
    const chipOff = coverImageChoice.querySelector('.chip[data-value="off"]');

    // いったんselectedを外す
    chipOn.classList.remove('selected');
    chipOff.classList.remove('selected');  // useCoverImage が true なら "on" を selected に
    // false なら "off" を selected に
    if (sc.useCoverImage) {
      chipOn.classList.add('selected');
    } else {
      chipOff.classList.add('selected');
    }


    document.getElementById("edit-scenario-modal").classList.add("active");
  } catch (err) {
    console.error(err);
    alert("編集情報の取得に失敗しました。");
  }
}
function setupChipEvents() {
  const coverImageChoice = document.getElementById("cover-image-choice");
  const chips = coverImageChoice.querySelectorAll(".chip");

  chips.forEach((chip) => {
    chip.addEventListener("click", () => {
      // 全ての chip から selected を外す
      chips.forEach((c) => c.classList.remove("selected"));
      // クリックされた chip のみに selected を付与
      chip.classList.add("selected");
    });
  });
}

function closeEditScenarioModal() {
  document.getElementById("edit-scenario-modal").classList.remove("active");
  scenarioToEdit = null;
}

/**
 * OKボタン押下: 入力内容を保存してモーダルを閉じる
 */
async function onSaveEditScenario() {
  if (!scenarioToEdit) {
    closeEditScenarioModal();
    return;
  }
  try {
    // フォームの内容を取得
    const newTitle = document.getElementById("edit-scenario-title").value.trim() || "";
    const newColor1 = document.getElementById("edit-scenario-covercolor1").value;
    const newColor2 = document.getElementById("edit-scenario-covercolor2").value;

    // チップ選択の状態を読み取り
    const coverImageChoice = document.getElementById("cover-image-choice");
    const selectedChip = coverImageChoice.querySelector('.chip.selected');
    let newUseCoverImage = true;
    if (selectedChip && selectedChip.dataset.value === "on") {
      newUseCoverImage = true;
    }

    // scenarioToEdit オブジェクトを更新して保存
    scenarioToEdit.useCoverImage = newUseCoverImage;
    await updateScenario(scenarioToEdit);


    // シナリオオブジェクトを更新
    scenarioToEdit.title = newTitle;
    scenarioToEdit.coverColor1 = newColor1;
    scenarioToEdit.coverColor2 = newColor2;
    scenarioToEdit.useCoverImage = newUseCoverImage;

    await updateScenario(scenarioToEdit);
    closeEditScenarioModal();
    refreshBookshelfView();
  } catch (err) {
    console.error(err);
    alert("シナリオの保存に失敗しました。");
  }
}
setupChipEvents();
window.initBookshelfPage = initBookshelfPage;
---- 
characterCreate.js 
// characterCreate.js

// グローバル変数
window.apiKey = localStorage.getItem("apiKey") || "";
window.characterData = [];

// 「舞台」は複数 => 配列
// 「雰囲気」は単一
let storedStageArr = [];
let storedMood = "";

// カスタム候補
let customStageChips = [];
let customMoodChips = [];

// 「その他」モーダルで現在操作中のカテゴリ
let currentOtherCategory = "";

// 削除確認用
let deletingChipLabel = "";
let deletingChipCategory = "";

// ページ読み込み時
window.addEventListener("load", async function () {
  // 1) IndexedDB初期化 & キャラデータロード
  await initIndexedDB();
  const storedChars = await loadCharacterDataFromIndexedDB();
  if (storedChars) {
    window.characterData = storedChars;
  }

  // 2) localStorage から読み込み(舞台, 雰囲気)
  const stageJson = localStorage.getItem("elementStageArr");
  if (stageJson) {
    try {
      storedStageArr = JSON.parse(stageJson);
    } catch (e) {
      storedStageArr = [];
    }
  } else {
    storedStageArr = [];
  }
  storedMood = localStorage.getItem("elementMood") || "";

  // カスタムチップ読み込み
  customStageChips = loadCustomChipsFromLocalStorage("customStageChips");
  customMoodChips = loadCustomChipsFromLocalStorage("customMoodChips");

  // 3) UIイベント登録
  document.getElementById("gacha-btn").addEventListener("click", onGachaButton);
  document.getElementById("genre-setting-ok-btn").addEventListener("click", onGenreSettingOk);
  document.getElementById("genre-setting-cancel-btn").addEventListener("click", onGenreSettingCancel);

  // 「その他」モーダル
  document.getElementById("other-generate-btn").addEventListener("click", onOtherGenerate);
  document.getElementById("other-ok-btn").addEventListener("click", onOtherOk);
  document.getElementById("other-cancel-btn").addEventListener("click", onOtherCancel);

  // 「削除」確認モーダル
  document.getElementById("delete-confirm-ok").addEventListener("click", onDeleteConfirmOk);
  document.getElementById("delete-confirm-cancel").addEventListener("click", onDeleteConfirmCancel);

  // 「すべて見る」ボタン
  document.getElementById("see-all-btn").addEventListener("click", onSeeAllCards);

  // プレビュー用モーダルの「閉じる」ボタン
  const previewCloseBtn = document.getElementById("card-preview-close-btn");
  previewCloseBtn.addEventListener("click", () => {
    const modal = document.getElementById("card-image-preview-modal");
    modal.classList.remove("active");
  });

  // ★ モーダル外側クリックで閉じる
  const cardPreviewModal = document.getElementById("card-image-preview-modal");
  cardPreviewModal.addEventListener("click", (e) => {
    if (e.target === cardPreviewModal) {
      cardPreviewModal.classList.remove("active");
    }
  });

  // 4) チップ表示
  initStageChips();
  initMoodChips();

  // 5) 「選んだジャンルの出力例」 ラベル更新
  updateGenreResultLabel();

  // 6) ローカルストレージに記録されている「直近生成カード」一覧を表示
  const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
  let storedIds = [];
  try {
    storedIds = JSON.parse(storedIdsStr);
  } catch (e) {
    storedIds = [];
  }
  displayRecentlyCreatedCards(storedIds);

  // 画面リサイズ時に再度「直近生成カード」を描画し直す
  window.addEventListener("resize", () => {
    const reIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let reIds = [];
    try {
      reIds = JSON.parse(reIdsStr);
    } catch (e) {
      reIds = [];
    }
    displayRecentlyCreatedCards(reIds);
  });
});

/** 「その他」カスタムチップ用 */
function loadCustomChipsFromLocalStorage(key) {
  try {
    const j = localStorage.getItem(key);
    if (!j) return [];
    return JSON.parse(j);
  } catch (e) {
    return [];
  }
}
function saveCustomChipsToLocalStorage(key, arr) {
  localStorage.setItem(key, JSON.stringify(arr));
}

/* -------------------------
   チップ生成・表示
------------------------- */
function initStageChips() {
  const defaultStageCandidates = [
    "ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク"
  ];
  const container = document.getElementById("stage-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const allStageChips = [...defaultStageCandidates, ...customStageChips, "その他"];
  allStageChips.forEach(label => {
    const chip = createChipElement(label, "stage");
    container.appendChild(chip);
  });
}

function initMoodChips() {
  const defaultMoodCandidates = [
    "ライト / ポップ",
    "中間 / バランス型",
    "ダーク / シリアス"
  ];
  const container = document.getElementById("mood-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const allMoodChips = [...defaultMoodCandidates, ...customMoodChips, "その他"];
  allMoodChips.forEach(label => {
    const chip = createChipElement(label, "mood");
    container.appendChild(chip);
  });
}

function createChipElement(label, category) {
  const isOther = (label === "その他");

  const chip = document.createElement("div");
  chip.className = "chip";
  chip.textContent = label;

  // 選択状態
  if (category === "stage") {
    if (storedStageArr.includes(label)) {
      chip.classList.add("selected");
    }
  } else if (category === "mood") {
    if (storedMood === label) {
      chip.classList.add("selected");
    }
  }

  // クリック動作
  chip.addEventListener("click", () => {
    if (isOther) {
      openOtherModal(category);
      return;
    }
    if (category === "stage") {
      // 複数選択
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        storedStageArr = storedStageArr.filter(x => x !== label);
      } else {
        chip.classList.add("selected");
        storedStageArr.push(label);
      }
      localStorage.setItem("elementStageArr", JSON.stringify(storedStageArr));
    } else if (category === "mood") {
      // 単一
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        storedMood = "";
        localStorage.setItem("elementMood", "");
      } else {
        const container = document.getElementById("mood-chips-container");
        const all = container.querySelectorAll(".chip");
        all.forEach(c => c.classList.remove("selected"));
        chip.classList.add("selected");
        storedMood = label;
        localStorage.setItem("elementMood", storedMood);
      }
    }
    updateGenreResultLabel();
  });

  // カスタム削除ボタン
  if (!isOther) {
    if (category === "stage" && customStageChips.includes(label)) {
      addRemoveButton(chip, label, "stage");
    } else if (category === "mood" && customMoodChips.includes(label)) {
      addRemoveButton(chip, label, "mood");
    }
  }

  return chip;
}

function addRemoveButton(chip, label, category) {
  const span = document.createElement("span");
  span.textContent = "×";
  span.style.marginLeft = "4px";
  span.style.cursor = "pointer";
  span.style.color = "red";
  span.addEventListener("click", (e) => {
    e.stopPropagation();
    deletingChipLabel = label;
    deletingChipCategory = category;
    document.getElementById("delete-confirm-modal").classList.add("active");
  });
  chip.appendChild(span);
}

/** 「その他」モーダル */
function openOtherModal(category) {
  currentOtherCategory = category;
  document.getElementById("other-input-modal-category").textContent =
    (category === "stage") ? "舞台に追加する「その他」" : "雰囲気に追加する「その他」";
  document.getElementById("other-input-text").value = "";
  document.getElementById("other-input-modal").classList.add("active");
}
async function onOtherGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  let existingList = [];
  if (currentOtherCategory === "stage") {
    existingList = ["ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク", ...customStageChips];
  } else {
    existingList = ["ライト / ポップ", "中間 / バランス型", "ダーク / シリアス", ...customMoodChips];
  }

  const gachaModal = document.getElementById("gacha-modal");
  gachaModal.classList.add("active");
  try {
    const systemPrompt = "あなたは創造力豊かなアシスタントです。回答は1つだけ。";
    const userPrompt = `既存候補:${existingList.join(" / ")}\nこれらに無い新しい案を1つ提案してください。`;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    const newCandidate = (data.choices[0].message.content || "").trim();
    document.getElementById("other-input-text").value = newCandidate;
  } catch (err) {
    console.error(err);
    showToast("その他生成失敗:\n" + err.message);
  } finally {
    gachaModal.classList.remove("active");
  }
}
function onOtherOk() {
  const text = document.getElementById("other-input-text").value.trim();
  document.getElementById("other-input-modal").classList.remove("active");
  if (!text) return;

  if (currentOtherCategory === "stage") {
    if (!customStageChips.includes(text)) {
      customStageChips.push(text);
      saveCustomChipsToLocalStorage("customStageChips", customStageChips);
    }
    initStageChips();
  } else {
    if (!customMoodChips.includes(text)) {
      customMoodChips.push(text);
      saveCustomChipsToLocalStorage("customMoodChips", customMoodChips);
    }
    initMoodChips();
  }
}
function onOtherCancel() {
  document.getElementById("other-input-modal").classList.remove("active");
}

/** 削除確認モーダル */
function onDeleteConfirmOk() {
  document.getElementById("delete-confirm-modal").classList.remove("active");

  if (deletingChipCategory === "stage") {
    customStageChips = customStageChips.filter(c => c !== deletingChipLabel);
    saveCustomChipsToLocalStorage("customStageChips", customStageChips);
    storedStageArr = storedStageArr.filter(x => x !== deletingChipLabel);
    localStorage.setItem("elementStageArr", JSON.stringify(storedStageArr));
    initStageChips();
  } else {
    customMoodChips = customMoodChips.filter(c => c !== deletingChipLabel);
    saveCustomChipsToLocalStorage("customMoodChips", customMoodChips);
    if (storedMood === deletingChipLabel) {
      storedMood = "";
      localStorage.setItem("elementMood", "");
    }
    initMoodChips();
  }
  deletingChipLabel = "";
  deletingChipCategory = "";
  updateGenreResultLabel();
}
function onDeleteConfirmCancel() {
  deletingChipLabel = "";
  deletingChipCategory = "";
  document.getElementById("delete-confirm-modal").classList.remove("active");
}

/** ジャンルラベル更新 */
function updateGenreResultLabel() {
  let stagePart = storedStageArr.length > 0 ? "【舞台】" + storedStageArr.join(" / ") : "";
  let moodPart = storedMood ? "【雰囲気】" + storedMood : "";
  document.getElementById("genre-result-text").textContent = stagePart + moodPart;
}

/* -------------------------
   ガチャ関連
------------------------- */
function onGachaButton() {
  // ジャンル選択モーダルを開く
  initStageChips();
  initMoodChips();
  document.getElementById("element-genre-modal").classList.add("active");
}
function onGenreSettingOk() {
  document.getElementById("element-genre-modal").classList.remove("active");

  const axisPrompt = buildAxisPrompt();
  const gachaModal = document.getElementById("gacha-modal");
  gachaModal.classList.add("active");

  runGacha(10, axisPrompt).then(() => {
    gachaModal.classList.remove("active");

    // 生成後、最新のIDリストを再取得
    const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let storedIds = [];
    try {
      storedIds = JSON.parse(storedIdsStr);
    } catch (e) {
      storedIds = [];
    }
    displayRecentlyCreatedCards(storedIds);

    // レア度3以上の flipped カードがあれば「すべて見る」ボタンを表示
    showSeeAllButtonIfNeeded(storedIds);
  }).catch(err => {
    console.error(err);
    gachaModal.classList.remove("active");
  });
}
function onGenreSettingCancel() {
  document.getElementById("element-genre-modal").classList.remove("active");
}
function buildAxisPrompt() {
  const lines = [];
  if (storedStageArr.length > 0) {
    lines.push("【舞台】" + storedStageArr.join(" / "));
  }
  if (storedMood) {
    lines.push("【雰囲気】" + storedMood);
  }
  return lines.join("\n");
}

/** すべて見るボタンの表示可否 */
function showSeeAllButtonIfNeeded(newIds) {
  const seeAllBtn = document.getElementById("see-all-btn");
  if (!seeAllBtn) return;
  const hasFlipped = window.characterData.some(c => newIds.includes(c.id) && c.flipped);
  seeAllBtn.style.display = hasFlipped ? "inline-block" : "none";
}

/**
 * 「すべて見る」押下
 * -> flipped状態を順番に外すアニメーション
 */
async function onSeeAllCards() {
  const seeAllBtn = document.getElementById("see-all-btn");
  seeAllBtn.style.display = "none";

  const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
  let storedIds = [];
  try {
    storedIds = JSON.parse(storedIdsStr);
  } catch (e) {
    storedIds = [];
  }

  // フリップされているカードだけ取り出す
  const flippedCards = window.characterData.filter(c => storedIds.includes(c.id) && c.flipped);

  // 順番に1枚ずつフリップを外す
  for (let i = 0; i < flippedCards.length; i++) {
    const c = flippedCards[i];
    c.flipped = false; // データ更新

    // DOM上の該当カードを検索して flippedクラスを外す
    const cardEl = document.querySelector(`.card[data-id="${c.id}"]`);
    if (cardEl && cardEl.classList.contains("flipped")) {
      cardEl.classList.remove("flipped");
    }

    // 100ms ずつディレイを入れて順番に外す
    // (数値はお好みで変更)
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  // 全部外したら保存して再描画
  if (flippedCards.length > 0) {
    await saveCharacterDataToIndexedDB(window.characterData);
  }
  displayRecentlyCreatedCards(storedIds);
}

/** 直近生成したカードを表示 */
function displayRecentlyCreatedCards(cardIds) {
  const container = document.getElementById("card-container");
  if (!container) return;
  container.innerHTML = "";

  if (!cardIds || cardIds.length === 0) {
    container.textContent = "まだエレメントが生成されていません。";
    return;
  }

  const toShow = window.characterData.filter(c => cardIds.includes(c.id));
  if (toShow.length === 0) {
    container.textContent = "まだエレメントが生成されていません。";
    return;
  }

  toShow.forEach(ch => {
    const cardEl = createCardElement(ch);
    container.appendChild(cardEl);
  });
  fillDummyItemsForLastRow(container, toShow.length);
}

/** カードDOM生成 */
function createCardElement(char) {
  const card = document.createElement("div");
  card.className = "card rarity" + char.rarity.replace("★", "").trim();
  card.setAttribute("data-id", char.id);

  if (char.flipped) {
    card.classList.add("flipped");
  }

  card.addEventListener("click", () => {
    if (card.classList.contains("flipped")) {
      card.classList.remove("flipped");
      char.flipped = false;
      const idx = window.characterData.findIndex(c => c.id === char.id);
      if (idx !== -1) {
        window.characterData[idx].flipped = false;
      }
      saveCharacterDataToIndexedDB(window.characterData);
    } else {
      if (char.imageData) {
        openCardPreview(char.imageData);
      } else {
        showToast("画像がありません");
      }
    }
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";

  const rarityValue = (typeof char.rarity === "string")
    ? char.rarity.replace("★", "").trim()
    : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  // 背景CSS
  const bgStyle = (char.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  if (bgStyle) {
    cardFront.style.backgroundImage = bgStyle;
  }

  // タイプ
  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = char.type || "不明";
  cardFront.appendChild(typeEl);

  // 画像
  const imageContainer = document.createElement("div");
  imageContainer.className = "card-image";
  if (char.imageData) {
    const imageEl = document.createElement("img");
    imageEl.src = char.imageData;
    imageEl.alt = char.name;
    imageContainer.appendChild(imageEl);
  } else {
    const genImgBtn = document.createElement("button");
    genImgBtn.className = "gen-image-btn";
    genImgBtn.textContent = "画像生成";
    genImgBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      generateCharacterImage(char, genImgBtn);
    });
    imageContainer.appendChild(genImgBtn);
  }
  cardFront.appendChild(imageContainer);

  // 情報
  const infoContainer = document.createElement("div");
  infoContainer.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = `<h3>${DOMPurify.sanitize(char.name)}</h3>`;
  infoContainer.appendChild(nameEl);

  if (char.state) {
    const stateEl = document.createElement("p");
    stateEl.innerHTML = `<strong>状態：</strong>${DOMPurify.sanitize(char.state)}`;
    infoContainer.appendChild(stateEl);
  }
  const specialEl = document.createElement("p");
  specialEl.innerHTML = `<strong>特技：</strong>${DOMPurify.sanitize(char.special)}`;
  infoContainer.appendChild(specialEl);

  const captionEl = document.createElement("p");
  captionEl.innerHTML = `<span>${DOMPurify.sanitize(char.caption)}</span>`;
  infoContainer.appendChild(captionEl);

  cardFront.appendChild(infoContainer);

  // 裏面
  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(char.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  card.appendChild(cardInner);

  return card;
}

/** 画像プレビューを表示 */
function openCardPreview(imageUrl) {
  const modal = document.getElementById("card-image-preview-modal");
  const imgEl = document.getElementById("card-preview-img");
  imgEl.src = imageUrl;
  modal.classList.add("active");
}

/** 画像生成 */
async function generateCharacterImage(char, btnElement) {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  if (btnElement) {
    btnElement.disabled = true;
  }
  showToast("画像を生成しています...");

  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
    (char.imageprompt || "");

  const rarityNum = parseInt(char.rarity.replace("★", "").trim()) || 0;
  const size = (rarityNum >= 3) ? "1024x1792" : "1792x1024";

  try {
    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size,
        response_format: "b64_json",
      }),
    });

    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // 更新
    const idx = window.characterData.findIndex(c => c.id === char.id);
    if (idx !== -1) {
      window.characterData[idx].imageData = dataUrl;
      await saveCharacterDataToIndexedDB(window.characterData);
    }

    showToast("画像の生成が完了しました");
    // 再描画
    const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let storedIds = [];
    try {
      storedIds = JSON.parse(storedIdsStr);
    } catch (e) {
      storedIds = [];
    }
    displayRecentlyCreatedCards(storedIds);
  } catch (err) {
    console.error("画像生成失敗:", err);
    showToast("画像生成に失敗しました:\n" + err.message);
  } finally {
    if (btnElement) {
      btnElement.disabled = false;
    }
  }
}

/* 最終行ダミー埋め */
function fillDummyItemsForLastRow(container, realCount) {
  const firstCard = container.querySelector(".card:not(.dummy)");
  if (!firstCard) return;

  const style = getComputedStyle(firstCard);
  const cardWidth = parseFloat(style.width);
  const containerWidth = container.clientWidth;
  if (containerWidth <= 0 || isNaN(cardWidth)) return;

  const containerStyle = getComputedStyle(container);
  const gapStr = containerStyle.columnGap || containerStyle.gap || "0";
  const gap = parseFloat(gapStr) || 0;

  let itemsPerRow = 1;
  for (let n = 1; n < 999; n++) {
    const total = n * cardWidth + (n - 1) * gap;
    if (total <= containerWidth) {
      itemsPerRow = n;
    } else {
      break;
    }
  }

  const remainder = realCount % itemsPerRow;
  if (remainder === 0) return;
  const dummyCount = itemsPerRow - remainder;
  for (let i = 0; i < dummyCount; i++) {
    const dummyEl = document.createElement("div");
    dummyEl.className = "card dummy";
    container.appendChild(dummyEl);
  }
}
---- 
common.js 
/*******************************************************
 * common.js
 * アプリ全体で使い回す共通関数をまとめるファイルです。
 *******************************************************/

/**
 * 簡易トーストメッセージの表示
 * （画面右下にふわっと3秒ほど出す）
 */
function showToast(message) {
  // 既存トーストがあれば削除
  const oldToast = document.getElementById("toast-message");
  if (oldToast) {
    oldToast.remove();
  }

  // 新規トースト要素を作成
  const toast = document.createElement("div");
  toast.id = "toast-message";
  toast.textContent = message;

  // スタイル設定
  toast.style.position = "fixed";
  toast.style.bottom = "20px";
  toast.style.left = "50%";
  toast.style.transform = "translateX(-50%)";
  toast.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
  toast.style.color = "#fff";
  toast.style.padding = "10px 20px";
  toast.style.borderRadius = "4px";
  toast.style.fontSize = "14px";
  toast.style.zIndex = "9999";
  toast.style.opacity = "0";
  toast.style.transition = "opacity 0.3s ease";

  document.body.appendChild(toast);

  // フェードイン
  requestAnimationFrame(() => {
    toast.style.opacity = "1";
  });

  // 3秒後にフェードアウトして削除
  setTimeout(() => {
    toast.style.opacity = "0";
    toast.addEventListener("transitionend", () => {
      toast.remove();
    });
  }, 3000);
}
---- 
exportImportMulti.js 
// js/exportImportMulti.js

// ====================== 設定 ======================

// 画像を含むストア名
const IMAGE_STORES = ["characterData", "bgImages"];

// すべてのストア名
const STORE_NAMES = [
  "characterData",
  "scenarios",
  "sceneEntries",
  "wizardState",
  "parties",
  "bgImages",
  "sceneSummaries",
  "endings"
];

/**
 * 不正サロゲートペアを除去するreplacer (JSON.stringify用)
 */
function removeInvalidSurrogates(key, value) {
  if (typeof value === "string") {
    return value.replace(/[\uD800-\uDFFF]/g, "");
  }
  return value;
}

/**
 * Base64 -> Uint8Array
 */
function base64ToUint8Array(base64) {
  const binStr = atob(base64.replace(/^data:\w+\/\w+;base64,/, ""));
  const len = binStr.length;
  const bytes = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    bytes[i] = binStr.charCodeAt(i);
  }
  return bytes;
}

/**
 * Uint8Array -> dataURL (Base64)
 *   mimeType は"image/png"など
 */
function uint8ArrayToBase64(uint8Arr, mimeType = "image/png") {
  let binary = "";
  for (let i = 0; i < uint8Arr.length; i++) {
    binary += String.fromCharCode(uint8Arr[i]);
  }
  const base64 = btoa(binary);
  return `data:${mimeType};base64,${base64}`;
}

/**
 * IndexedDBから全件取得
 */
function getAllFromStore(storeName) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction(storeName, "readonly");
    const store = tx.objectStore(storeName);
    const req = store.getAll();
    req.onsuccess = (evt) => {
      resolve(evt.target.result || []);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * ストアをclearして配列のデータをput
 */
function clearAndPutStoreData(storeName, dataArray) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction(storeName, "readwrite");
    const store = tx.objectStore(storeName);
    store.clear().onsuccess = () => {
      let i = 0;
      function putNext() {
        if (i >= dataArray.length) {
          resolve();
          return;
        }
        const item = dataArray[i++];
        const putReq = store.put(item);
        putReq.onsuccess = putNext;
        putReq.onerror = (err) => reject(err);
      }
      putNext();
    };
    tx.onerror = (err) => reject(err);
  });
}

/**
 * ============== メタデータZIPをエクスポート =============
 *  - localStorage
 *  - 画像以外のストア (scenarios, sceneEntries, etc)
 */
async function exportMetadataZip() {
  try {
    const zip = new JSZip();

    // localStorage -> localStorage.json
    const localData = {};
    for (let i = 0; i < localStorage.length; i++) {
      const k = localStorage.key(i);
      localData[k] = localStorage.getItem(k);
    }
    zip.file("localStorage.json", JSON.stringify(localData, removeInvalidSurrogates, 2));

    // 画像以外のストアを export
    for (const storeName of STORE_NAMES) {
      if (IMAGE_STORES.includes(storeName)) continue; // スキップ(画像系は別)

      const dataArr = await getAllFromStore(storeName);
      const jsonStr = JSON.stringify(dataArr, removeInvalidSurrogates, 2);
      zip.file(`indexedDB/${storeName}.json`, jsonStr);
    }

    // zip ダウンロード
    const blob = await zip.generateAsync({ type: "blob" });
    saveAs(blob, "metadata.zip");
    alert("メタデータのエクスポートが完了しました (metadata.zip)");
  } catch (err) {
    console.error("exportMetadataZip失敗:", err);
    alert("メタデータのエクスポートに失敗:\n" + err.message);
  }
}

/**
 * ============== 画像ZIPをエクスポート =============
 *  - characterData, bgImages など
 *  - 各レコードの imageData を個別PNGにして格納し、JSON側は参照パス(__EXTERNAL__)に
 */
async function exportImagesZip() {
  try {
    const zip = new JSZip();

    for (const storeName of IMAGE_STORES) {
      const dataArr = await getAllFromStore(storeName);

      for (const record of dataArr) {
        if (record.imageData) {
          // Base64 -> バイナリ
          const bin = base64ToUint8Array(record.imageData);
          // ファイル名
          const fileName = `${storeName}/${record.id || "no_id"}.png`;
          // ZIPに追加
          zip.file(fileName, bin);
          // JSON側は __EXTERNAL__参照
          record.imageData = `__EXTERNAL__${fileName}`;
        }
      }

      // JSONファイルにも保存
      const jsonStr = JSON.stringify(dataArr, removeInvalidSurrogates, 2);
      zip.file(`indexedDB/${storeName}.json`, jsonStr);
    }

    // zip ダウンロード
    const blob = await zip.generateAsync({ type: "blob" });
    saveAs(blob, "images.zip");
    alert("画像のエクスポートが完了しました (images.zip)");
  } catch (err) {
    console.error("exportImagesZip失敗:", err);
    alert("画像のエクスポートに失敗:\n" + err.message);
  }
}

/**
 * ============== メタデータZIPをインポート =============
 *  - localStorage.json
 *  - 画像以外のストア *.json
 */
async function importMetadataZip(file) {
  try {
    const zip = await JSZip.loadAsync(file);

    // localStorage.json
    const lsFile = zip.file("localStorage.json");
    if (lsFile) {
      const lsText = await lsFile.async("string");
      const lsObj = JSON.parse(lsText);
      localStorage.clear();
      for (const [k, v] of Object.entries(lsObj)) {
        localStorage.setItem(k, v);
      }
    }

    // 画像以外のストアをインポート
    for (const storeName of STORE_NAMES) {
      if (IMAGE_STORES.includes(storeName)) continue; // スキップ(画像系は別)

      const storeJsonFile = zip.file(`indexedDB/${storeName}.json`);
      if (!storeJsonFile) continue;

      const jsonText = await storeJsonFile.async("string");
      const dataArr = JSON.parse(jsonText);
      await clearAndPutStoreData(storeName, dataArr);
    }

    alert("メタデータZIPのインポートが完了しました");
  } catch (err) {
    console.error("importMetadataZip失敗:", err);
    alert("メタデータインポートに失敗:\n" + err.message);
  }
}

/**
 * ============== 画像ZIPをインポート =============
 *  - 画像ストア *.json
 *  - __EXTERNAL__xxx.png の実ファイルをBase64復元
 */
async function importImagesZip(file) {
  try {
    const zip = await JSZip.loadAsync(file);

    for (const storeName of IMAGE_STORES) {
      const storeJsonFile = zip.file(`indexedDB/${storeName}.json`);
      if (!storeJsonFile) continue;

      const jsonText = await storeJsonFile.async("string");
      const dataArr = JSON.parse(jsonText);

      // 画像ファイルを復元
      for (const record of dataArr) {
        if (record.imageData && record.imageData.startsWith("__EXTERNAL__")) {
          const filePath = record.imageData.replace("__EXTERNAL__", "");
          const imgFile = zip.file(filePath);
          if (imgFile) {
            const uint8 = await imgFile.async("uint8array");
            record.imageData = uint8ArrayToBase64(uint8, "image/png");
          } else {
            console.warn("画像ファイルが見つかりません:", filePath);
            record.imageData = ""; // 見つからない場合は空にする or エラーにする
          }
        }
      }

      // ストアに書き戻し
      await clearAndPutStoreData(storeName, dataArr);
    }

    alert("画像ZIPのインポートが完了しました");
  } catch (err) {
    console.error("importImagesZip失敗:", err);
    alert("画像インポートに失敗:\n" + err.message);
  }
}

/**
 * 画面上のボタンを取得して処理を紐付け
 */
document.addEventListener("DOMContentLoaded", () => {
  // エクスポートボタン
  const exportMetaBtn = document.getElementById("export-metadata-button");
  const exportImgBtn = document.getElementById("export-images-button");

  // インポートボタン & ファイル入力
  const importMetaBtn = document.getElementById("import-metadata-button");
  const importMetaInput = document.getElementById("import-metadata-file");
  const importImgBtn = document.getElementById("import-images-button");
  const importImgInput = document.getElementById("import-images-file");

  if (exportMetaBtn) {
    exportMetaBtn.addEventListener("click", exportMetadataZip);
  }
  if (exportImgBtn) {
    exportImgBtn.addEventListener("click", exportImagesZip);
  }

  if (importMetaBtn && importMetaInput) {
    importMetaBtn.addEventListener("click", () => importMetaInput.click());
    importMetaInput.addEventListener("change", (evt) => {
      const file = evt.target.files[0];
      if (file) {
        importMetadataZip(file);
      }
      evt.target.value = ""; // 選択リセット
    });
  }

  if (importImgBtn && importImgInput) {
    importImgBtn.addEventListener("click", () => importImgInput.click());
    importImgInput.addEventListener("change", (evt) => {
      const file = evt.target.files[0];
      if (file) {
        importImagesZip(file);
      }
      evt.target.value = "";
    });
  }
});
---- 
gachaCore.js 
// gachaCore.js
// ------------------------------------------
// 「ガチャ処理」のロジックだけを集めたファイル
// ------------------------------------------

// グローバルに必要な変数 (characterData, apiKey など) は
// すでに window に存在すると仮定 (indexedDB や parse等も)


// --------------------------------------------------------
// 1. runGacha(cardCount, addPrompt, onlyTitle = "", onlyType = "")
//
//   - 指定枚数のエレメントをChatGPTで生成し、window.characterDataに加える
//   - 生成カードは最初から group="Warehouse" として保存する
//   - 生成完了後、localStorage["latestCreatedIds"] を
//     「今回生成したIDのみに」上書き保存し、
//     画面側でそれらを表示する
// --------------------------------------------------------
async function runGacha(cardCount, addPrompt, onlyTitle = "", onlyType = "") {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  // キャンセル用
  window.currentGachaController = new AbortController();
  const signal = window.currentGachaController.signal;

  // レア度をランダムで決定
  const rarities = pickRaritiesForNCards(cardCount);
  const countMap = makeRarityCountMap(rarities);

  // system
  let systemContent = `
  あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
  以下の6段階のレア度「★0～★5」のうち、
  今回の${cardCount}件では以下の内訳を厳密に守って生成してください：
  - ★0: ${countMap["★0"]}件
  - ★1: ${countMap["★1"]}件
  - ★2: ${countMap["★2"]}件
  - ★3: ${countMap["★3"]}件
  - ★4: ${countMap["★4"]}件
  - ★5: ${countMap["★5"]}件

  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：...
  【タイプ】：キャラクターまたはモンスター
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：...
  【タイプ】：アイテム
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;

  let userContent = `${addPrompt}合計${cardCount}件、順番は問わないので上記レア度数で生成してください。`;
  if (onlyTitle) {
    // タイトル指定がある場合
    systemContent = `
    あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
    6段階のレア度「★0～★5」のどれかを${onlyTitle}の名称から判断して設定してください。

  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：${onlyTitle}
  【タイプ】：${onlyType}
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：${onlyType}
  【タイプ】：${onlyType}
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;
    userContent = `${addPrompt}上記レア度数で生成してください。`;
  }

  const messages = [
    { role: "system", content: systemContent },
    { role: "user", content: userContent },
  ];

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.7,
      }),
      signal,
    });
    if (signal.aborted) {
      return;
    }

    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }

    const text = data?.choices?.[0]?.message?.content;
    if (typeof text !== "string") {
      throw new Error("エレメント生成APIレスポンスが不正です。");
    }
    console.log("text", text);

    // 生成結果をパース
    const newCards = parseCharacterData(text);

    // ガチャ箱は廃止 → 生成後は group="Warehouse" に
    newCards.forEach(card => {
      card.group = "Warehouse";
    });

    // 既存 characterData に追加
    window.characterData.push(...newCards);

    // IndexedDB に保存
    await saveCharacterDataToIndexedDB(window.characterData);

    // localStorage["latestCreatedIds"] を
    // 「今回生成したIDのみに」上書き (＝以前のIDはクリア)
    const newIds = newCards.map(c => c.id);
    localStorage.setItem("latestCreatedIds", JSON.stringify(newIds));
    console.log("【最新生成IDsを上書き】:", newIds);

  } catch (err) {
    if (err.name === "AbortError") {
      console.log("runGachaキャンセル");
    } else {
      console.error("runGacha失敗:", err);
      alert("エレメント生成に失敗しました:\n" + err.message);
    }
  }
}


// --------------------------------------------------------
// 2. parseCharacterData( text )
//    - GPTレスポンスを解析してカード配列を生成
// --------------------------------------------------------
function parseCharacterData(text) {
  const lines = text.split("\n");
  const characters = [];
  let currentChar = {
    id: "",
    type: "",
    name: "",
    state: "",
    special: "",
    caption: "",
    rarity: "★0",
    backgroundcss: "",
    imageprompt: "",
    group: "Warehouse",
    flipped: false // ★ デフォルトはfalse
  };

  function pushCurrentChar() {
    currentChar.id = "card_" + Date.now() + "_" + Math.random().toString(36).substring(2);
    characters.push({ ...currentChar });
    currentChar = {
      id: "",
      type: "",
      name: "",
      state: "",
      special: "",
      caption: "",
      rarity: "★0",
      backgroundcss: "",
      imageprompt: "",
      group: "Warehouse",
      flipped: false
    };
  }

  lines.forEach((line) => {
    line = line.trim();
    if (line.startsWith("【名前】")) {
      // 名前が続けて出てきたら新キャラ扱い
      if (currentChar.name) pushCurrentChar();
      currentChar.name = line.replace("【名前】", "").replace("：", "").trim();
    } else if (line.startsWith("【タイプ】")) {
      currentChar.type = line.replace("【タイプ】", "").replace("：", "").trim();
    } else if (line.startsWith("【状態】")) {
      currentChar.state = line.replace("【状態】", "").replace("：", "").trim();
    } else if (line.startsWith("【特技】")) {
      currentChar.special = line.replace("【特技】", "").replace("：", "").trim();
    } else if (line.startsWith("【キャプション】")) {
      currentChar.caption = line.replace("【キャプション】", "").replace("：", "").trim();
    } else if (line.startsWith("【レア度】")) {
      currentChar.rarity = line.replace("【レア度】", "").replace("：", "").trim();

      // ★ 追加: レア度3以上なら flipped = true を付与
      const rarityNum = parseInt(currentChar.rarity.replace("★", "").trim()) || 0;
      if (rarityNum >= 1) {
        currentChar.flipped = true;
      }
    } else if (line.startsWith("【カード背景】")) {
      currentChar.backgroundcss = line.replace("【カード背景】", "").replace("：", "").trim();
    } else if (line.startsWith("【外見】")) {
      currentChar.imageprompt = line.replace("【外見】", "").replace("：", "").trim();
    }
  });
  // 最後にキャラがあればプッシュ
  if (currentChar.name) {
    pushCurrentChar();
  }
  return characters;
}


// --------------------------------------------------------
// 3. pickRaritiesForNCards( n ), makeRarityCountMap( rarities )
// --------------------------------------------------------
function pickRaritiesForNCards(n) {
  const rarityDist = [
    { star: "★0", probability: 0.50 },
    { star: "★1", probability: 0.20 },
    { star: "★2", probability: 0.15 },
    { star: "★3", probability: 0.10 },
    { star: "★4", probability: 0.045 },
    { star: "★5", probability: 0.005 },
  ];
  const results = [];
  for (let i = 0; i < n; i++) {
    const rand = Math.random();
    let cum = 0;
    for (const r of rarityDist) {
      cum += r.probability;
      if (rand <= cum) {
        results.push(r.star);
        break;
      }
    }
  }
  return results;
}

function makeRarityCountMap(rarities) {
  const counts = { "★0": 0, "★1": 0, "★2": 0, "★3": 0, "★4": 0, "★5": 0 };
  rarities.forEach((r) => {
    counts[r] = (counts[r] || 0) + 1;
  });
  return counts;
}

// -----------------------------------
window.runGacha = runGacha;
---- 
indexedDB.js 
/********************************
 * indexedDB.js
 * IndexedDB関連の初期化・保存・読み込み等を担当
 ********************************/

let db = null;

/**
 * DB初期化
 * バージョン12:
 *  - scenariosストアに "bookShelfFlag" と "hideFromHistoryFlag" を追加扱い
 */
function initIndexedDB() {
  return new Promise((resolve, reject) => {
    // バージョンを 12 に上げる
    const request = indexedDB.open("trpgDB", 12);

    request.onupgradeneeded = (event) => {
      db = event.target.result;

      // characterData
      if (!db.objectStoreNames.contains("characterData")) {
        db.createObjectStore("characterData", { keyPath: "id" });
      }

      // scenarios
      if (!db.objectStoreNames.contains("scenarios")) {
        const scenarioStore = db.createObjectStore("scenarios", {
          keyPath: "scenarioId",
          autoIncrement: true
        });
        scenarioStore.createIndex("updatedAt", "updatedAt", { unique: false });
      } else {
        // 既に "scenarios" ストアがある場合、
        // 実際には "hideFromHistoryFlag" フィールドを後付けするが
        // IndexedDB はスキーマとしてのフィールド定義は行わないため
        // onupgradeneeded の中で特別な操作は不要
      }

      // sceneEntries
      let sceneStore;
      if (!db.objectStoreNames.contains("sceneEntries")) {
        sceneStore = db.createObjectStore("sceneEntries", {
          keyPath: "entryId",
          autoIncrement: true
        });
        sceneStore.createIndex("scenarioId", "scenarioId", { unique: false });
      } else {
        sceneStore = request.transaction.objectStore("sceneEntries");
      }
      // content_en用index(重複可)
      if (sceneStore && !sceneStore.indexNames.contains("content_en")) {
        try {
          sceneStore.createIndex("content_en", "content_en", { unique: false });
        } catch (e) {
          console.warn("content_enのIndex作成に失敗:", e);
        }
      }

      // wizardState
      if (!db.objectStoreNames.contains("wizardState")) {
        db.createObjectStore("wizardState", { keyPath: "id" });
      }

      // parties
      if (!db.objectStoreNames.contains("parties")) {
        const partyStore = db.createObjectStore("parties", {
          keyPath: "partyId",
          autoIncrement: true
        });
        partyStore.createIndex("updatedAt", "updatedAt", { unique: false });
      }

      // bgImages
      if (!db.objectStoreNames.contains("bgImages")) {
        db.createObjectStore("bgImages", {
          keyPath: "id",
          autoIncrement: true
        });
      }

      // sceneSummaries
      if (!db.objectStoreNames.contains("sceneSummaries")) {
        const sumStore = db.createObjectStore("sceneSummaries", {
          keyPath: "summaryId",
          autoIncrement: true
        });
        sumStore.createIndex("chunkIndex", "chunkIndex", { unique: true });
      }

      // endings
      if (!db.objectStoreNames.contains("endings")) {
        db.createObjectStore("endings", { keyPath: ["scenarioId", "type"] });
      }

      // avatarData
      if (!db.objectStoreNames.contains("avatarData")) {
        db.createObjectStore("avatarData", { keyPath: "id" });
      }
    };

    request.onsuccess = (event) => {
      db = event.target.result;
      resolve();
    };
    request.onerror = (event) => {
      console.error("IndexedDBの初期化に失敗:", event.target.error);
      reject(event.target.error);
    };
  });
}

/**
 * 新しいシナリオを作成
 */
function createNewScenario(wizardData, title = "新シナリオ") {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");

    const now = new Date();
    const record = {
      title: title,
      wizardData: wizardData,
      createdAt: now.toISOString(),
      updatedAt: now.toISOString(),
      bookShelfFlag: false,        // 新規はデフォルトOFF
      hideFromHistoryFlag: false   // 新規はデフォルトOFF
    };

    const addReq = store.add(record);
    addReq.onsuccess = (evt) => {
      const newId = evt.target.result;
      resolve(newId);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオを更新
 */
function updateScenario(scenario, noUpdateDateTimeFlag) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    if (!noUpdateDateTimeFlag) {
      scenario.updatedAt = new Date().toISOString();
    }
    // フラグが無い場合は false で補正
    if (typeof scenario.bookShelfFlag === "undefined") {
      scenario.bookShelfFlag = false;
    }
    if (typeof scenario.hideFromHistoryFlag === "undefined") {
      scenario.hideFromHistoryFlag = false;
    }
    // ★ もし本棚用として登録されていて shelfOrder が未設定なら、現在時刻を数値で設定
    if (scenario.bookShelfFlag && typeof scenario.shelfOrder !== "number") {
      scenario.shelfOrder = Date.now();
    }

    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");
    const putReq = store.put(scenario);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオをID指定で取得
 */
function getScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const getReq = store.get(scenarioId);
    getReq.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * シナリオを全件取得
 */
function listAllScenarios() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const result = evt.target.result || [];
      // 既存データにフラグがない場合は false に補正
      result.forEach(sc => {
        sc.bookShelfFlag = sc.bookShelfFlag || false;
        sc.hideFromHistoryFlag = sc.hideFromHistoryFlag || false;
      });
      // ※ 本来は updatedAt でソートしているが、本棚ページでは独自の並び順で処理するためここではそのまま返す
      result.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(result);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

/** シナリオ削除 */
function deleteScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction(["scenarios", "sceneEntries"], "readwrite");
    const scenarioStore = tx.objectStore("scenarios");
    const sceneEntriesStore = tx.objectStore("sceneEntries");

    // 1) シナリオ本体を削除
    const deleteReq = scenarioStore.delete(scenarioId);
    deleteReq.onsuccess = () => {
      // 2) sceneEntriesで scenarioId === scenarioId のものを削除
      const idx = sceneEntriesStore.index("scenarioId");
      const range = IDBKeyRange.only(scenarioId);

      idx.openCursor(range).onsuccess = (evt) => {
        const cursor = evt.target.result;
        if (cursor) {
          sceneEntriesStore.delete(cursor.primaryKey);
          cursor.continue();
        }
      };

      tx.oncomplete = () => {
        resolve();
      };
      tx.onerror = (err) => {
        reject(err);
      };
    };
    deleteReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* シーン履歴: add/update/get/delete */
function addSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const addReq = store.add(entry);
    addReq.onsuccess = (evt) => {
      resolve(evt.target.result);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

function updateSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const putReq = store.put(entry);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

function getSceneEntriesByScenarioId(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readonly");
    const store = tx.objectStore("sceneEntries");
    const index = store.index("scenarioId");

    const range = IDBKeyRange.only(scenarioId);
    const results = [];
    index.openCursor(range).onsuccess = (evt) => {
      const cursor = evt.target.result;
      if (cursor) {
        results.push(cursor.value);
        cursor.continue();
      } else {
        results.sort((a, b) => (a.entryId - b.entryId));
        resolve(results);
      }
    };
    index.openCursor(range).onerror = (err) => {
      reject(err);
    };
  });
}

function deleteSceneEntry(entryId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const delReq = store.delete(entryId);
    delReq.onsuccess = () => {
      resolve();
    };
    delReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* ---------- シーン要約関連 ---------- */
function addSceneSummaryRecord(summaryObj) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneSummaries", "readwrite");
    const store = tx.objectStore("sceneSummaries");
    const addReq = store.add(summaryObj);
    addReq.onsuccess = (evt) => resolve(evt.target.result);
    addReq.onerror = (err) => reject(err);
  });
}

function getSceneSummaryByChunkIndex(chunkIndex) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneSummaries", "readonly");
    const store = tx.objectStore("sceneSummaries");
    const idx = store.index("chunkIndex");
    const req = idx.get(chunkIndex);
    req.onsuccess = () => {
      resolve(req.result || null);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

function updateSceneSummaryRecord(summaryObj) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneSummaries", "readwrite");
    const store = tx.objectStore("sceneSummaries");
    const putReq = store.put(summaryObj);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

function deleteSceneSummaryByChunkIndex(chunkIndex) {
  return new Promise(async (resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    try {
      const sumRec = await getSceneSummaryByChunkIndex(chunkIndex);
      if (!sumRec) {
        return resolve();
      }
      const tx = db.transaction("sceneSummaries", "readwrite");
      const store = tx.objectStore("sceneSummaries");
      const delReq = store.delete(sumRec.summaryId);
      delReq.onsuccess = () => resolve();
      delReq.onerror = (err) => reject(err);
    } catch (e) {
      reject(e);
    }
  });
}

/* ---------- パーティ関連 ---------- */
window.initIndexedDB = initIndexedDB;

window.createNewScenario = createNewScenario;
window.updateScenario = updateScenario;
window.getScenarioById = getScenarioById;
window.listAllScenarios = listAllScenarios;
window.deleteScenarioById = deleteScenarioById;

window.addSceneEntry = addSceneEntry;
window.updateSceneEntry = updateSceneEntry;
window.getSceneEntriesByScenarioId = getSceneEntriesByScenarioId;
window.deleteSceneEntry = deleteSceneEntry;

window.addSceneSummaryRecord = addSceneSummaryRecord;
window.getSceneSummaryByChunkIndex = getSceneSummaryByChunkIndex;
window.updateSceneSummaryRecord = updateSceneSummaryRecord;
window.deleteSceneSummaryByChunkIndex = deleteSceneSummaryByChunkIndex;

/** キャラデータ関連 */
window.saveCharacterDataToIndexedDB = function (characterData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve();
      return;
    }
    const tx = db.transaction("characterData", "readwrite");
    const store = tx.objectStore("characterData");
    const record = { id: "characterData", data: characterData };
    const putReq = store.put(record);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
};

window.loadCharacterDataFromIndexedDB = function() {
  return new Promise((resolve) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve([]);
      return;
    }
    const tx = db.transaction("characterData", "readonly");
    const store = tx.objectStore("characterData");
    const getReq = store.get("characterData");
    getReq.onsuccess = (event) => {
      if (event.target.result && event.target.result.data) {
        resolve(event.target.result.data);
      } else {
        resolve([]);
      }
    };
    getReq.onerror = () => {
      resolve([]);
    };
  });
};

window.saveWizardDataToIndexedDB = function(wizardData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readwrite");
    const store = tx.objectStore("wizardState");
    const record = { id: "wizardData", data: wizardData };
    const req = store.put(record);
    req.onsuccess = () => resolve();
    req.onerror = (err) => reject(err);
  });
};

window.loadWizardDataFromIndexedDB = function() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readonly");
    const store = tx.objectStore("wizardState");
    const getReq = store.get("wizardData");
    getReq.onsuccess = (evt) => {
      if (evt.target.result) {
        resolve(evt.target.result.data);
      } else {
        resolve(null);
      }
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
};

/* パーティ関係 */
window.createParty = function (name) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const now = new Date().toISOString();
    const rec = {
      name: name,
      createdAt: now,
      updatedAt: now
    };
    const req = store.add(rec);
    req.onsuccess = (evt) => {
      resolve(evt.target.result); // partyId
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.getPartyById = function (partyId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readonly");
    const store = tx.objectStore("parties");
    const req = store.get(partyId);
    req.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.listAllParties = function () {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readonly");
    const store = tx.objectStore("parties");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const list = evt.target.result || [];
      list.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(list);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.updateParty = function (party) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    party.updatedAt = new Date().toISOString();
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const req = store.put(party);
    req.onsuccess = () => {
      resolve();
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.deletePartyById = function (partyId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const req = store.delete(partyId);
    req.onsuccess = () => {
      resolve();
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

/* エンディング関連 */
window.getEnding = function (scenarioId, type) {
  return new Promise((resolve, reject) => {
    if (!db) return reject("DB未初期化");
    const tx = db.transaction("endings", "readonly");
    const store = tx.objectStore("endings");
    const getReq = store.get([scenarioId, type]);
    getReq.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    getReq.onerror = (err) => reject(err);
  });
};

window.saveEnding = function (scenarioId, type, story) {
  return new Promise((resolve, reject) => {
    if (!db) return reject("DB未初期化");
    const tx = db.transaction("endings", "readwrite");
    const store = tx.objectStore("endings");
    const rec = {
      scenarioId,
      type,
      story,
      createdAt: new Date().toISOString()
    };
    const putReq = store.put(rec);
    putReq.onsuccess = () => resolve();
    putReq.onerror = (err) => reject(err);
  });
};

window.deleteEnding = function (scenarioId, type) {
  return new Promise((resolve, reject) => {
    if (!db) return reject("DB未初期化");
    const tx = db.transaction("endings", "readwrite");
    const store = tx.objectStore("endings");
    const delReq = store.delete([scenarioId, type]);
    delReq.onsuccess = () => resolve();
    delReq.onerror = (err) => reject(err);
  });
};
---- 
main.js 
/********************************
 * main.js
 * - ページ全体の初期化・イベント登録
 * - 複数シナリオ対応
 ********************************/

window.onload = async () => {
  // 1) IndexedDB初期化
  await initIndexedDB();

  // 2) APIキー読み込み
  const savedApiKey = localStorage.getItem('apiKey');
  if (savedApiKey) {
    window.apiKey = savedApiKey;
  }

  // 3) URLパラメータで scenarioId を読み取る
  const urlParams = new URLSearchParams(window.location.search);
  const scenarioIdStr = urlParams.get("scenarioId");
  const scenarioId = scenarioIdStr ? parseInt(scenarioIdStr, 10) : null;

  window.currentScenarioId = scenarioId || null;

  // 4) シナリオIDがあれば、DBから読み込んで画面を構築
  if (window.currentScenarioId) {
    // 旧の「入力セクション」は非表示、ゲーム画面のみ表示
    const inputSec = document.querySelector('.input-section');
    if (inputSec) inputSec.style.display = 'none';

    const gameSec = document.querySelector('.game-section');
    if (gameSec) gameSec.style.display = 'block';

    // scene.js 側の「loadScenarioData」でシナリオ＆履歴を取得して表示
    await loadScenarioData(window.currentScenarioId);
    updateSceneHistory();
    showLastScene();
  }

  // ---------- ネタバレ（目的達成型）関連 ----------
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.style.display = "flex";
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.style.display = "none";
    });
  }

  // ---------- 探索型「カードを取得する」ボタン ----------
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    // ※ 実際の処理は scenarioPage.js で定義
  }

  // ---------- シーン遷移ボタン ----------
  const nextSceneBtn = document.getElementById('next-scene');
  if (nextSceneBtn) {
    nextSceneBtn.addEventListener('click', () => {
      getNextScene();
    });
  }

  // 画像生成 (自動)
  const autoGenBtn = document.getElementById('image-auto-generate-button');
  if (autoGenBtn) {
    autoGenBtn.addEventListener('click', () => {
      generateImageFromCurrentScene();
    });
  }

  // 画像生成 (カスタム)
  const promptModalBtn = document.getElementById('image-prompt-modal-button');
  if (promptModalBtn) {
    promptModalBtn.addEventListener('click', () => {
      openImagePromptModal();
    });
  }

  // カスタム画像生成 決定
  const customGenBtn = document.getElementById('image-custom-generate-button');
  if (customGenBtn) {
    customGenBtn.addEventListener('click', () => {
      onCustomImageGenerate();
    });
  }

  // カスタム画像生成 キャンセル
  const customCancelBtn = document.getElementById('image-custom-cancel-button');
  if (customCancelBtn) {
    customCancelBtn.addEventListener('click', () => {
      closeImagePromptModal();
    });
  }

  // リクエストキャンセル
  const cancelRequestBtn = document.getElementById('cancel-request-button');
  if (cancelRequestBtn) {
    cancelRequestBtn.addEventListener('click', onCancelFetch);
  }

  // メニューに戻る
  const backMenuBtn = document.getElementById('back-to-menu');
  if (backMenuBtn) {
    backMenuBtn.addEventListener('click', () => {
      window.location.href = "index.html";
    });
  }
};
---- 
menu.js 
/*************************************************
 * menu.js
 *************************************************/

/**
 * グローバルに「シナリオ一覧」をキャッシュしておく
 *  - ページロード後に一度だけ listAllScenarios() を呼び出す
 */
window.cachedScenarios = [];

/** initMenuPage: ページ読み込み時に呼び出されるメイン初期化 */
window.initMenuPage = async function () {
  // すでに initIndexedDB() は呼ばれている前提

  // localStorage から APIキーを読み込む
  window.apiKey = localStorage.getItem("apiKey") || "";

  // DB から全シナリオを取得し、cachedScenarios に格納
  try {
    const all = await listAllScenarios();
    window.cachedScenarios = all;
  } catch (err) {
    console.error("シナリオ一覧の取得に失敗:", err);
    showToast("シナリオ一覧の取得に失敗しました。");
    window.cachedScenarios = [];
  }

  // characterDataのロード
  try {
    const stored = await loadCharacterDataFromIndexedDB();
    window.characterData = stored || [];
  } catch (err) {
    console.error("characterDataのロードに失敗:", err);
    window.characterData = [];
  }

  // 「非表示を表示する」がオンかオフかで、最初の描画を行う
  const showHiddenCheckbox = document.getElementById("show-hidden-scenarios");
  const showHidden = showHiddenCheckbox ? showHiddenCheckbox.checked : false;

  // フィルタを適用して表示
  applyScenarioFilter(showHidden);

  // メニュー上のボタン類をセットアップ
  setupMenuButtons();
  initAccordion();
};

/**
 * 現在の「非表示を表示する」チェック状態に合わせ、
 * cachedScenarios のうち表示対象となるものを差分更新する
 */
function applyScenarioFilter(showHidden) {
  const container = document.getElementById("scenario-list-container");
  const noScenariosMsg = document.getElementById("no-scenarios-message");
  if (!container) return;

  // 1) 既存の DOM 上にある scenario-list をマッピング (scenarioId -> DOM要素)
  const existingRows = Array.from(container.querySelectorAll(".scenario-list"));
  const existingMap = {};
  existingRows.forEach((row) => {
    const sid = row.dataset.scenarioId;
    existingMap[sid] = row;
  });

  // 2) フィルタ条件に合うシナリオを選び出す
  const filtered = window.cachedScenarios.filter((s) => {
    return showHidden ? s.hideFromHistoryFlag : !s.hideFromHistoryFlag;
  });

  // 3) 「表示するべき scenarioId の集合」
  const filteredIds = new Set(filtered.map((s) => s.scenarioId));

  // 4) すでにDOMにあるがフィルタに合わなくなったものを削除
  for (const sid in existingMap) {
    if (!filteredIds.has(sid)) {
      existingMap[sid].remove(); // DOMから削除
      delete existingMap[sid];
    }
  }

  // 5) フィルタに合うシナリオのうち、まだDOMに存在しないものを生成・append
  filtered.forEach((scenario) => {
    if (!existingMap[scenario.scenarioId]) {
      const row = createScenarioRow(scenario);
      container.appendChild(row);
      existingMap[scenario.scenarioId] = row;
    } else {
      // 既存行を念のため更新
      updateScenarioRow(existingMap[scenario.scenarioId], scenario);
    }
  });

  // 6) 0件ならコンテナを隠してメッセージ表示
  if (filtered.length === 0) {
    container.style.display = "none";
    noScenariosMsg.style.display = "block";
  } else {
    container.style.display = "";
    noScenariosMsg.style.display = "none";
  }
}

/**
 * 単一シナリオ行を生成して返す
 * scenario の状態に応じてボタンのラベルや色をセット
 */
function createScenarioRow(scenario) {
  const div = document.createElement("div");
  div.className = "scenario-list";
  // 部分更新・DOM検索用に scenarioId を data 属性に持たせる
  div.dataset.scenarioId = scenario.scenarioId;

  const infoText = document.createElement("span");
  infoText.className = "info";
  infoText.textContent = `ID:${scenario.scenarioId} / ${scenario.title} (更新:${scenario.updatedAt}) `;
  div.appendChild(infoText);

  // 今の「非表示を表示する」チェック状態を取得
  const showHiddenCheckbox = document.getElementById("show-hidden-scenarios");
  const showHidden = showHiddenCheckbox ? showHiddenCheckbox.checked : false;

  // 「非表示を表示」チェックがオフの場合のみ「続きへ」「本棚へ」ボタン
  if (!showHidden) {
    // 続きへボタン
    const btnContinue = document.createElement("button");
    btnContinue.type = "button";
    btnContinue.textContent = "続きへ";
    btnContinue.addEventListener("click", () => {
      window.location.href = `scenario.html?scenarioId=${scenario.scenarioId}`;
    });
    div.appendChild(btnContinue);

    // 「本棚へ」/「収納済」トグルボタン
    const btnShelf = document.createElement("button");
    btnShelf.type = "button";
    btnShelf.classList.add("btn-shelf");

    if (!scenario.bookShelfFlag) {
      btnShelf.textContent = "本棚へ";
      btnShelf.style.backgroundColor = "";
    } else {
      btnShelf.textContent = "収納済";
      btnShelf.style.backgroundColor = "gray";
    }

    btnShelf.addEventListener("click", async () => {
      try {
        await toggleBookShelfFlag(scenario);
      } catch (err) {
        console.error(err);
        showToast("本棚フラグ切り替えに失敗:\n" + err.message);
      }
    });
    div.appendChild(btnShelf);
  }

  // 非表示フラグによって「非表示にする」or「表示する」ボタン
  if (!scenario.hideFromHistoryFlag) {
    const btnHide = document.createElement("button");
    btnHide.type = "button";
    btnHide.textContent = "非表示にする";
    btnHide.addEventListener("click", () => {
      showHideConfirmModal(scenario);
    });
    div.appendChild(btnHide);
  } else {
    const btnShow = document.createElement("button");
    btnShow.type = "button";
    btnShow.textContent = "表示する";
    btnShow.style.backgroundColor = "gray";
    btnShow.addEventListener("click", async () => {
      try {
        await toggleHideFromHistoryFlag(scenario, false);
        showToast(`シナリオ(ID:${scenario.scenarioId})を表示しました。`);
      } catch (err) {
        console.error(err);
        showToast("非表示フラグ切り替えに失敗:\n" + err.message);
      }
    });
    div.appendChild(btnShow);
  }

  // 「非表示を表示」チェックがオンの場合のみ「削除する」ボタン
  if (showHidden) {
    const btnDelete = document.createElement("button");
    btnDelete.type = "button";
    btnDelete.textContent = "削除する";
    btnDelete.style.backgroundColor = "#f44336";
    btnDelete.addEventListener("click", () => {
      scenarioIdToDelete = scenario.scenarioId;
      showDeleteScenarioModal(true);
    });
    div.appendChild(btnDelete);
  }

  return div;
}

/**
 * 既存のシナリオ行要素を丸ごと置き換える (DOMの部分再描画用)
 */
function updateScenarioRow(oldRow, scenario) {
  const newRow = createScenarioRow(scenario);
  oldRow.parentNode.replaceChild(newRow, oldRow);
  return newRow;
}

/**
 * DOMから指定のシナリオ行を削除する (scenarioIdベース)
 */
function removeScenarioFromDOM(scenarioId) {
  const row = document.querySelector(`.scenario-list[data-scenario-id="${scenarioId}"]`);
  if (row) {
    row.remove();
  }
}

/**
 * 「本棚フラグ」をトグルして部分的にDOM反映する
 */
async function toggleBookShelfFlag(scenario) {
  scenario.bookShelfFlag = !scenario.bookShelfFlag;
  scenario.updatedAt = new Date().toISOString();
  await updateScenario(scenario);

  // グローバル cachedScenarios も同期的に更新
  const index = window.cachedScenarios.findIndex((s) => s.scenarioId === scenario.scenarioId);
  if (index !== -1) {
    window.cachedScenarios[index] = { ...scenario };
  }

  // 表示中であれば行を更新
  const row = document.querySelector(`.scenario-list[data-scenario-id="${scenario.scenarioId}"]`);
  if (row) {
    updateScenarioRow(row, scenario);
  }
}

/**
 * 「hideFromHistoryFlag」をトグル (true=非表示, false=表示)
 */
async function toggleHideFromHistoryFlag(scenario, hideFlag) {
  scenario.hideFromHistoryFlag = hideFlag;
  scenario.updatedAt = new Date().toISOString();
  await updateScenario(scenario);

  // グローバル cachedScenarios も同期的に更新
  const index = window.cachedScenarios.findIndex((s) => s.scenarioId === scenario.scenarioId);
  if (index !== -1) {
    window.cachedScenarios[index] = { ...scenario };
  }

  // 現在のフィルタを取得して差分更新
  const showHiddenCheckbox = document.getElementById("show-hidden-scenarios");
  const showHidden = showHiddenCheckbox ? showHiddenCheckbox.checked : false;
  applyScenarioFilter(showHidden);
}

/** 「非表示にする」ボタン押下時の確認モーダル表示 */
function showHideConfirmModal(scenario) {
  let modal = document.getElementById("hide-from-history-modal");
  if (!modal) {
    // 存在しなければ新規作成
    modal = document.createElement("div");
    modal.id = "hide-from-history-modal";
    modal.className = "modal";
    modal.innerHTML = `
      <div class="modal-content" style="max-width:400px;">
        <p>本当に非表示にしますか？</p>
        <div class="c-flexbox">
          <button id="hide-from-history-ok">OK</button>
          <button id="hide-from-history-cancel">キャンセル</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  }
  modal.classList.add("active");

  // 前回リスナーが残っている場合を考慮し、一旦置き換えて再度 addEventListener
  const okBtn = modal.querySelector("#hide-from-history-ok");
  const cancelBtn = modal.querySelector("#hide-from-history-cancel");
  okBtn.replaceWith(okBtn.cloneNode(true));
  cancelBtn.replaceWith(cancelBtn.cloneNode(true));

  // OK
  modal.querySelector("#hide-from-history-ok").addEventListener("click", async () => {
    try {
      await toggleHideFromHistoryFlag(scenario, true);
      showToast(`シナリオ(ID:${scenario.scenarioId})を非表示にしました。`);
    } catch (err) {
      console.error(err);
      showToast("非表示フラグ切り替えに失敗:\n" + err.message);
    }
    modal.classList.remove("active");
  });

  // キャンセル
  modal.querySelector("#hide-from-history-cancel").addEventListener("click", () => {
    modal.classList.remove("active");
  });
}

// 削除用モーダル
let scenarioIdToDelete = null;
function showDeleteScenarioModal(show) {
  const modal = document.getElementById("delete-scenario-modal");
  if (!modal) return;
  if (show) modal.classList.add("active");
  else modal.classList.remove("active");
}

/** シナリオ削除モーダルでOK */
async function confirmDeleteScenario() {
  if (scenarioIdToDelete == null) {
    showDeleteScenarioModal(false);
    return;
  }
  try {
    await deleteScenarioById(scenarioIdToDelete);
    showToast(`シナリオ(ID:${scenarioIdToDelete})を削除しました。`);
  } catch (err) {
    console.error(err);
    showToast("シナリオ削除に失敗:\n" + err.message);
  }

  // cachedScenarios から該当シナリオを取り除く
  window.cachedScenarios = window.cachedScenarios.filter(
    (s) => s.scenarioId !== scenarioIdToDelete
  );

  // DOMから該当行を削除
  removeScenarioFromDOM(scenarioIdToDelete);

  scenarioIdToDelete = null;
  showDeleteScenarioModal(false);
}

/** メニュー内のボタン等のイベント設定 */
function setupMenuButtons() {
  // 「APIキー設定」または「キー設定済」のボタン
  const setApiKeyButton = document.getElementById("set-api-key-button");
  const apiKeyModal = document.getElementById("api-key-modal");
  const apiKeyInput = document.getElementById("api-key-input");
  const apiKeyOkButton = document.getElementById("api-key-ok-button");
  const apiKeyClearButton = document.getElementById("api-key-clear-button");

  if (!window.apiKey) {
    setApiKeyButton.textContent = "APIキー設定";
  } else {
    setApiKeyButton.innerHTML = `<span class="iconmoon icon-key"></span>`;
  }

  setApiKeyButton.addEventListener("click", () => {
    apiKeyModal.classList.add("active");
    apiKeyInput.value = window.apiKey;
  });

  apiKeyOkButton.addEventListener("click", () => {
    const key = apiKeyInput.value.trim();
    if (key) {
      localStorage.setItem("apiKey", key);
      window.apiKey = key;
      setApiKeyButton.innerHTML = `<span class="iconmoon icon-key"></span>`;
    }
    apiKeyModal.classList.remove("active");
  });

  apiKeyClearButton.addEventListener("click", () => {
    if (confirm("APIキーをクリアすると操作ができなくなります。よろしいですか？")) {
      localStorage.removeItem("apiKey");
      window.apiKey = "";
      setApiKeyButton.textContent = "APIキー設定";
      apiKeyModal.classList.remove("active");
    }
  });

  document.getElementById("clear-character-btn").addEventListener("click", async () => {
    if (confirm("エレメント情報をクリアします。よろしいですか？")) {
      window.characterData = [];
      await saveCharacterDataToIndexedDB(window.characterData);
      showToast("エレメント情報をクリアしました。");
    }
  });

  document.getElementById("show-warehouse-btn").addEventListener("click", () => {
    showWarehouseModal("menu");
  });

  document.getElementById("character-create").addEventListener("click", () => {
    window.location.href = "characterCreate.html";
  });

  document.getElementById("party-list").addEventListener("click", () => {
    window.location.href = "partyList.html";
  });

  document.getElementById("start-new-scenario-button").addEventListener("click", () => {
    window.location.href = "scenarioWizard.html";
  });

  // シナリオ削除モーダル OK/CANCEL
  document.getElementById("delete-scenario-ok").addEventListener("click", confirmDeleteScenario);
  document.getElementById("delete-scenario-cancel").addEventListener("click", () => {
    scenarioIdToDelete = null;
    showDeleteScenarioModal(false);
  });

  // 「本棚」ボタン(全シナリオ一覧へ飛ぶもの)
  document.getElementById("show-bookshelf-btn").addEventListener("click", () => {
    window.location.href = "bookshelf.html";
  });

  // 「非表示を表示する」チェックボックスのイベント
  const showHiddenCheckbox = document.getElementById("show-hidden-scenarios");
  if (showHiddenCheckbox) {
    // クリックされたとき、アコーディオンへの伝搬を止める
    showHiddenCheckbox.addEventListener("click", (event) => {
      event.stopPropagation();
    });
    // チェック状態が変わったら差分更新
    showHiddenCheckbox.addEventListener("change", () => {
      const showHidden = showHiddenCheckbox.checked;
      applyScenarioFilter(showHidden);
    });
  }
}

/** アコーディオンの展開状態管理 */
function initAccordion() {
  const header = document.getElementById("ongoing-scenarios-header");
  const content = document.getElementById("ongoing-scenarios-content");
  if (!header || !content) return;

  // 前回の開閉状態を復元
  const savedState = localStorage.getItem("ongoingScenariosAccordionState");
  if (savedState === "open") {
    content.classList.add("open");
  }

  // ヘッダクリックで開閉トグル
  header.addEventListener("click", (e) => {
    // チェックボックス or そのラベルがクリックされた場合は開閉しない
    if (
      e.target.closest("#show-hidden-scenarios") ||
      e.target.closest("label[for='show-hidden-scenarios']")
    ) {
      return;
    }
    // 開閉
    content.classList.toggle("open");
    if (content.classList.contains("open")) {
      localStorage.setItem("ongoingScenariosAccordionState", "open");
    } else {
      localStorage.setItem("ongoingScenariosAccordionState", "closed");
    }
  });
}

---- 
partyCreate.js 
// js/partyCreate.js

// パーティ編成画面の初期処理をまとめる関数
// index.html の「DOMContentLoaded」で initIndexedDB() 完了後に呼ばれます。
window.initPartyCreatePage = async function () {

  // URLパラメータで partyId を取得
  const urlParams = new URLSearchParams(window.location.search);
  let currentPartyId = parseInt(urlParams.get("partyId"), 10);
  if (Number.isNaN(currentPartyId)) {
    currentPartyId = null;
  }

  let currentParty = null;
  if (currentPartyId) {
    currentParty = await getPartyById(currentPartyId);
    if (currentParty) {
      // パーティ名を input に反映
      document.getElementById("party-name-input").value = currentParty.name;
    } else {
      // 無効IDなら新規扱い
      currentPartyId = null;
    }
  }

  // characterData
  try {
    const stored = await loadCharacterDataFromIndexedDB();
    window.characterData = stored || [];
  } catch (err) {
    console.error("characterDataのロードに失敗:", err);
    window.characterData = [];
  }

  // ボタンイベント
  document.getElementById("save-party-name-btn").addEventListener("click", async () => {
    const newName = document.getElementById("party-name-input").value.trim() || "名称未設定";
    if (!currentPartyId) {
      // 新規
      const newId = await createParty(newName);
      currentPartyId = newId;
      alert("パーティを新規作成しました (ID:" + newId + ")");
    } else {
      // 既存パーティ名更新
      const pt = await getPartyById(currentPartyId);
      if (pt) {
        pt.name = newName;
        await updateParty(pt);
        alert("パーティ名を更新しました (ID:" + currentPartyId + ")");
      }
    }
  });

  // 倉庫ボタン => showWarehouseModal("party", partyId, コールバック)
  document.getElementById("show-warehouse-btn").addEventListener("click", () => {
    if (!currentPartyId) {
      alert("パーティIDが未確定です。先にパーティ名を保存してください。");
      return;
    }
    showWarehouseModal("party", currentPartyId, () => {
      // パーティにカード追加後のコールバック
      renderAllParty();
    });
  });

  // パーティ側の選択モード
  let partySelectionMode = false;
  document.getElementById("toggle-party-selection-mode-btn").addEventListener("click", () => {
    partySelectionMode = !partySelectionMode;
    const btn = document.getElementById("toggle-party-selection-mode-btn");
    if (partySelectionMode) {
      btn.textContent = "選択モード解除";
    } else {
      btn.textContent = "選択モード";
      // 選択解除
      const selCards = document.querySelectorAll(
        "#avatar-card-container .card.selected, " +
        "#partner-card-container .card.selected, " +
        "#party-card-container .card.selected"
      );
      selCards.forEach(el => el.classList.remove("selected"));
    }
    updatePartyMoveButtonVisibility();
  });

  // 「選択したカードを倉庫に戻す」
  document.getElementById("move-selected-to-warehouse-btn").addEventListener("click", async () => {
    const selectedCards = document.querySelectorAll(
      "#avatar-card-container .card.selected, " +
      "#partner-card-container .card.selected, " +
      "#party-card-container .card.selected"
    );
    if (selectedCards.length === 0) {
      alert("カードが選択されていません。");
      return;
    }
    selectedCards.forEach(el => {
      const cardId = el.getAttribute("data-id");
      const idx = window.characterData.findIndex(c => c.id === cardId);
      if (idx !== -1) {
        window.characterData[idx].group = "Warehouse";
        window.characterData[idx].role = "none";
        window.characterData[idx].partyId = null;
      }
    });
    await saveCharacterDataToIndexedDB(window.characterData);
    // 選択解除 & 再描画
    selectedCards.forEach(el => el.classList.remove("selected"));
    renderAllParty();
    updatePartyMoveButtonVisibility();
  });

  // 「メニューに戻る」
  document.getElementById("back-to-menu").addEventListener("click", () => {
    window.location.href = "partyList.html";
  });

  // パーティ描画
  function renderAllParty() {
    const partyCards = window.characterData.filter(
      c => c.group === "Party" && c.partyId === currentPartyId
    );
    const avatarContainer = document.getElementById("avatar-card-container");
    const partnerContainer = document.getElementById("partner-card-container");
    const partyContainer = document.getElementById("party-card-container");

    avatarContainer.innerHTML = "";
    partnerContainer.innerHTML = "";
    partyContainer.innerHTML = "";

    const avatarCards = partyCards.filter(c => c.role === "avatar");
    const partnerCards = partyCards.filter(c => c.role === "partner");
    const noneCards = partyCards.filter(c => !c.role || c.role === "none");

    avatarCards.forEach(card => {
      avatarContainer.appendChild(createPartyCardElement(card));
    });
    partnerCards.forEach(card => {
      partnerContainer.appendChild(createPartyCardElement(card));
    });
    noneCards.forEach(card => {
      partyContainer.appendChild(createPartyCardElement(card));
    });
  }

  // カード生成
  function createPartyCardElement(card) {
    const cardEl = document.createElement("div");
    cardEl.className = "card rarity" + card.rarity.replace("★", "").trim();
    cardEl.setAttribute("data-id", card.id);

    cardEl.addEventListener("click", (e) => {
      if (document.getElementById("toggle-party-selection-mode-btn").textContent.includes("解除")) {
        // 選択モード中
        e.stopPropagation();
        cardEl.classList.toggle("selected");
        updatePartyMoveButtonVisibility();
      } else {
        // 通常時: 裏返し
        cardEl.classList.toggle("flipped");
      }
    });

    const cardInner = document.createElement("div");
    cardInner.className = "card-inner";

    const cardFront = document.createElement("div");
    cardFront.className = "card-front";

    // 背景
    const bgStyle = (card.backgroundcss || "")
      .replace("background-image:", "")
      .replace("background", "")
      .trim();
    if (bgStyle) {
      cardFront.style.backgroundImage = bgStyle;
    }

    // レアリティ
    const rv = card.rarity.replace("★", "").trim();
    cardFront.innerHTML = `<div class='bezel rarity${rv}'></div>`;

    // タイプ
    const typeEl = document.createElement("div");
    typeEl.className = "card-type";
    typeEl.textContent = card.type || "不明";
    cardFront.appendChild(typeEl);

    // 画像領域
    const imageContainer = document.createElement("div");
    imageContainer.className = "card-image";
    if (card.imageData) {
      const imageEl = document.createElement("img");
      imageEl.src = card.imageData;
      imageEl.alt = card.name;
      imageContainer.appendChild(imageEl);
    }
    cardFront.appendChild(imageContainer);

    // 情報
    const infoContainer = document.createElement("div");
    infoContainer.className = "card-info";

    const nameEl = document.createElement("p");
    nameEl.innerHTML = `<h3>${DOMPurify.sanitize(card.name)}</h3>`;
    infoContainer.appendChild(nameEl);

    if (card.state) {
      const stateEl = document.createElement("p");
      stateEl.innerHTML = `<strong>状態：</strong>${DOMPurify.sanitize(card.state)}`;
      infoContainer.appendChild(stateEl);
    }
    const specialEl = document.createElement("p");
    specialEl.innerHTML = `<strong>特技：</strong>${DOMPurify.sanitize(card.special)}`;
    infoContainer.appendChild(specialEl);

    const captionEl = document.createElement("p");
    captionEl.innerHTML = `<span>${DOMPurify.sanitize(card.caption)}</span>`;
    infoContainer.appendChild(captionEl);

    // キャラクターのみ role 切り替えボタン
    if (card.type === "キャラクター") {
      const roleDiv = document.createElement("div");
      roleDiv.style.marginTop = "8px";

      const avatarBtn = document.createElement("button");
      avatarBtn.textContent = (card.role === "avatar") ? "アバター解除" : "アバターに設定";
      avatarBtn.style.marginRight = "5px";
      avatarBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        await toggleAvatar(card);
      });
      roleDiv.appendChild(avatarBtn);

      const partnerBtn = document.createElement("button");
      partnerBtn.textContent = (card.role === "partner") ? "パートナー解除" : "パートナーに設定";
      partnerBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        await togglePartner(card);
      });
      roleDiv.appendChild(partnerBtn);

      infoContainer.appendChild(roleDiv);
    }

    cardFront.appendChild(infoContainer);
    const cardBack = document.createElement("div");
    cardBack.className = "card-back";
    cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type)}</strong>`;

    cardInner.appendChild(cardFront);
    cardInner.appendChild(cardBack);
    cardEl.appendChild(cardInner);

    return cardEl;
  }

  async function toggleAvatar(card) {
    if (card.role === "avatar") {
      card.role = "none";
    } else {
      // 他のavatarを解除
      window.characterData.forEach(c => {
        if (c.group === "Party" && c.partyId === currentPartyId && c.role === "avatar") {
          c.role = "none";
        }
      });
      card.role = "avatar";
    }
    await saveCharacterDataToIndexedDB(window.characterData);
    renderAllParty();
  }

  async function togglePartner(card) {
    if (card.role === "partner") {
      card.role = "none";
    } else {
      card.role = "partner";
    }
    await saveCharacterDataToIndexedDB(window.characterData);
    renderAllParty();
  }

  function updatePartyMoveButtonVisibility() {
    const moveBtn = document.getElementById("move-selected-to-warehouse-btn");
    const sel = document.querySelectorAll(
      "#avatar-card-container .card.selected, " +
      "#partner-card-container .card.selected, " +
      "#party-card-container .card.selected"
    );
    moveBtn.style.display = (sel.length > 0) ? "inline-block" : "none";
  }

  // 最後に一度だけレンダリング実行
  renderAllParty();
};
---- 
partyList.js 
// partyList.js

let editingPartyId = null;

window.addEventListener("load", async () => {
  // IndexedDB初期化
  await initIndexedDB();

  // パーティ一覧を取得して描画
  await renderPartyList();

  // 新規作成ボタン
  document.getElementById("create-party-button").addEventListener("click", async () => {
    const newName = document.getElementById("new-party-name").value.trim();
    if (!newName) {
      alert("パーティ名を入力してください。");
      return;
    }
    try {
      const newId = await createParty(newName);
      document.getElementById("new-party-name").value = "";
      await renderPartyList();
    } catch (e) {
      console.error(e);
      alert("パーティ作成に失敗しました:\n" + e.message);
    }
  });

  // 戻るボタン
  document.getElementById("back-to-menu").addEventListener("click", () => {
    window.location.href = "index.html";
  });

  // パーティ名変更モーダルのキャンセル
  document.getElementById("edit-party-cancel-button").addEventListener("click", () => {
    hideEditPartyModal();
  });

  // パーティ名変更モーダルの保存
  document.getElementById("edit-party-save-button").addEventListener("click", async () => {
    const newName = document.getElementById("edit-party-name").value.trim();
    if (!newName) {
      alert("パーティ名を入力してください。");
      return;
    }
    if (editingPartyId == null) {
      hideEditPartyModal();
      return;
    }
    try {
      const party = await getPartyById(editingPartyId);
      if (!party) {
        alert("対象パーティが見つかりません。");
        hideEditPartyModal();
        return;
      }
      party.name = newName;
      party.updatedAt = new Date().toISOString();
      await updateParty(party);
      editingPartyId = null;
      hideEditPartyModal();
      await renderPartyList();
    } catch (e) {
      console.error(e);
      alert("パーティ名の更新に失敗:\n" + e.message);
    }
  });
});

/** パーティ一覧を描画 */
async function renderPartyList() {
  const container = document.getElementById("party-list-container");
  container.innerHTML = "";

  let parties = [];
  try {
    parties = await listAllParties(); // indexedDB.js で実装
  } catch (e) {
    console.error(e);
    container.textContent = "パーティ一覧の取得に失敗しました。";
    return;
  }

  if (parties.length === 0) {
    container.textContent = "パーティがありません。";
    return;
  }

  parties.forEach(party => {
    const div = document.createElement("div");
    div.style.marginBottom = "10px";
    div.style.border = "1px solid #ccc";
    div.style.padding = "10px";

    const info = document.createElement("span");
    info.textContent = `ID:${party.partyId} / ${party.name} (更新:${party.updatedAt || "なし"})`;
    div.appendChild(info);

    // 編成ボタン( partyCreate.html?partyId=xxx へ遷移 )
    const arrangeBtn = document.createElement("button");
    arrangeBtn.textContent = "編成";
    arrangeBtn.style.marginLeft = "10px";
    arrangeBtn.addEventListener("click", () => {
      window.location.href = `partyCreate.html?partyId=${party.partyId}`;
    });
    div.appendChild(arrangeBtn);

    // 削除ボタン（削除時、該当パーティのキャラを倉庫に戻す）
    const delBtn = document.createElement("button");
    delBtn.textContent = "削除";
    delBtn.style.marginLeft = "10px";
    delBtn.style.backgroundColor = "#f44336";
    delBtn.addEventListener("click", async () => {
      if (!confirm(`パーティ「${party.name}」を削除します。よろしいですか？`)) {
        return;
      }
      try {
        // 1) characterDataをロードして、このpartyIdを持つカードを倉庫へ戻す
        const storedChars = await loadCharacterDataFromIndexedDB();
        let changed = false;
        for (const c of storedChars) {
          if (c.group === "Party" && c.partyId === party.partyId) {
            c.group = "Warehouse";
            c.role = "none";
            c.partyId = null;
            changed = true;
          }
        }
        if (changed) {
          await saveCharacterDataToIndexedDB(storedChars);
        }

        // 2) party本体を削除
        await deletePartyById(party.partyId);

        // 再描画
        await renderPartyList();
      } catch (e) {
        console.error(e);
        alert("パーティ削除に失敗しました:\n" + e.message);
      }
    });
    div.appendChild(delBtn);

    container.appendChild(div);
  });
}
---- 
scenarioPage.js 
/*
 * scenarioPage.js
 * - 「セクション」情報や「導入シーン」を可視化
 * - 全セクション閲覧/トークン調整などのUI制御
 * - エンディング(クリア/未クリア)ボタン～モーダル表示・再生成も担当
 */

window.apiKey = '';
window.sceneHistory = [];
window.currentScenarioId = null;
window.currentScenario = null;
window.currentRequestController = null;
window.cancelRequested = false;

window.scenarioType = null;
window.clearCondition = null;
window.sections = [];

// 要約をメモリ上でも管理
window.sceneSummaries = []; // sceneSummaries[chunkIndex] = { en: '...', ja: '...' }


// 画面起動時
window.addEventListener("load", async () => {
  // IndexedDB初期化 & characterDataロード
  await initIndexedDB();
  const storedChars = await loadCharacterDataFromIndexedDB();
  window.characterData = storedChars || [];

  // トークン調整ボタン
  const tokenAdjustBtn = document.getElementById("token-adjust-button");
  if (tokenAdjustBtn) {
    tokenAdjustBtn.addEventListener("click", onOpenTokenAdjustModal);
  }
  const tokenAdjustOk = document.getElementById("token-adjust-ok-button");
  const tokenAdjustCancel = document.getElementById("token-adjust-cancel-button");
  if (tokenAdjustOk) tokenAdjustOk.addEventListener("click", onConfirmTokenAdjust);
  if (tokenAdjustCancel) tokenAdjustCancel.addEventListener("click", () => {
    const mod = document.getElementById("token-adjust-modal");
    if (mod) mod.classList.remove("active");
  });

  // ネタバレ関連
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.classList.add("active");
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.classList.remove("active");
    });
  }

  // 「カードを取得する」ボタン
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    getCardButton.addEventListener("click", async () => {
      const sceneSummary = await getLastSceneSummary();
      let onlyTitle = "";
      let onlyType = "";
      let addPrompt = "";

      const lines = sceneSummary.split("\n");
      lines.forEach(line => {
        const t = line.trim();
        if (t.startsWith("【名前】")) {
          onlyTitle = t.replace("【名前】", "").replace("：", "").trim();
        } else if (t.startsWith("【タイプ】")) {
          onlyType = t.replace("【タイプ】", "").replace("：", "").trim();
        } else if (t.startsWith("【外見】")) {
          addPrompt = t.replace("【外見】", "").replace("：", "").trim();
        }
      });

      const previewModal = document.getElementById("card-preview-modal");
      const previewContainer = document.getElementById("preview-card-container");
      if (!previewModal || !previewContainer) return;

      previewContainer.innerHTML = "";
      const p = document.createElement("p");
      p.textContent =
        `【名前】：${onlyTitle}\n【タイプ】：${onlyType}\n【外見】：${addPrompt}\nこの内容で作成しますか？`;
      p.style.whiteSpace = "pre-wrap";
      previewContainer.appendChild(p);

      previewModal.classList.add("active");

      const addBtn = document.getElementById("add-to-gachabox-button");
      if (addBtn) {
        addBtn.onclick = async () => {
          previewModal.classList.remove("active");
          const gachaModal = document.getElementById("gacha-modal");
          if (gachaModal) gachaModal.classList.add("active");

          try {
            await runGacha(1, addPrompt, onlyTitle, onlyType);
            alert("ガチャ箱に追加しました。");
          } catch (e) {
            console.error(e);
            alert("カード生成失敗:" + e.message);
          } finally {
            if (gachaModal) gachaModal.classList.remove("active");
          }
        };
      }
      const cancelBtn = document.getElementById("cancel-card-preview-button");
      if (cancelBtn) {
        cancelBtn.onclick = () => {
          previewModal.classList.remove("active");
        };
      }
    });
  }

  // 回答候補生成
  const generateActionCandidatesBtn = document.getElementById("generate-action-candidates-button");
  if (generateActionCandidatesBtn) {
    generateActionCandidatesBtn.addEventListener("click", onGenerateActionCandidates);
  }

  // パーティモーダル
  const showPartyBtn = document.getElementById("show-party-button");
  if (showPartyBtn) {
    showPartyBtn.addEventListener("click", showPartyModal);
  }
  const closePartyModalBtn = document.getElementById("close-party-modal");
  if (closePartyModalBtn) {
    closePartyModalBtn.addEventListener("click", () => {
      const modal = document.getElementById("party-modal");
      if (modal) modal.classList.remove("active");
    });
  }

  // 全セクション閲覧
  const viewAllSectionsBtn = document.getElementById("view-all-sections-button");
  if (viewAllSectionsBtn) {
    viewAllSectionsBtn.addEventListener("click", showAllSectionsModal);
  }
  const closeAllSecBtn = document.getElementById("close-all-sections-modal");
  if (closeAllSecBtn) {
    closeAllSecBtn.addEventListener("click", () => {
      const allSecModal = document.getElementById("all-sections-modal");
      if (allSecModal) allSecModal.classList.remove("active");
    });
  }

  // エンディング関連ボタン
  const endingBtn = document.getElementById("ending-button");
  const clearEndingBtn = document.getElementById("clear-ending-button");
  if (endingBtn) {
    endingBtn.addEventListener("click", () => {
      showEndingModal("bad");
    });
  }
  if (clearEndingBtn) {
    clearEndingBtn.addEventListener("click", () => {
      showEndingModal("clear");
    });
  }

  // エンディングモーダルのボタン
  const endingModalClose = document.getElementById("ending-modal-close-button");
  if (endingModalClose) {
    endingModalClose.addEventListener("click", () => {
      const m = document.getElementById("ending-modal");
      if (m) m.classList.remove("active");
    });
  }
  const endingModalRegen = document.getElementById("ending-modal-regenerate-button");
  if (endingModalRegen) {
    endingModalRegen.addEventListener("click", onClickRegenerateEnding);
  }

});

/**
 * シナリオを読み込み＆表示用初期化
 */
async function loadScenarioData(scenarioId) {
  try {
    const sc = await getScenarioById(scenarioId);
    if (!sc) {
      alert("指定シナリオが存在しません。");
      return;
    }
    window.currentScenario = sc;

    const wd = sc.wizardData || {};
    window.scenarioType = wd.scenarioType;
    window.clearCondition = wd.clearCondition || "";
    window.sections = wd.sections || [];

    // シーン履歴
    const ents = await getSceneEntriesByScenarioId(scenarioId);
    window.sceneHistory = ents.map(e => ({
      entryId: e.entryId,
      type: e.type,
      sceneId: e.sceneId,
      content: e.content,
      content_en: e.content_en || "",
      dataUrl: e.dataUrl,
      prompt: e.prompt || ""
    }));

    // sceneSummaries
    for (let i = 0; i < 100; i++) {
      const sumRec = await getSceneSummaryByChunkIndex(i);
      if (!sumRec) break;
      window.sceneSummaries[i] = {
        en: sumRec.content_en,
        ja: sumRec.content_ja
      };
    }

    // ネタバレ(目的達成型)
    if (window.scenarioType === "objective") {
      const sb = document.getElementById("spoiler-button");
      if (sb) sb.style.display = "inline-block";
      const sp = document.getElementById("clear-condition-text");
      if (sp) sp.textContent = window.clearCondition || "(クリア条件なし)";
    } else if (window.scenarioType === "exploration") {
      const gcb = document.getElementById("get-card-button");
      if (gcb) gcb.style.display = "inline-block";
    }

    // セクション全クリアチェック
    refreshEndingButtons();
  } catch (err) {
    console.error("シナリオ読み込み失敗:", err);
    alert("読み込み失敗:" + err.message);
  }
}

/** 「エンディング」ボタンと「クリアエンディング」ボタンの表示切替 */
function refreshEndingButtons() {
  const endingBtn = document.getElementById("ending-button");
  const clearEndingBtn = document.getElementById("clear-ending-button");

  if (!endingBtn || !clearEndingBtn) return;

  const allCleared = areAllSectionsCleared();

  if (allCleared) {
    endingBtn.style.display = "none";
    clearEndingBtn.style.display = "inline-block";
  } else {
    endingBtn.style.display = "inline-block";
    clearEndingBtn.style.display = "none";
  }
}

function areAllSectionsCleared() {
  if (!window.sections || !window.sections.length) return false;
  return window.sections.every(s => s.cleared);
}

/** エンディングモーダルを表示 */
async function showEndingModal(type) {
  const scenarioId = window.currentScenario?.scenarioId;
  if (!scenarioId) {
    alert("シナリオ未選択");
    return;
  }
  const existing = await getEnding(scenarioId, type);
  if (existing) {
    openEndingModal(type, existing.story);
  } else {
    const newStory = await generateEndingStory(type);
    if (!newStory) {
      return;
    }
    await saveEnding(scenarioId, type, newStory);
    openEndingModal(type, newStory);
  }
}

/** エンディングモーダルを再生成 */
async function onClickRegenerateEnding() {
  const titleEl = document.getElementById("ending-modal-title");
  const scenarioId = window.currentScenario?.scenarioId;
  if (!titleEl || !scenarioId) return;

  let type = "bad";
  if (titleEl.textContent.includes("クリア")) {
    type = "clear";
  }
  // 一旦削除
  await deleteEnding(scenarioId, type);

  // 再生成
  const newStory = await generateEndingStory(type);
  if (!newStory) return;
  await saveEnding(scenarioId, type, newStory);

  const storyEl = document.getElementById("ending-modal-story");
  if (storyEl) {
    storyEl.textContent = newStory;
  }
}

/** モーダルを開く */
function openEndingModal(type, story) {
  const modal = document.getElementById("ending-modal");
  const titleEl = document.getElementById("ending-modal-title");
  const storyEl = document.getElementById("ending-modal-story");

  if (type === "clear") {
    titleEl.textContent = "クリアエンディング";
  } else {
    titleEl.textContent = "エンディング";
  }
  storyEl.innerHTML = DOMPurify.sanitize(story, DOMPURIFY_CONFIG) || "";
  modal.classList.add("active");
}

/** エンディングストーリーをChatGPTで生成 */
async function generateEndingStory(type) {
  if (!window.apiKey) {
    alert("APIキーが未設定です");
    return "";
  }

  const scenario = window.currentScenario;
  if (!scenario) {
    alert("シナリオデータがありません");
    return "";
  }
  const wd = scenario.wizardData || {};
  const isClear = (type === "clear");

  const scenarioSummary = wd.scenarioSummary || "(シナリオ概要なし)";
  const party = wd.party || [];

  // 最新10シーン
  let sceneTexts = window.sceneHistory
    .filter(e => e.type === "scene")
    .map(e => e.content || "");
  if (sceneTexts.length > 10) {
    sceneTexts = sceneTexts.slice(-10);
  }
  const combinedScene = sceneTexts.join("\n------\n");

  // セクション情報
  const sectionTextArr = (wd.sections || []).map(s => {
    const cond = decompressCondition(s.conditionZipped);
    return `・セクション${s.number}(${s.cleared ? "クリア" : "未クリア"}): ${cond}`;
  });
  const joinedSections = sectionTextArr.join("\n");

  const endTypePrompt = isClear ? "ハッピーエンド" : "バッドエンド";

  let prompt = `
以下の情報をもとに、
1)シナリオ概要
2)パーティ構成
3)あらすじ
4)セクション
5)その後の話

この5部構成でエンディングストーリーを作ってください。結末は必ず「${endTypePrompt}」にしてください。
あらすじ部分は、下記のシーン履歴をベースにしつつ、あまり簡潔になりすぎないように描写してください。

■シナリオ概要
${scenarioSummary}

`;

  if (party.length !== 0) {
    prompt += `\n■パーティ構成\n`;
    prompt += party.map(p => `- ${p.name}(${p.type || "?"})`).join("\n");
  }

  prompt += `■シーン履歴(最新～最大10シーン)
${combinedScene}

■セクション情報
${joinedSections}
`;


  try {
    showLoadingModal(true);
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGエンディング生成アシスタントです。日本語で回答してください。" },
          { role: "user", content: prompt }
        ],
        temperature: 0.7
      }),
      signal
    });
    if (window.cancelRequested) {
      return "";
    }
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    return (data.choices[0].message.content || "").trim();
  } catch (err) {
    if (err.name === "AbortError") {
      console.warn("エンディング生成キャンセル");
      return "";
    }
    console.error("エンディング生成失敗:", err);
    alert("エンディング生成に失敗:\n" + err.message);
    return "";
  } finally {
    showLoadingModal(false);
  }
}

/** 圧縮テキスト解凍 */
function decompressCondition(zippedBase64) {
  if (!zippedBase64) return "(不明)";
  try {
    const bin = atob(zippedBase64);
    const uint8 = new Uint8Array([...bin].map(c => c.charCodeAt(0)));
    const inf = pako.inflate(uint8);
    return new TextDecoder().decode(inf);
  } catch (e) {
    console.error("decompress失敗:", e);
    return "(解凍エラー)";
  }
}

/** トークン調整ボタン押下 → モーダルを開く */
function onOpenTokenAdjustModal() {
  let missingCount = 0;
  missingCount = window.sceneHistory.filter(e => !e.content_en).length;
  const msg = `${missingCount}件のシーン/行動に内部英語データがありません。生成しますか？`;
  document.getElementById("token-adjust-message").textContent = msg;
  document.getElementById("token-adjust-progress").textContent = "";
  const mod = document.getElementById("token-adjust-modal");
  mod.classList.add("active");
}

/** トークン調整のOK→不足している英語をまとめて生成 */
async function onConfirmTokenAdjust() {
  const mod = document.getElementById("token-adjust-modal");
  const prog = document.getElementById("token-adjust-progress");
  let targets = window.sceneHistory.filter(e => !e.content_en && (e.type === "scene" || e.type === "action"));

  if (!window.apiKey) {
    alert("APIキー未設定");
    return;
  }
  if (targets.length === 0) {
    alert("不足はありません。");
    mod.classList.remove("active");
    return;
  }

  let doneCount = 0;
  const total = targets.length;

  for (const entry of targets) {
    doneCount++;
    prog.textContent = `${doneCount}/${total}件処理中...`;
    // 英訳生成
    const tr = await generateEnglishTranslation(entry.content);
    entry.content_en = tr;
    const updated = {
      ...entry,
      content_en: tr
    };
    await updateSceneEntry(updated);
  }
  prog.textContent = `${total}/${total}件完了`;
  alert("英語データ生成が完了しました。");
  mod.classList.remove("active");
}

/** 日本語→英語翻訳 */
async function generateEnglishTranslation(japaneseText) {
  if (!japaneseText.trim()) return "";
  const sys = "あなたは優秀な翻訳家です。";
  const u = `以下の日本語テキストを自然な英語に翻訳してください:\n${japaneseText}\n`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: u }
        ],
        temperature: 0.3
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("翻訳失敗:", err);
    return "";
  }
}

/** 回答候補を生成 */
async function onGenerateActionCandidates() {
  if (!window.apiKey) {
    alert("APIキー未設定");
    return;
  }
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  const lastSceneText = lastSceneEntry ? lastSceneEntry.content : "(シーン無し)";

  // ▼ ここで wizardData から未クリアセクションの条件テキストを取得する
  const wd = window.currentScenario?.wizardData;
  let conditionText = "";
  if (wd && wd.sections && wd.sections.length > 0) {
    // セクションを番号順にソート
    const sorted = wd.sections.slice().sort((a, b) => a.number - b.number);

    // まだクリアしていない最初のセクションを探す
    const firstUncleared = sorted.find(sec => !sec.cleared);
    if (firstUncleared) {
      // 圧縮されている条件テキストを解凍
      conditionText = decompressCondition(firstUncleared.conditionZipped);
      // これで `conditionText` に最新の未クリア条件が入る
    }
  }
  window.cancelRequested = false;
  showLoadingModal(true);

  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    const prompt = `
      あなたはTRPGのGMです。
      下記シーンとセクションクリア条件を踏まえ、プレイヤーが可能な行動案を4つ提案してください。
      １：セクションのクリアに関係しそうなものを1つ
      ２：妥当なものを2つ
      ３：少し頭がおかしい行動案を1つ
      合計４行構成にしてください。
      順番はシャッフルしてください。
      言葉の表現でどれがクリアに関係しそうなのかわからないようにしてください。
      ---
      シーン：
      ${lastSceneText}
      ---
      クリア条件：
      ${conditionText}
    `;
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": 'Bearer ' + window.apiKey
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGアシスタント" },
          { role: "user", content: prompt }
        ],
        temperature: 0.7
      }),
      signal
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const content = data.choices[0].message.content || "";
    const lines = content.split("\n").map(l => l.trim()).filter(l => l);

    const container = document.getElementById("action-candidates-container");
    if (!container) return;
    container.innerHTML = "";

    lines.forEach(line => {
      const btn = document.createElement("button");
      btn.textContent = line.replace(/^\d+\.\s*/, "");
      btn.style.display = "block";
      btn.style.margin = "5px 0";
      btn.addEventListener("click", () => {
        const playerInput = document.getElementById("player-input");
        if (playerInput) {
          playerInput.value = btn.textContent;
        }
      });
      container.appendChild(btn);
    });
  } catch (e) {
    if (e.name === "AbortError") {
      console.log("候補生成キャンセル");
    } else {
      console.error(e);
      alert("候補生成失敗:" + e.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/** 全セクション表示モーダル */
function showAllSectionsModal() {
  const modal = document.getElementById("all-sections-modal");
  if (!modal) return;

  const wd = (window.currentScenario && window.currentScenario.wizardData) || {};
  const sections = wd.sections || [];

  const container = document.getElementById("all-sections-content");
  container.textContent = "";

  if (!sections.length) {
    container.textContent = "セクション情報がありません。";
  } else {
    let text = "";
    for (const sec of sections) {
      text += `【セクション${sec.number}】` + (sec.cleared ? "(クリア済み)" : "(未クリア)") + "\n";
      text += "条件: " + (decompressCondition(sec.conditionZipped)) + "\n\n";
    }
    container.textContent = text;
  }

  modal.classList.add("active");
}

/** パーティ確認モーダル */
function showPartyModal() {
  const modal = document.getElementById("party-modal");
  if (!modal) return;
  modal.classList.add("active");
  renderPartyCardsInModal();
}

function renderPartyCardsInModal() {
  const container = document.getElementById("party-modal-card-container");
  if (!container) return;
  container.innerHTML = "";

  const scenario = window.currentScenario;
  if (!scenario?.wizardData?.party) {
    container.textContent = "パーティ情報がありません。";
    return;
  }

  const wizardPartyCards = scenario.wizardData.party;
  const dbCards = window.characterData;

  const merged = wizardPartyCards.map(wCard => {
    const dbMatch = dbCards.find(dbC => dbC.id === wCard.id);
    if (!dbMatch) {
      return wCard;
    }
    return {
      ...dbMatch,
      ...wCard,
      imageData: dbMatch.imageData || wCard.imageData
    };
  });

  merged.forEach(card => {
    const cardEl = createPartyCardElement(card);
    container.appendChild(cardEl);
  });
}

function createPartyCardElement(c) {
  const cardEl = document.createElement("div");
  cardEl.className = "card ";
  cardEl.className += "rarity" + (c.rarity || "").replace("★", "").trim();

  cardEl.setAttribute("data-id", c.id);
  cardEl.addEventListener("click", () => {
    cardEl.classList.toggle("flipped");
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cf = document.createElement("div");
  cf.className = "card-front";

  const bg = (c.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  if (bg) {
    cf.style.backgroundImage = bg;
  }

  const rv = (typeof c.rarity === "string") ? c.rarity.replace("★", "").trim() : "0";
  const bezel = document.createElement("div");
  bezel.className = "bezel rarity" + rv;
  cf.appendChild(bezel);

  let roleLabel = "";
  if (c.role === "avatar") roleLabel = "(アバター)";
  else if (c.role === "partner") roleLabel = "(パートナー)";

  const tEl = document.createElement("div");
  tEl.className = "card-type";
  tEl.textContent = (c.type || "不明") + roleLabel;
  cf.appendChild(tEl);

  const imgCont = document.createElement("div");
  imgCont.className = "card-image";
  if (c.imageData) {
    const im = document.createElement("img");
    im.src = c.imageData;
    im.alt = c.name;
    imgCont.appendChild(im);
  }
  cf.appendChild(imgCont);

  const info = document.createElement("div");
  info.className = "card-info";

  const nm = document.createElement("p");
  nm.innerHTML = "<h3>" + DOMPurify.sanitize(c.name) + "</h3>";
  info.appendChild(nm);

  if (c.state) {
    const st = document.createElement("p");
    st.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(c.state);
    info.appendChild(st);
  }
  const sp = document.createElement("p");
  sp.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(c.special);
  info.appendChild(sp);

  const cap = document.createElement("p");
  cap.innerHTML = "<span>" + DOMPurify.sanitize(c.caption) + "</span>";
  info.appendChild(cap);

  cf.appendChild(info);

  const cb = document.createElement("div");
  cb.className = "card-back";
  cb.innerHTML = `<strong>${DOMPurify.sanitize(c.type)}</strong>`;

  cardInner.appendChild(cf);
  cardInner.appendChild(cb);
  cardEl.appendChild(cardInner);
  return cardEl;
}

/** 最新シーンを要約しカード化に向けた情報を抽出 */
async function getLastSceneSummary() {
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  if (!lastSceneEntry) return "シーンがありません。";

  const text = lastSceneEntry.content;
  const systemPrompt = `
あなたは優秀なカード作成用プロンプト生成者。
以下フォーマットで【名前】【タイプ】【外見】を作ってください。`;
  const userPrompt = `
シーン文:
${text}
ここからエレメントにできそうな対象1つを抽出し、【名前】【タイプ】【外見】を生成してください。
`;

  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": 'Bearer ' + window.apiKey
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ]
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    return data.choices[0].message.content || "";
  } catch (e) {
    console.error("要約失敗:", e);
    return "(要約失敗)";
  }
}

/** ローディングモーダル表示/非表示 */
function showLoadingModal(show) {
  const m = document.getElementById("loading-modal");
  if (!m) return;
  if (show) {
    m.classList.add("active");
  } else {
    m.classList.remove("active");
  }
}

function onCancelFetch() {
  if (window.currentRequestController) {
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}

// 外部から呼べるようにexport
window.loadScenarioData = loadScenarioData;
window.onCancelFetch = onCancelFetch;
---- 
scenarioWizard.js 
/************************************************************
 * scenarioWizard.js
 * 
 * 「シナリオ作成ウィザード」用スクリプト
 * 
 * ざっくり以下のステップ：
 *   ステップ0: パーティ選択
 *   ステップ1: ジャンル選択
 *   ステップ2: シナリオタイプ選択
 *   ステップ3: シナリオ要約の確認 → 開始
 * 
 * wizardData にパーティIDやジャンル、シナリオタイプなどを格納し、
 * 最終的に createNewScenario() でDBへ登録 → scenario.html へ遷移
 ************************************************************/

// ウィザード全体で使うデータ
let wizardData = {
  genre: "",
  title: "",
  scenarioType: "",
  clearCondition: "",
  scenarioSummary: "",
  scenarioSummaryEn: "",
  introScene: "",
  party: [],
  partyId: 0,
  currentPartyName: "" // ← 追加: 選択中のパーティ名を保管
};

// 「舞台(複数)・テーマ(単一)・雰囲気(単一)」の一時保存用
let wizStoredStageArr = [];
let wizStoredTheme = "";
let wizStoredMood = "";

// 各カテゴリの「その他」候補
let wizCustomStageChips = [];
let wizCustomThemeChips = [];
let wizCustomMoodChips = [];

let wizardCurrentOtherCategory = "";
let wizardDeletingChipLabel = "";
let wizardDeletingChipCategory = "";

let wizardChoice = ""; // "axis" or "free"

// パーティ一覧を表示するときに使用する配列
let wizardPartyList = [];

// APIキー（scenarioWizardでは localStorage に保存されたキーを読んで使う想定）
window.apiKey = localStorage.getItem("apiKey") || "";

/************************************************************
 * ウィンドウロード時の初期化処理
 ************************************************************/
window.addEventListener("load", async () => {
  // 1) IndexedDBを初期化
  await initIndexedDB();

  // 2) 以前のウィザード状態があれば読み込む
  const storedWizard = await loadWizardDataFromIndexedDB();
  if (storedWizard) {
    wizardData = storedWizard;
  }

  // 3) 軸入力/自由入力チップ関連をセットアップ
  initWizardChips();

  // 4) パーティ一覧をロード＆表示（ステップ0）
  wizardPartyList = await loadAndDisplayPartyList();

  // 5) 各種ボタンのイベント割り当て
  // ステップ0
  document.getElementById("go-wizard-step1-btn").addEventListener("click", onWizardStep0Next);

  // ステップ1
  document.getElementById("back-to-step0-button").addEventListener("click", onBackToStep0);
  document.getElementById("go-step2-btn").addEventListener("click", onGoStep2);

  // ステップ2
  document.getElementById("back-to-step1-button").addEventListener("click", onBackToStep1);
  document.getElementById("type-objective-btn").addEventListener("click", () => onSelectScenarioType("objective"));
  document.getElementById("type-exploration-btn").addEventListener("click", () => onSelectScenarioType("exploration"));
  document.getElementById("confirm-scenario-ok").addEventListener("click", onConfirmScenarioModalOK);
  document.getElementById("confirm-scenario-cancel").addEventListener("click", onConfirmScenarioModalCancel);

  // ステップ3
  document.getElementById("back-to-step2-button").addEventListener("click", onBackToStep2FromStep3);
  document.getElementById("start-scenario-button").addEventListener("click", onStartScenario);

  // ChatGPT応答待ちモーダルのキャンセルボタン
  document.getElementById("cancel-request-button").addEventListener("click", onCancelFetch);

  // 「その他」追加モーダル
  document.getElementById("wizard-other-generate-btn").addEventListener("click", wizardOtherGenerate);
  document.getElementById("wizard-other-ok-btn").addEventListener("click", wizardOtherOk);
  document.getElementById("wizard-other-cancel-btn").addEventListener("click", wizardOtherCancel);

  // 「削除」確認モーダル
  document.getElementById("wizard-delete-confirm-ok").addEventListener("click", wizardDeleteConfirmOk);
  document.getElementById("wizard-delete-confirm-cancel").addEventListener("click", wizardDeleteConfirmCancel);

  // 軸 or 自由入力のトグル
  const axisChip = document.getElementById("choice-axis");
  const freeChip = document.getElementById("choice-free");
  axisChip.addEventListener("click", () => {
    wizardChoice = "axis";
    axisChip.classList.add("selected");
    freeChip.classList.remove("selected");
    enableAxisInput(true);
    enableFreeInput(false);
  });
  freeChip.addEventListener("click", () => {
    wizardChoice = "free";
    freeChip.classList.add("selected");
    axisChip.classList.remove("selected");
    enableAxisInput(false);
    enableFreeInput(true);
  });

  // 初期状態では選択無し
  wizardChoice = "";
  axisChip.classList.remove("selected");
  freeChip.classList.remove("selected");
  enableAxisInput(false);
  enableFreeInput(false);

  // UI更新
  updateSelectedGenreDisplay();
  updateSummaryUI();
});

/************************************************************
 * ステップ0: パーティ選択
 ************************************************************/
/**
 * パーティ一覧を取得してラジオボタンで表示。
 * ここで「あなたの分身」をダミーのパーティ(-1)として先頭に追加
 */
async function loadAndDisplayPartyList() {
  try {
    // ▼ 追加：avatarData(“myAvatar”) を読み込む
    let avatarImageBase64 = "";
    const avatarTx = db.transaction("avatarData", "readonly");
    const avatarStore = avatarTx.objectStore("avatarData");
    const avatarReq = avatarStore.get("myAvatar");
    const avatarData = await new Promise(resolve => {
      avatarReq.onsuccess = () => resolve(avatarReq.result || null);
      avatarReq.onerror = () => resolve(null);
    });
    if (avatarData && avatarData.imageData) {
      avatarImageBase64 = avatarData.imageData;
    }

    // 1) パーティ一覧 & 全カードを取得
    const allParties = await listAllParties();
    const allChars = await loadCharacterDataFromIndexedDB();

    // パーティごとに「カードが1枚以上あるか」をチェック
    const filtered = [];
    for (const p of allParties) {
      const cards = allChars.filter(c => c.group === "Party" && c.partyId === p.partyId);
      if (cards.length < 1) continue; // カード0枚なら非表示

      // アバター画像 or 最初のカード画像
      let mainImage = "";
      const avatarCard = cards.find(c => c.role === "avatar" && c.imageData);
      if (avatarCard) {
        mainImage = avatarCard.imageData;
      } else {
        const firstImgCard = cards.find(c => c.imageData);
        if (firstImgCard) {
          mainImage = firstImgCard.imageData;
        }
      }

      filtered.push({
        partyId: p.partyId,
        name: p.name,
        updatedAt: p.updatedAt || "",
        avatarImage: mainImage
      });
    }
    // 日付が新しい順にソート
    filtered.sort((a, b) => b.updatedAt.localeCompare(a.updatedAt));

    // ▼ 「あなたの分身」を先頭に追加。
    //   avatarImageBase64 が取得できていれば、それを入れる
    const youAvatarAsParty = {
      partyId: -1,
      name: "あなたの分身",
      updatedAt: "",
      avatarImage: avatarImageBase64
    };
    filtered.unshift(youAvatarAsParty);

    // 3) 表示先をクリア
    const container = document.getElementById("wizard-party-list");
    container.innerHTML = "";

    // 4) パーティ一覧を1行ずつ生成
    filtered.forEach(p => {
      const row = document.createElement("div");
      row.className = "wizard-party-row";

      // ラジオボタン input
      const rb = document.createElement("input");
      rb.type = "radio";
      rb.name = "wizardPartyRadio";
      rb.value = p.partyId.toString();

      if (wizardData.partyId === p.partyId) {
        rb.checked = true;
      }

      const uniqueId = "radio-party-" + p.partyId;
      rb.id = uniqueId;

      // ラベル
      const label = document.createElement("label");
      label.className = "wizard-party-label";
      label.setAttribute("for", uniqueId);

      // 画像
      if (p.avatarImage) {
        const img = document.createElement("img");
        img.src = p.avatarImage;
        img.alt = "PartyImage";
        label.appendChild(img);
      } else {
        const noImg = document.createElement("div");
        noImg.className = "no-image-box";
        noImg.textContent = "No Image";
        label.appendChild(noImg);
      }

      // テキスト
      const ymd = p.updatedAt.split("T")[0] || "";
      const infoSpan = document.createElement("span");
      if (p.partyId === -1) {
        // あなたの分身
        infoSpan.textContent = p.name;
      } else {
        infoSpan.textContent = `${p.name} (更新:${ymd})`;
      }
      label.appendChild(infoSpan);

      row.appendChild(rb);
      row.appendChild(label);
      container.appendChild(row);
    });

    // 5) 最後に「パーティなし」を追加
    {
      const row = document.createElement("div");
      row.className = "wizard-party-row";

      const rb = document.createElement("input");
      rb.type = "radio";
      rb.name = "wizardPartyRadio";
      rb.value = "0";
      const uniqueId = "radio-party-none";
      rb.id = uniqueId;

      if (!wizardData.partyId) {
        rb.checked = true;
      }

      const label = document.createElement("label");
      label.className = "wizard-party-label";
      label.setAttribute("for", uniqueId);
      label.textContent = "パーティなし";

      row.appendChild(rb);
      row.appendChild(label);
      container.appendChild(row);
    }

    return filtered;
  } catch (err) {
    console.error("パーティ一覧表示失敗:", err);
  }
}

/** 「次へ」ボタン → 選択されたパーティを wizardData.partyId に保存 */
function onWizardStep0Next() {
  const checked = document.querySelector('input[name="wizardPartyRadio"]:checked');
  if (!checked) {
    alert("パーティを1つ選択してください。");
    return;
  }
  const pid = parseInt(checked.value, 10);
  wizardData.partyId = pid;

  if (pid === 0) {
    // パーティなし
    wizardData.currentPartyName = "パーティなし";
  } else if (pid === -1) {
    // あなたの分身
    wizardData.currentPartyName = "あなたの分身";
  } else {
    // 通常のパーティ
    const chosen = wizardPartyList.find(x => x.partyId === pid);
    if (chosen) {
      wizardData.currentPartyName = chosen.name;
    } else {
      wizardData.currentPartyName = "不明パーティ";
    }
  }

  // DBに保存
  saveWizardDataToIndexedDB(wizardData)
    .catch(e => console.error(e));

  // ステップ0 → ステップ1
  document.getElementById("wizard-step0").style.display = "none";
  document.getElementById("wizard-step1").style.display = "block";
}

function onBackToStep0() {
  document.getElementById("wizard-step1").style.display = "none";
  document.getElementById("wizard-step0").style.display = "block";
}

/************************************************************
 * ステップ1: ジャンル選択（軸選択/自由入力）
 ************************************************************/
/** 軸入力用の初期化 */
function initWizardChips() {
  let stageJson = localStorage.getItem("elementStageArr") || "[]";
  try {
    wizStoredStageArr = JSON.parse(stageJson);
  } catch {
    wizStoredStageArr = [];
  }
  wizStoredTheme = localStorage.getItem("elementTheme") || "";
  wizStoredMood = localStorage.getItem("elementMood") || "";

  wizCustomStageChips = loadWizardCustom("customStageChips");
  wizCustomThemeChips = loadWizardCustom("customThemeChips");
  wizCustomMoodChips = loadWizardCustom("customMoodChips");

  renderWizardStageChips();
  renderWizardThemeChips();
  renderWizardMoodChips();

  updateWizGenreResultText();
}

function loadWizardCustom(key) {
  try {
    const val = localStorage.getItem(key);
    if (!val) return [];
    return JSON.parse(val);
  } catch {
    return [];
  }
}

/** 軸入力の「舞台(複数)」を表示 */
function renderWizardStageChips() {
  const defaults = ["ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク"];
  const container = document.getElementById("wiz-stage-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const all = [...defaults, ...wizCustomStageChips, "その他"];
  all.forEach(label => {
    const chip = createWizardChip(label, "stage");
    container.appendChild(chip);
  });
}

/** 軸入力の「テーマ(単一)」を表示 */
function renderWizardThemeChips() {
  const defaults = [
    "アクション / 冒険",
    "ミステリー / サスペンス",
    "ロマンス / ドラマ",
    "コメディ / ほのぼの",
    "ホラー / スリラー"
  ];
  const container = document.getElementById("wiz-theme-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const all = [...defaults, ...wizCustomThemeChips, "その他"];
  all.forEach(label => {
    const chip = createWizardChip(label, "theme");
    container.appendChild(chip);
  });
}

/** 軸入力の「雰囲気(単一)」を表示 */
function renderWizardMoodChips() {
  const defaults = ["ライト / ポップ", "中間 / バランス型", "ダーク / シリアス"];
  const container = document.getElementById("wiz-mood-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const all = [...defaults, ...wizCustomMoodChips, "その他"];
  all.forEach(label => {
    const chip = createWizardChip(label, "mood");
    container.appendChild(chip);
  });
}

/** 軸入力用のchip生成 */
function createWizardChip(label, category) {
  const chip = document.createElement("div");
  chip.className = "chip";
  chip.textContent = label;

  const isOther = (label === "その他");
  // 既存選択を反映
  if (category === "stage") {
    if (wizStoredStageArr.includes(label)) {
      chip.classList.add("selected");
    }
  } else if (category === "theme") {
    if (wizStoredTheme === label) {
      chip.classList.add("selected");
    }
  } else if (category === "mood") {
    if (wizStoredMood === label) {
      chip.classList.add("selected");
    }
  }

  chip.addEventListener("click", () => {
    if (!canEditAxisInput()) return; // 軸入力モードでなければ無視

    // 「その他」を押したらモーダルを出す
    if (isOther) {
      openWizardOtherModal(category);
      return;
    }

    if (category === "stage") {
      // 複数選択可
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        wizStoredStageArr = wizStoredStageArr.filter(x => x !== label);
      } else {
        chip.classList.add("selected");
        wizStoredStageArr.push(label);
      }
      localStorage.setItem("elementStageArr", JSON.stringify(wizStoredStageArr));

    } else if (category === "theme") {
      // 単一選択
      const allChips = document.getElementById("wiz-theme-chips-container").querySelectorAll(".chip");
      allChips.forEach(c => c.classList.remove("selected"));
      chip.classList.add("selected");
      wizStoredTheme = label;
      localStorage.setItem("elementTheme", wizStoredTheme);

    } else if (category === "mood") {
      // 単一選択
      const allChips = document.getElementById("wiz-mood-chips-container").querySelectorAll(".chip");
      allChips.forEach(c => c.classList.remove("selected"));
      chip.classList.add("selected");
      wizStoredMood = label;
      localStorage.setItem("elementMood", wizStoredMood);
    }

    updateWizGenreResultText();
  });

  // カスタムチップ削除ボタン
  if (!isOther) {
    if (
      (category === "stage" && wizCustomStageChips.includes(label)) ||
      (category === "theme" && wizCustomThemeChips.includes(label)) ||
      (category === "mood" && wizCustomMoodChips.includes(label))
    ) {
      addWizardRemoveButton(chip, label, category);
    }
  }

  return chip;
}

function addWizardRemoveButton(chip, label, category) {
  const span = document.createElement("span");
  span.textContent = "×";
  span.style.marginLeft = "4px";
  span.style.cursor = "pointer";
  span.style.color = "red";
  span.addEventListener("click", (ev) => {
    ev.stopPropagation();
    wizardDeletingChipLabel = label;
    wizardDeletingChipCategory = category;
    document.getElementById("wizard-delete-confirm-modal").classList.add("active");
  });
  chip.appendChild(span);
}

/** 軸入力を有効/無効にする */
function enableAxisInput(flag) {
  const group = document.getElementById("axis-input-group");
  if (!group) return;
  if (flag) {
    group.style.display = "block";
    group.style.pointerEvents = "auto";
    group.style.opacity = "1.0";
  } else {
    group.style.display = "none";
    group.style.pointerEvents = "none";
    group.style.opacity = "0.2";
  }
}

/** 自由入力を有効/無効にする */
function enableFreeInput(flag) {
  const group = document.getElementById("free-input-group");
  if (!group) return;
  if (flag) {
    group.style.display = "block";
    group.style.pointerEvents = "auto";
    group.style.opacity = "1.0";
  } else {
    group.style.display = "none";
    group.style.pointerEvents = "none";
    group.style.opacity = "0.2";
  }
}

/** 軸入力モードでなければチップ操作禁止 */
function canEditAxisInput() {
  return (wizardChoice === "axis");
}

function openWizardOtherModal(category) {
  wizardCurrentOtherCategory = category;
  let catText = "";
  if (category === "stage") catText = "舞台に追加する「その他」";
  else if (category === "theme") catText = "テーマに追加する「その他」";
  else catText = "雰囲気に追加する「その他」";

  document.getElementById("wizard-other-input-modal-category").textContent = catText;
  document.getElementById("wizard-other-input-text").value = "";
  document.getElementById("wizard-other-input-modal").classList.add("active");
}

function wizardOtherGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  let existingList = [];
  if (wizardCurrentOtherCategory === "stage") {
    existingList = ["ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク", ...wizCustomStageChips];
  } else if (wizardCurrentOtherCategory === "theme") {
    existingList = [
      "アクション / 冒険",
      "ミステリー / サスペンス",
      "ロマンス / ドラマ",
      "コメディ / ほのぼの",
      "ホラー / スリラー",
      ...wizCustomThemeChips
    ];
  } else if (wizardCurrentOtherCategory === "mood") {
    existingList = ["ライト / ポップ", "中間 / バランス型", "ダーク / シリアス", ...wizCustomMoodChips];
  }

  showLoadingModal(true);
  (async () => {
    try {
      const systemPrompt = "あなたは創造力豊かなアシスタントです。回答は1つだけ。";
      const userPrompt = `既存候補:${existingList.join(" / ")}\nこれらに無い新しい案を1つ提案してください。`;

      const resp = await fetch("https://api.openai.com/v1/chat/completions", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${window.apiKey}`
        },
        body: JSON.stringify({
          model: "gpt-4",
          messages: [
            { role: "system", content: systemPrompt },
            { role: "user", content: userPrompt }
          ],
          temperature: 0.7
        })
      });
      const data = await resp.json();
      if (data.error) throw new Error(data.error.message);

      const newCandidate = (data.choices[0].message.content || "").trim();
      document.getElementById("wizard-other-input-text").value = newCandidate;
    } catch (err) {
      console.error(err);
      alert("その他生成失敗:\n" + err.message);
    } finally {
      showLoadingModal(false);
    }
  })();
}

function wizardOtherOk() {
  const val = document.getElementById("wizard-other-input-text").value.trim();
  document.getElementById("wizard-other-input-modal").classList.remove("active");
  if (!val) return;

  if (wizardCurrentOtherCategory === "stage") {
    if (!wizCustomStageChips.includes(val)) {
      wizCustomStageChips.push(val);
      localStorage.setItem("customStageChips", JSON.stringify(wizCustomStageChips));
    }
    renderWizardStageChips();
  } else if (wizardCurrentOtherCategory === "theme") {
    if (!wizCustomThemeChips.includes(val)) {
      wizCustomThemeChips.push(val);
      localStorage.setItem("customThemeChips", JSON.stringify(wizCustomThemeChips));
    }
    renderWizardThemeChips();
  } else if (wizardCurrentOtherCategory === "mood") {
    if (!wizCustomMoodChips.includes(val)) {
      wizCustomMoodChips.push(val);
      localStorage.setItem("customMoodChips", JSON.stringify(wizCustomMoodChips));
    }
    renderWizardMoodChips();
  }
  updateWizGenreResultText();
}

function wizardOtherCancel() {
  document.getElementById("wizard-other-input-modal").classList.remove("active");
}

function wizardDeleteConfirmOk() {
  if (wizardDeletingChipCategory === "stage") {
    wizCustomStageChips = wizCustomStageChips.filter(c => c !== wizardDeletingChipLabel);
    localStorage.setItem("customStageChips", JSON.stringify(wizCustomStageChips));
    wizStoredStageArr = wizStoredStageArr.filter(s => s !== wizardDeletingChipLabel);
    localStorage.setItem("elementStageArr", JSON.stringify(wizStoredStageArr));
    renderWizardStageChips();
  } else if (wizardDeletingChipCategory === "theme") {
    wizCustomThemeChips = wizCustomThemeChips.filter(c => c !== wizardDeletingChipLabel);
    localStorage.setItem("customThemeChips", JSON.stringify(wizCustomThemeChips));
    if (wizStoredTheme === wizardDeletingChipLabel) {
      wizStoredTheme = "";
      localStorage.setItem("elementTheme", "");
    }
    renderWizardThemeChips();
  } else if (wizardDeletingChipCategory === "mood") {
    wizCustomMoodChips = wizCustomMoodChips.filter(c => c !== wizardDeletingChipLabel);
    localStorage.setItem("customMoodChips", JSON.stringify(wizCustomMoodChips));
    if (wizStoredMood === wizardDeletingChipLabel) {
      wizStoredMood = "";
      localStorage.setItem("elementMood", "");
    }
    renderWizardMoodChips();
  }

  document.getElementById("wizard-delete-confirm-modal").classList.remove("active");
  wizardDeletingChipLabel = "";
  wizardDeletingChipCategory = "";
  updateWizGenreResultText();
}

function wizardDeleteConfirmCancel() {
  document.getElementById("wizard-delete-confirm-modal").classList.remove("active");
  wizardDeletingChipLabel = "";
  wizardDeletingChipCategory = "";
}

function updateWizGenreResultText() {
  const st = wizStoredStageArr.length ? `【舞台】${wizStoredStageArr.join("/")}` : "";
  const th = wizStoredTheme ? `【テーマ】${wizStoredTheme}` : "";
  const md = wizStoredMood ? `【雰囲気】${wizStoredMood}` : "";
  const joined = st + th + md || "（未設定）";
  document.getElementById("wiz-genre-result-text").textContent = joined;
}

/************************************************************
 * ステップ1 → ステップ2
 ************************************************************/
function onGoStep2() {
  if (!wizardChoice) {
    alert("「選択して入力」か「自由入力」を選んでください。");
    return;
  }

  if (wizardChoice === "axis") {
    // 軸入力モード
    const result = buildChipsGenre();
    if (!result) {
      alert("舞台・テーマ・雰囲気のいずれかは入力してください。");
      return;
    }
    wizardData.genre = result;
  } else {
    // 自由入力モード
    const freeVal = document.getElementById("free-genre-input").value.trim();
    if (!freeVal) {
      alert("自由入力ジャンルを入力してください。");
      return;
    }
    wizardData.genre = freeVal;
  }

  saveWizardDataToIndexedDB(wizardData)
    .catch(e => console.error(e));

  // 画面遷移
  document.getElementById("wizard-step1").style.display = "none";
  document.getElementById("wizard-step2").style.display = "block";

  updateSelectedPartyDisplay();
  updateSelectedGenreDisplay();
}

function buildChipsGenre() {
  let stagePart = "";
  if (wizStoredStageArr.length > 0) {
    stagePart = "【舞台】" + wizStoredStageArr.join("/");
  }
  const themePart = wizStoredTheme ? "【テーマ】" + wizStoredTheme : "";
  const moodPart = wizStoredMood ? "【雰囲気】" + wizStoredMood : "";
  return stagePart + themePart + moodPart;
}

function onBackToStep1() {
  document.getElementById("wizard-step2").style.display = "none";
  document.getElementById("wizard-step1").style.display = "block";
}

function updateSelectedPartyDisplay() {
  const el = document.getElementById("selected-party-display");
  if (!el) return;
  el.textContent = wizardData.currentPartyName || "(未選択)";
}

function updateSelectedGenreDisplay() {
  const el = document.getElementById("selected-genre-display");
  if (el) {
    el.textContent = wizardData.genre || "（未選択）";
  }
}

/************************************************************
 * ステップ2: シナリオタイプ選択 → 確認モーダル
 ************************************************************/
function onSelectScenarioType(type) {
  wizardData.scenarioType = type;
  saveWizardDataToIndexedDB(wizardData).catch(e => console.error(e));

  const typeLabel = (type === "objective") ? "目的達成型" : "探索型";

  // パーティ表示
  const partyEl = document.getElementById("confirm-party-text");
  if (partyEl) {
    partyEl.textContent = "パーティ: " + (wizardData.currentPartyName || "(未選択)");
  }

  // ジャンル + シナリオタイプ表示
  const confirmText = `ジャンル: ${wizardData.genre}\nシナリオタイプ: ${typeLabel}`;
  document.getElementById("confirm-genre-type-text").textContent = confirmText;

  // モーダルを開く
  document.getElementById("confirm-scenario-modal").classList.add("active");
}

function onConfirmScenarioModalCancel() {
  document.getElementById("confirm-scenario-modal").classList.remove("active");
}

/** 確認モーダル「OK」→ シナリオ生成処理 */
async function onConfirmScenarioModalOK() {
  showLoadingModal(true);
  document.getElementById("confirm-scenario-modal").classList.remove("active");

  try {
    // 1) パーティ情報を wizardData に反映
    await storePartyInWizardData();

    // 2) シナリオ概要を生成（+ クリア条件や英訳など）
    if (wizardData.scenarioType === "objective") {
      await generateScenarioSummaryAndClearCondition();
    } else {
      await generateScenarioSummary();
    }
    await generateScenarioSummaryEn();

    // 3) セクション生成
    await generateSections();

    // 4) 導入シーン生成
    await generateIntroScene();

    // 5) ステップ2→3
    document.getElementById("wizard-step2").style.display = "none";
    document.getElementById("wizard-step3").style.display = "block";
    updateSummaryUI();

  } catch (err) {
    console.error(err);
    alert("シナリオ生成に失敗しました:\n" + err.message);
  } finally {
    showLoadingModal(false);
  }
}

/**
 * パーティデータを wizardData.party に反映。
 *  - partyId=0 → パーティなし
 *  - partyId=-1 → あなたの分身
 *  - それ以外 → 通常パーティ
 */
async function storePartyInWizardData() {
  const pid = wizardData.partyId || 0;

  if (pid === 0) {
    // パーティなし
    wizardData.party = [];
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }

  if (pid === -1) {
    // ▼ あなたの分身 → avatarDataストアから読み出し
    const avatarObj = await loadMyAvatarData();
    if (avatarObj) {
      // アバターをパーティのカード風に変換
      const card = convertAvatarToPartyCard(avatarObj);
      wizardData.party = [card];
    } else {
      // アバターが未保存の場合
      wizardData.party = [];
    }
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }

  // ▼ 通常のパーティ
  const allChars = await loadCharacterDataFromIndexedDB();
  if (!allChars) {
    wizardData.party = [];
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }
  const partyCards = allChars.filter(c => c.group === "Party" && c.partyId === pid);

  // 軽量化のため一部フィールドだけ保持
  const stripped = partyCards.map(c => ({
    id: c.id,
    name: c.name,
    type: c.type,
    rarity: c.rarity,
    state: c.state,
    special: c.special,
    caption: c.caption,
    backgroundcss: c.backgroundcss,
    imageprompt: c.imageprompt,
    role: c.role,
    // 画像を仮に付ける
    imageData: c.imageData
  }));
  wizardData.party = stripped;
  await saveWizardDataToIndexedDB(wizardData);
}

/** avatarDataストアから「myAvatar」を読み込み */
function loadMyAvatarData() {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.warn("DB未初期化です");
      resolve(null);
      return;
    }
    const tx = db.transaction("avatarData", "readonly");
    const store = tx.objectStore("avatarData");
    const req = store.get("myAvatar");
    req.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    req.onerror = (err) => {
      console.error("avatarData読み込み失敗:", err);
      resolve(null);
    };
  });
}

/** avatarObj → wizardData.party の1カードに落とし込む */
function convertAvatarToPartyCard(avatarObj) {
  // avatarObjの構造例：
  // {
  //   id: "myAvatar",
  //   name: "名前",
  //   gender: "男",
  //   skill: "特技",
  //   serif: "セリフ",
  //   rarity: "★2",
  //   imageData: "data:image/png;base64,...",
  //   ...
  // }
  return {
    // DBのキャラIDでなくアバター専用の一時ID
    id: "avatar-" + Date.now(),
    name: avatarObj.name || "アバター",
    type: "キャラクター", // あるいは"アバター"など
    rarity: avatarObj.rarity || "★1",
    state: "",
    special: avatarObj.skill || "",
    caption: avatarObj.serif || "",
    backgroundcss: "",
    imageprompt: "",
    role: "avatar",
    imageData: avatarObj.imageData || ""
  };
}

/************************************************************
 * シナリオ生成関連
 ************************************************************/
async function generateScenarioSummaryAndClearCondition() {
  if (!window.apiKey) {
    wizardData.scenarioSummary = "(APIキー無し)";
    wizardData.clearCondition = "(なし)";
    return;
  }
  const prompt = `
あなたはTRPG用のシナリオ作成に長けたアシスタントです。
ジャンル:${wizardData.genre}, タイプ:目的達成型。
1) シナリオ概要(短め, 背景黒想定で飾りタグOK)
2) 【クリア条件】(非公開)
`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGシナリオメーカーです。日本語で回答。" },
          { role: "user", content: prompt }
        ]
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const text = data.choices[0].message.content || "";
    if (text.includes("【クリア条件】")) {
      const arr = text.split("【クリア条件】");
      wizardData.scenarioSummary = arr[0].trim();
      wizardData.clearCondition = (arr[1] || "").trim();
    } else {
      wizardData.scenarioSummary = text;
      wizardData.clearCondition = "";
    }
    await saveWizardDataToIndexedDB(wizardData);
  } catch (err) {
    console.error(err);
    wizardData.scenarioSummary = "(生成エラー)";
    wizardData.clearCondition = "(なし)";
    await saveWizardDataToIndexedDB(wizardData);
  }
}

async function generateScenarioSummary() {
  if (!window.apiKey) {
    wizardData.scenarioSummary = "(APIキー無し)";
    return;
  }
  const prompt = `
ジャンル:${wizardData.genre}, タイプ:探索型。
短めで背景黒想定の飾りタグ付きのシナリオ概要を作ってください。
`;
  try {
    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGシナリオメーカー、日本語で回答。" },
          { role: "user", content: prompt }
        ]
      })
    });
    const d = await r.json();
    if (d.error) throw new Error(d.error.message);
    wizardData.scenarioSummary = d.choices[0].message.content || "(概要なし)";
    await saveWizardDataToIndexedDB(wizardData);
  } catch (err) {
    console.error(err);
    wizardData.scenarioSummary = "(生成エラー)";
    await saveWizardDataToIndexedDB(wizardData);
  }
}

async function generateScenarioSummaryEn() {
  if (!window.apiKey) return;
  const jp = wizardData.scenarioSummary || "";
  if (!jp.trim()) return;

  try {
    const prompt = "以下の日本語テキストをTRPGシナリオ概要として自然な英文にしてください:\n" + jp;
    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀な翻訳家です。" },
          { role: "user", content: prompt }
        ]
      })
    });
    const d = await r.json();
    if (d.error) throw new Error(d.error.message);
    wizardData.scenarioSummaryEn = d.choices[0].message.content || "";
    await saveWizardDataToIndexedDB(wizardData);
  } catch (err) {
    console.error(err);
    wizardData.scenarioSummaryEn = "";
    await saveWizardDataToIndexedDB(wizardData);
  }
}

async function generateSections() {
  if (!window.apiKey) {
    wizardData.sections = [];
    for (let i = 1; i <= 3; i++) {
      wizardData.sections.push({
        number: i,
        conditionZipped: btoa("セクション" + i + "ダミー"),
        cleared: false
      });
    }
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }

  const count = Math.floor(Math.random() * 4) + 2; // 2～5
  const prompt = `
ジャンル:${wizardData.genre}, シナリオタイプ:${wizardData.scenarioType}用のセクション達成条件を${count}個。
1行に1個。必ず動詞で始める形にしてください。
`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたはTRPGセクション目標を考えるエキスパートです。" },
          { role: "user", content: prompt }
        ]
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const lines = (data.choices[0].message.content || "").split("\n").map(l => l.trim()).filter(l => l);
    wizardData.sections = [];
    for (let i = 0; i < count; i++) {
      const textLine = lines[i] || `「セクション${i + 1}」をクリアする`;
      const zipped = zipString(textLine);
      wizardData.sections.push({
        number: i + 1,
        conditionZipped: zipped,
        cleared: false
      });
    }
    await saveWizardDataToIndexedDB(wizardData);
  } catch (err) {
    console.error(err);
    wizardData.sections = [];
    for (let i = 1; i <= count; i++) {
      wizardData.sections.push({
        number: i,
        conditionZipped: btoa("セクション" + i + "ダミー(エラー時)"),
        cleared: false
      });
    }
    await saveWizardDataToIndexedDB(wizardData);
  }
}

function zipString(str) {
  const utf8 = new TextEncoder().encode(str);
  const def = pako.deflate(utf8);
  return btoa(String.fromCharCode(...def));
}

async function generateIntroScene() {
  if (!window.apiKey) {
    wizardData.introScene = "(導入生成失敗：APIキーなし)";
    await saveWizardDataToIndexedDB(wizardData);
    return;
  }
  const prompt = `
次のシナリオ概要を踏まえて、導入シーンを300字程度で作ってください。
背景黒想定の飾りタグ(h3,br,p style="color:aqua"など)を適度に使う。
概要:
${wizardData.scenarioSummary}
`;
  try {
    const r = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGシナリオライターです。日本語で回答。" },
          { role: "user", content: prompt }
        ]
      })
    });
    const d = await r.json();
    if (d.error) throw new Error(d.error.message);
    wizardData.introScene = d.choices[0].message.content || "(導入空)";
    await saveWizardDataToIndexedDB(wizardData);
  } catch (err) {
    console.error(err);
    wizardData.introScene = "(導入生成失敗)";
    await saveWizardDataToIndexedDB(wizardData);
  }
}

/************************************************************
 * ステップ3: シナリオ要約の表示
 ************************************************************/
function onBackToStep2FromStep3() {
  document.getElementById("wizard-step3").style.display = "none";
  document.getElementById("wizard-step2").style.display = "block";
}

async function onStartScenario() {
  try {
    // 1) シナリオタイトル自動生成など
    wizardData.title = await generateScenarioTitle(wizardData.scenarioSummary);

    // 2) DBに追加
    const scenarioId = await createNewScenario(wizardData, wizardData.title);

    // 3) 導入シーンあれば sceneEntries に追加
    if (wizardData.introScene.trim()) {
      const firstScene = {
        scenarioId,
        type: "scene",
        sceneId: "intro_" + Date.now(),
        content: wizardData.introScene,
        content_en: "", // 必要ならあとで翻訳
        prompt: ""      // 必要ならあとで画像用プロンプトを生成
      };
      await addSceneEntry(firstScene);
    }

    // 4) scenario.html に移動
    window.location.href = `scenario.html?scenarioId=${scenarioId}`;
  } catch (err) {
    console.error("シナリオ開始失敗:", err);
    alert("シナリオ開始に失敗: " + err.message);
  }
}

/** シナリオ概要からタイトルを作成 */
async function generateScenarioTitle(summary) {
  if (!window.apiKey || !summary.trim()) {
    return "新シナリオ";
  }
  const prompt = `
以下のシナリオ概要から良さげなタイトルを1つ生成してください。
括弧書きや、「シナリオタイトル：」のような接頭文字は不要です。
概要:
${summary}
`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: "あなたは優秀なTRPGシナリオタイトル生成アシスタントです。" },
          { role: "user", content: prompt }
        ]
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    const t = data.choices[0].message.content.trim();
    return t || "新シナリオ";
  } catch {
    return "新シナリオ";
  }
}

/************************************************************
 * UIヘルパー
 ************************************************************/
function updateSummaryUI() {
  const el = document.getElementById("scenario-summary");
  if (!el) return;
  const sanitized = DOMPurify.sanitize(wizardData.scenarioSummary || "(未生成)");
  el.innerHTML = sanitized;
}

function showLoadingModal(show) {
  const m = document.getElementById("loading-modal");
  if (!m) return;
  if (show) {
    m.classList.add("active");
  } else {
    m.classList.remove("active");
  }
}

/** ChatGPTリクエストのキャンセルボタン */
function onCancelFetch() {
  showLoadingModal(false);
  // 必要なら fetch の AbortController を呼ぶ等
}
---- 
scene.js 
/********************************
 * scene.js
 * シナリオ/シーン管理
 ********************************/

window.apiKey = '';
window.sceneHistory = [];
window.currentScenarioId = null;
window.currentScenario = null;
window.currentRequestController = null;
window.cancelRequested = false;

window.scenarioType = null;
window.clearCondition = null;
window.sections = [];

// 要約をメモリ上でも管理
window.sceneSummaries = []; // sceneSummaries[chunkIndex] = { en: '...', ja: '...' }

const DOMPURIFY_CONFIG = {
  ALLOWED_TAGS: ["p", "br", "hr", "h3", "h4", "h5", "span", "div", "strong", "em"],
  ALLOWED_ATTR: ["style"]
};

/** 日本語チェック用関数 */
function containsJapanese(text) {
  // 平仮名 or カタカナが含まれているかどうか
  // 例: /[ぁ-んァ-ン]/ にマッチすれば日本語(少なくとも仮名)とみなす
  return /[ぁ-んァ-ン]/.test(text);
}

/** DBからシナリオ情報を読み込み */
async function loadScenarioData(scenarioId) {
  try {
    const sc = await getScenarioById(scenarioId);
    if (!sc) {
      alert("指定シナリオが存在しません。");
      return;
    }
    window.currentScenario = sc;

    const wd = sc.wizardData || {};
    window.scenarioType = wd.scenarioType;
    window.clearCondition = wd.clearCondition || "";
    window.sections = wd.sections || [];

    const ents = await getSceneEntriesByScenarioId(scenarioId);
    window.sceneHistory = ents.map(e => ({
      entryId: e.entryId,
      type: e.type,
      sceneId: e.sceneId,
      content: e.content,
      content_en: e.content_en || "", // 英訳
      dataUrl: e.dataUrl,
      prompt: e.prompt || ""
    }));

    // sceneSummaries の読み込み
    for (let i = 0; i < 100; i++) {
      const sumRec = await getSceneSummaryByChunkIndex(i);
      if (!sumRec) break;
      window.sceneSummaries[i] = {
        en: sumRec.content_en,
        ja: sumRec.content_ja
      };
    }

    // ネタバレ(目的達成型)
    if (window.scenarioType === "objective") {
      const sb = document.getElementById("spoiler-button");
      if (sb) sb.style.display = "inline-block";
      const sp = document.getElementById("clear-condition-text");
      if (sp) sp.textContent = window.clearCondition || "(クリア条件なし)";
    } else if (window.scenarioType === "exploration") {
      const gcb = document.getElementById("get-card-button");
      if (gcb) gcb.style.display = "inline-block";
    }
  } catch (err) {
    console.error("シナリオ読み込み失敗:", err);
    alert("読み込み失敗:" + err.message);
  }
}

/** 次のシーンを生成（英語結果なら日本語翻訳してDB保存 + 画面表示） */
async function getNextScene() {
  if (!window.apiKey) {
    alert("APIキー未設定");
    return;
  }
  const pinput = (document.getElementById("player-input")?.value || "").trim();
  const hasScene = window.sceneHistory.some(e => e.type === "scene");
  if (hasScene && !pinput) {
    alert("プレイヤー行動を入力してください");
    return;
  }

  window.cancelRequested = false;
  showLoadingModal(true);

  // まずユーザー行動の英訳を作成(必要なら)
  let actionEn = "";
  if (pinput) {
    actionEn = await generateEnglishTranslation(pinput);
  }

  // システムプロンプト
  let systemText =
    `あなたは経験豊かなやさしいTRPGのゲームマスターです。
以下を守ってください。
・背景黒が前提の装飾のタグを使う
・<<<< 絶対に出力は日本語で。Please answer in Japanese!!!! >>>>
・決して一つ前のレスポンスと同じ言い回しで終わらない
・メタな表現をしない
  - ゲームマスター側の描写をしない
    -- 例：ゲームマスターは言った「…」
  - 決してセクションそのものをシーンに書いてはいけない。
    -- 例：「地下迷宮の謎を解き明かす」という「第2章」クリアを目指して、あなたは先へ進みます。
・ユーザーが困っている場合は、セクションをクリアできるようなヒントも出す
・同じことを言ってループしない
・ユーザーの行動を踏まえて、次の行動を促すようなシーンを作る
・時々パーティを会話させる
`;

  const wd = (window.currentScenario && window.currentScenario.wizardData) || {};
  const sections = wd.sections || [];
  if (sections.length > 0) {
    systemText += "\n======\n";
    for (const sec of sections) {
      systemText += `【セクション${sec.number}】` + (sec.cleared ? "(クリア済み)" : "(未クリア)") + "\n";
      systemText += "条件: " + decompressCondition(sec.conditionZipped) + "\n\n";
    }
    systemText += "======\n";
  }

  // メッセージ履歴
  const msgs = [{ role: "system", content: systemText }];

  // シナリオ概要 + パーティ情報
  if (window.currentScenario) {
    const scenarioWd = window.currentScenario.wizardData || {};
    // 英語があれば英語を使う、なければ日本語を使う
    const summ = scenarioWd.scenarioSummaryEn?.trim()
      ? scenarioWd.scenarioSummaryEn
      : (scenarioWd.scenarioSummary || "");
    msgs.push({ role: "user", content: "シナリオ概要:" + summ });
    if (scenarioWd.party != []) {
      const ptxt = buildPartyInsertionText(scenarioWd.party);
      msgs.push({ role: "user", content: ptxt });
    }
  }

  // 今回含めた行動数
  const actionCount = window.sceneHistory.filter(e => e.type === "action").length + (pinput ? 1 : 0);

  // (A) 要約(複数)を先に push
  const chunkEnd = Math.floor((actionCount - 15) / 10);
  // 例: 15->0, 25->1, 35->2, 45->3
  for (let i = 0; i <= chunkEnd; i++) {
    if (i < 0) continue;
    if (window.sceneSummaries[i]) {
      // 英語があれば英語を使う
      const sumObj = window.sceneSummaries[i];
      msgs.push({
        role: "assistant",
        content: sumObj.en || sumObj.ja || "(no summary)"
      });
    }
  }

  // (B) 要約に含まれないシーン/行動だけ push
  const skipCount = (chunkEnd + 1) * 10;
  let actionCounter = 0;
  for (const e of window.sceneHistory) {
    if (e.type === "action") {
      actionCounter++;
      if (actionCounter <= skipCount) continue;
      // 英語があれば英語を使う
      const actText = e.content_en?.trim() ? e.content_en : e.content;
      msgs.push({ role: "user", content: "player action:" + actText });
    } else if (e.type === "scene") {
      if (actionCounter <= skipCount) {
        continue;
      }
      // 英語があれば英語を使う
      const scText = e.content_en?.trim() ? e.content_en : e.content;
      msgs.push({ role: "assistant", content: scText });
    }
  }

  // 今回の行動(未挿入なら追加)
  if (pinput) {
    msgs.push({ role: "user", content: "プレイヤーの行動:" + pinput });
  }

  let nextScene = "";
  try {
    window.currentRequestController = new AbortController();
    const signal = window.currentRequestController.signal;

    // GPT呼び出し(1回だけ)
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: msgs,
        temperature: 0.7
      }),
      signal
    });

    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }

    const data = await resp.json();
    if (window.cancelRequested) {
      showLoadingModal(false);
      return;
    }
    if (data.error) throw new Error(data.error.message);

    // まずGPTから返ってきた生テキスト
    const rawScene = data.choices[0].message.content || "";

    // 日本語が含まれない(＝ほぼ英語)場合は日本語に翻訳
    // 含まれていればそのまま
    let finalSceneJa = rawScene;
    let finalSceneEn = "";
    if (!containsJapanese(rawScene)) {
      // GPT結果が英語 → 翻訳して日本語を最終出力
      finalSceneJa = await generateJapaneseTranslation(rawScene);
      finalSceneEn = rawScene;
    } else {
      // GPT結果が日本語 → 英語バージョンを作る
      finalSceneEn = await generateEnglishTranslation(rawScene);
    }

    nextScene = finalSceneJa; // 画面やDBに保存するのは最終的に日本語にしたテキスト

    // (1) 行動をDBに保存
    if (pinput) {
      const act = {
        scenarioId: window.currentScenarioId || 0,
        type: "action",
        content: pinput,
        content_en: actionEn,
        sceneId: null
      };
      const actId = await addSceneEntry(act);
      window.sceneHistory.push({ ...act, entryId: actId });
      document.getElementById("player-input").value = "";
    }

    // (2) 新シーンをDBに追加
    const sid = "scene_" + Date.now();
    const se = {
      scenarioId: window.currentScenarioId || 0,
      type: "scene",
      sceneId: sid,
      content: nextScene,       // 日本語（最終的な表示用）
      content_en: finalSceneEn, // 英語（GPTが英語だった場合はそのまま or GPTが日本語だった場合は翻訳）
      prompt: ""
    };
    const newSid = await addSceneEntry(se);
    const newSceneEntry = { ...se, entryId: newSid };
    window.sceneHistory.push(newSceneEntry);

    // (2.5) シーンの画像promptをfunction callingで生成
    const imagePromptText = await generateImagePromptFromScene(nextScene);
    if (imagePromptText) {
      newSceneEntry.prompt = imagePromptText;
      const updateRec = {
        ...newSceneEntry,
        prompt: imagePromptText
      };
      await updateSceneEntry(updateRec);
    }

    // (3) シナリオ更新
    if (window.currentScenario) {
      await updateScenario({
        ...window.currentScenario,
        updatedAt: new Date().toISOString()
      });
    }

    // (4) セクション達成チェック
    await checkSectionClearViaChatGPT(pinput, nextScene);

    // (5) 行動数判定して要約作成
    await handleSceneSummaries();

    // (6) 画面再描画
    updateSceneHistory();
    showLastScene();

    // (7) シーン生成のたびに回答候補コンテナをクリア
    const candidatesContainer = document.getElementById("action-candidates-container");
    if (candidatesContainer) {
      candidatesContainer.innerHTML = "";
    }

    // (8) 「自動的に生成する」チェックが入っていたら回答候補を生成
    const autoGenCheckbox = document.getElementById("auto-generate-candidates-checkbox");
    if (autoGenCheckbox && autoGenCheckbox.checked) {
      onGenerateActionCandidates();
    }

  } catch (e) {
    if (e.name === "AbortError") {
      console.warn("シーン取得キャンセル");
    } else {
      console.error(e);
      alert("シーン取得失敗:" + e.message);
    }
  } finally {
    showLoadingModal(false);
  }
}

/** 行動数に応じて要約を作成/削除する */
async function handleSceneSummaries() {
  const actionCount = window.sceneHistory.filter(e => e.type === "action").length;
  // 新規要約作成チェック
  if (actionCount >= 15) {
    // 15回目 -> chunkIndex=0 -> 1..10を要約
    // 25回目 -> chunkIndex=1 -> 11..20
    // ...
    // chunkIndex = floor((actionCount - 15)/10)
    const chunkIndex = Math.floor((actionCount - 15) / 10);
    if (chunkIndex >= 0) {
      // まだ sceneSummaries[chunkIndex] が無ければ作成
      if (!window.sceneSummaries[chunkIndex]) {
        // 要約対象のaction range
        const startAction = chunkIndex * 10 + 1;
        const endAction = (chunkIndex + 1) * 10;

        // 1～10件目のentryをまとめる (action+scene混在)
        //   ただし "action順に" 取り出す。面倒なので entryId でなく actionカウント順で拾う
        let gathered = [];
        let actionCounter = 0;
        for (const e of window.sceneHistory) {
          if (e.type === "action") {
            actionCounter++;
          }
          if (actionCounter >= startAction && actionCounter <= endAction) {
            gathered.push(e);
          }
        }
        const textForSummary = gathered.map(x => x.type === "action" ? `A:${x.content}` : `S:${x.content}`).join("\n");

        // 要約(英語5行 + 日本語5行)
        const enSummary = await generateSummaryWithLimit(textForSummary, 5, "en");
        const jaSummary = await generateSummaryWithLimit(textForSummary, 5, "ja");

        // DBに保存
        const sumRec = {
          chunkIndex,
          content_en: enSummary,
          content_ja: jaSummary
        };
        await addSceneSummaryRecord(sumRec);
        window.sceneSummaries[chunkIndex] = {
          en: enSummary,
          ja: jaSummary
        };
      }
    }
  }

  // 削除チェック
  // もし行動削除等で actionCount < 15 なら chunkIndex=0 を削除
  // さらに < 25 なら chunkIndex=1を削除, ...
  const checks = [15, 25, 35, 45, 55, 65, 75];
  // chunkIndex=0->15,1->25,2->35,3->45,...
  for (let i = 0; i < checks.length; i++) {
    const boundary = checks[i];
    if (actionCount <= boundary) {
      // chunkIndex i を削除
      await deleteSceneSummaryByChunkIndex(i);
      window.sceneSummaries[i] = null;
    }
  }
}

/** 与えられたテキストを、(英語or日本語)で N行程度に要約する */
async function generateSummaryWithLimit(text, lines = 5, lang = "en") {
  if (!text.trim()) return "";
  let sys = "You are a talented summarizer. The final language must be English.";
  let user = `
Summarize the following text in ${lines} lines of English:
${text}
`;
  if (lang === "ja") {
    sys = "あなたは優秀な要約者です。必ず日本語で。";
    user = `
以下のテキストを${lines}行程度で簡潔にまとめてください:
${text}
`;
  }
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: user }
        ],
        temperature: 0.5
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("要約失敗:", err);
    return "";
  }
}

/** シーン or 行動を編集したら英訳を作り直す */
async function onSceneOrActionContentEdited(entry, newText) {
  if (!window.apiKey) {
    return;
  }
  if (newText.trim() === entry.content.trim()) {
    return;
  }
  // 翻訳を作り直す
  // モーダルを一時的に表示
  showLoadingModal(true);
  try {
    const en = await generateEnglishTranslation(newText);
    entry.content = newText;
    entry.content_en = en;
    const up = {
      ...entry,
      content: newText,
      content_en: en
    };
    await updateSceneEntry(up);
  } catch (err) {
    console.error("再翻訳失敗:", err);
  } finally {
    showLoadingModal(false);
  }
}

/** シーン履歴を表示 */
function updateSceneHistory() {
  const his = document.getElementById("scene-history");
  if (!his) return;
  his.innerHTML = "";

  // セクション表示
  const wd = window.currentScenario?.wizardData;
  let sections = [];
  if (wd && wd.sections) {
    sections = wd.sections;
  }
  let sorted = [...sections].sort((a, b) => a.number - b.number);
  const firstUncleared = sorted.find(s => !s.cleared);
  sorted = sections;
  if (!firstUncleared && sorted.length > 0) {
    const tile = document.createElement("div");
    tile.className = "history-tile summary title";
    tile.textContent = "シナリオ達成!";
    his.appendChild(tile);
  }

  for (const s of sorted) {
    const t = document.createElement("div");
    if (s.number < (firstUncleared?.number || Infinity)) {
      t.className = "history-tile summary";
      t.textContent = `${decompressCondition(s.conditionZipped)}(クリア済み)`;
      refreshEndingButtons();
    } else if (s.number === firstUncleared?.number) {
      t.className = "history-tile summary";
      t.textContent = `セクション${s.number} (未クリア)`;
    }
    his.appendChild(t);
  }
  let tile = document.createElement("div");
  tile.className = "history-tile summary separator";
  his.appendChild(tile);
  
  // シナリオ概要  
  const scenarioSummaryEl = document.createElement("div");
  scenarioSummaryEl.id = "scenario-summary";
  scenarioSummaryEl.innerHTML = wd.scenarioSummary || "";
  his.appendChild(scenarioSummaryEl);
  
  // 最後のシーンは後で showLastScene() 側で表示するので履歴には表示しない
  const lastScene = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  const skipIds = [];
  if (lastScene) {
    skipIds.push(lastScene.entryId);
    window.sceneHistory.forEach(x => {
      if (x.type === "image" && x.sceneId === lastScene.sceneId) {
        skipIds.push(x.entryId);
      }
    });
  }
  const showEntries = window.sceneHistory
    .filter(e => !skipIds.includes(e.entryId))
    .sort((a, b) => a.entryId - b.entryId);

  tile = document.createElement("div");
  for (const e of showEntries) {
    if (e.type === "action") {
      tile = document.createElement("div");

      // 履歴に表示する行動
      tile.className = "history-tile";

      const at = document.createElement("p");
      at.className = "action-text";
      at.setAttribute("contenteditable", window.apiKey ? "true" : "false");
      at.innerHTML = DOMPurify.sanitize(e.content);
      at.addEventListener("blur", async () => {
        await onSceneOrActionContentEdited(e, at.innerHTML.trim());
      });
      tile.appendChild(at);
      his.appendChild(tile);
    } else if (e.type === "scene") {
      // 履歴に表示するシーン
      tile.className = "history-tile";

      // 削除ボタン
      const delBtn = document.createElement("button");
      delBtn.className = "delete-scene"
      delBtn.textContent = "シーンを削除";
      delBtn.addEventListener("click", async () => {
        await deleteSceneAndPreviousAction(e);
      });

      tile.appendChild(delBtn);
      // シーン本文 (contenteditable)
      const st = document.createElement("p");
      st.className = "scene-text";
      st.setAttribute("contenteditable", window.apiKey ? "true" : "false");
      st.innerHTML = DOMPurify.sanitize(e.content);
      st.addEventListener("blur", async () => {
        await onSceneOrActionContentEdited(e, st.innerHTML.trim());
      });
      tile.appendChild(st);

      his.appendChild(tile);

    } else if (e.type === "image") {
      // 履歴に表示する画像
      tile.className = "history-tile";

      const img = document.createElement("img");
      img.src = e.dataUrl;
      img.alt = "生成画像";
      img.style.maxHeight = "350px";
      img.style.alignSelf = "flex-end";
      img.style.width = "100%";
      img.style.objectFit = "contain";
      img.style.marginBottom = "60px";
      img.style.objectPosition = "right";
      tile.appendChild(img);

      const reBtn = document.createElement("button");
      reBtn.textContent = "再生成";
      reBtn.style.width = "10rem";
      reBtn.style.right = "calc(10rem + 4rem)";
      reBtn.style.bottom = "70px";
      reBtn.addEventListener("click", () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(e);
        if (idx >= 0) {
          openImagePromptModal(e.prompt, idx);
        }
      });
      tile.appendChild(reBtn);

      const delBtn = document.createElement("button");
      delBtn.textContent = "画像削除";
      delBtn.style.bottom = "70px";
      delBtn.style.right = "20px";

      delBtn.addEventListener("click", async () => {
        await deleteSceneEntry(e.entryId);
        window.sceneHistory = window.sceneHistory.filter(x => x.entryId !== e.entryId);
        updateSceneHistory();
        showLastScene();
      });
      tile.appendChild(delBtn);

      his.appendChild(tile);
    }
  }
  his.scrollTop = his.scrollHeight;
}

/** シーン削除 + 直前アクション削除 → 再描画 */
async function deleteSceneAndPreviousAction(sceneEntry) {
  // このシーンと同じ sceneId の画像をまとめて削除
  const removeIds = [sceneEntry.entryId];
  window.sceneHistory.forEach(x => {
    if (x.type === "image" && x.sceneId === sceneEntry.sceneId) {
      removeIds.push(x.entryId);
    }
  });

  // さらに「直前のアクション」を探して削除する
  //   → sceneEntry より前にある entryId の中から最後に出てくる type==="action"
  //   → findLastIndex のようなイメージで走査
  const idx = window.sceneHistory.findIndex(e => e.entryId === sceneEntry.entryId);
  if (idx > 0) {
    for (let i = idx - 1; i >= 0; i--) {
      if (window.sceneHistory[i].type === "action") {
        removeIds.push(window.sceneHistory[i].entryId);
        break;
      }
    }
  }

  // DB削除
  for (const rid of removeIds) {
    await deleteSceneEntry(rid);
  }
  // メモリ上から削除
  window.sceneHistory = window.sceneHistory.filter(x => !removeIds.includes(x.entryId));

  // 要約再計算 & 再描画
  await handleSceneSummaries();
  updateSceneHistory();
  showLastScene();
}

/** 最新シーンを表示 */
function showLastScene() {
  const storyDiv = document.getElementById("story");
  const lastSceneImagesDiv = document.getElementById("last-scene-images");
  if (!storyDiv || !lastSceneImagesDiv) return;

  const nextSceneBtn = document.getElementById("next-scene");
  const playerInput = document.getElementById("player-input");
  const playerActionLabel = document.getElementById("player-action");

  const lastScene = [...window.sceneHistory].reverse().find(e => e.type === "scene");

  if (lastScene) {
    storyDiv.innerHTML = "";

    // シーン本文
    const st = document.createElement("p");
    st.className = "scene-text";
    st.setAttribute("contenteditable", window.apiKey ? "true" : "false");
    st.innerHTML = DOMPurify.sanitize(lastScene.content, DOMPURIFY_CONFIG);
    st.addEventListener("blur", async () => {
      await onSceneOrActionContentEdited(lastScene, st.innerHTML.trim());
    });
    storyDiv.appendChild(st);

    // 「このシーンを削除」ボタン
    const deleteBtn = document.createElement("button");
    deleteBtn.className = "delete-scene"
    deleteBtn.textContent = "シーンを削除";
    deleteBtn.addEventListener("click", async () => {
      await deleteSceneAndPreviousAction(lastScene);
    });
    storyDiv.appendChild(deleteBtn);

    // 画像エリア
    lastSceneImagesDiv.innerHTML = "";
    const images = window.sceneHistory.filter(x => x.type === "image" && x.sceneId === lastScene.sceneId);
    images.forEach(imgEntry => {
      const c = document.createElement("div");
      c.style.marginBottom = "10px";

      const i = document.createElement("img");
      i.src = imgEntry.dataUrl;
      i.alt = "シーン画像";
      i.style.maxWidth = "100%";
      c.appendChild(i);

      const reBtn = document.createElement("button");
      reBtn.textContent = "再生成";
      reBtn.addEventListener("click", () => {
        if (!window.apiKey) return;
        const idx = window.sceneHistory.indexOf(imgEntry);
        if (idx >= 0) {
          openImagePromptModal(imgEntry.prompt, idx);
        }
      });
      c.appendChild(reBtn);

      const dBtn = document.createElement("button");
      dBtn.textContent = "画像削除";
      dBtn.addEventListener("click", async () => {
        await deleteSceneEntry(imgEntry.entryId);
        window.sceneHistory = window.sceneHistory.filter(x => x.entryId !== imgEntry.entryId);
        showLastScene();
        updateSceneHistory();
      });
      c.appendChild(dBtn);

      lastSceneImagesDiv.appendChild(c);
    });

    if (window.apiKey) {
      nextSceneBtn.style.display = "inline-block";
      playerInput.style.display = "inline-block";
      playerActionLabel.textContent = "プレイヤーはどんな行動をしますか？";
    } else {
      nextSceneBtn.style.display = "none";
      playerInput.style.display = "none";
      playerActionLabel.textContent = "";
    }
  } else {
    // シーンが無い
    storyDiv.innerHTML = "";
    lastSceneImagesDiv.innerHTML = "";

    if (window.apiKey) {
      nextSceneBtn.style.display = "inline-block";
      playerInput.style.display = "block";
      playerActionLabel.textContent = "最初のシーンを作るため行動を入力してください。";
    } else {
      nextSceneBtn.style.display = "none";
      playerInput.style.display = "none";
      playerActionLabel.textContent = "";
    }
  }
}

/** 画像用プロンプト生成 */
async function generateImagePromptFromScene(sceneText) {
  if (!window.apiKey) return "";
  try {
    const systemMsg = {
      role: "system",
      content: "あなたは画像生成のための短い英語プロンプトを作るアシスタントです。"
    };
    const userMsg = {
      role: "user",
      content: `
以下のシーン文章をもとに、イラストを生成するための英語メインのキーワード列を作成してください。
説明文や文章体は禁止。
シーン:
${sceneText}
      `
    };

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4-0613",
        messages: [systemMsg, userMsg],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) {
      console.warn("imagePrompt function callingエラー:", data.error);
      return "";
    }
    return (data.choices[0].message.content || "").trim();
  } catch (e) {
    console.error("generateImagePromptFromScene失敗:", e);
    return "";
  }
}

/** セクション達成チェック */
async function checkSectionClearViaChatGPT(latestAction, latestScene) {
  const wd = window.currentScenario?.wizardData;
  if (!wd || !wd.sections) return;
  const sorted = wd.sections.slice().sort((a, b) => a.number - b.number);
  const firstUncleared = sorted.find(s => !s.cleared);
  if (!firstUncleared) {
    return;
  }
  const conditionText = decompressCondition(firstUncleared.conditionZipped);

  const scenarioSummary = wd.scenarioSummary || "(概要なし)";
  const messages = [
    {
      role: "system",
      content: "あなたはTRPGゲームマスターのサポートAIです。回答はYESまたはNOのみでお願いします。"
    },
    {
      role: "user",
      content: `
シナリオ概要:
${scenarioSummary}

達成条件:
「${conditionText}」

最新の行動とシーン:
(行動) ${latestAction}
(シーン) ${latestScene}

この達成条件は、今の行動やシーン内容から見て、既に満たされましたか？
YESかNOのみで答えてください。判断が難しい時はYESにしてください。
`
    }
  ];

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.0
      })
    });
    const data = await response.json();
    if (data.error) throw new Error(data.error.message);

    const answer = (data.choices[0].message.content || "").trim().toUpperCase();
    if (answer.startsWith("YES")) {
      firstUncleared.cleared = true;
      window.currentScenario.wizardData.sections = wd.sections;
      await updateScenario(window.currentScenario);
      showToast(`セクション${firstUncleared.number}をクリアしました。`);
    } else {
      console.log("未達成と判定されました。");
    }
  } catch (err) {
    console.error("セクション判定API失敗:", err);
  }
}

/** パーティ文章 */
function buildPartyInsertionText(party) {
  let txt = "【パーティ編成情報】\n";

  // ▼ アバター（1人だけ）
  const ava = party.find(e => e.role === "avatar");
  if (ava) {
    txt += "◆プレイヤー(アバター)\n";
    txt += buildCardDescription(ava);
    txt += "\n";
  }

  // ▼ パートナー（複数可）
  const pt = party.filter(e => e.role === "partner");
  if (pt.length > 0) {
    txt += "◆パートナー\n";
    pt.forEach(p => {
      txt += buildCardDescription(p);
      txt += "\n";
    });
  }

  // ▼ その他 (none)
  const others = party.filter(e => !e.role || e.role === "none");
  if (others.length > 0) {
    const cset = others.filter(x => x.type === "キャラクター");
    const mset = others.filter(x => x.type === "モンスター");
    const iset = others.filter(x => x.type === "アイテム");

    if (cset.length > 0) {
      txt += "◆キャラクター\n";
      cset.forEach(c => {
        txt += buildCardDescription(c);
        txt += "\n";
      });
    }
    if (mset.length > 0) {
      txt += "◆モンスター\n";
      mset.forEach(m => {
        txt += buildCardDescription(m);
        txt += "\n";
      });
    }
    if (iset.length > 0) {
      txt += "◆アイテム\n";
      iset.forEach(i => {
        txt += buildCardDescription(i);
        txt += "\n";
      });
    }
  }
  txt +=
    "以上を踏まえて、プレイヤー、パートナーは味方NPC、アイテムは登場するアイテム、" +
    "キャラクターは中立NPC、モンスターは敵対NPCとして扱ってください。" +
    "シナリオ概要を優先するため、世界観が合わない場合は調整してもよいです。例：レーザーガン→リボルバー。";
  return txt;
}

/**
 * 1件のカードデータから、
 * レア度・名前・状態(キャラ/モンスターのみ)・特技・キャプション・外見(imageprompt)
 * をまとめたテキストを返す。
 */
function buildCardDescription(card) {
  let result = "";
  result += ` - 【名前】${card.name}\n`;
  result += `   【レア度】${card.rarity || "★0"}\n`;
  if (card.type === "キャラクター" || card.type === "モンスター") {
    result += `   【状態】${card.state || "なし"}\n`;
  }
  result += `   【特技】${card.special || "なし"}\n`;
  result += `   【キャプション】${card.caption || "なし"}\n`;
  result += `   【外見】${card.imageprompt || "なし"}\n`;

  return result;
}

function showLoadingModal(show) {
  const m = document.getElementById("loading-modal");
  if (!m) return;
  m.style.display = show ? "flex" : "none";
}

function onCancelFetch() {
  window.cancelRequested = true;
  if (window.currentRequestController) {
    window.currentRequestController.abort();
  }
  showLoadingModal(false);
}

/** 画像生成ボタン：自動生成(現シーンから) */
async function generateImageFromCurrentScenePrompt() {
  const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
  if (!lastSceneEntry) {
    alert("まだシーンがありません。");
    return;
  }
  if (!lastSceneEntry.prompt) {
    alert("生成する為のプロンプトがありません");
    return;
  }
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }

  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓\n" +
    lastSceneEntry.prompt;

  window.cancelRequested = false;
  showLoadingModal(true);

  try {
    const resp = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1792x1024",
        response_format: "b64_json"
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // 新しいimage entry
    const newEntry = {
      scenarioId: window.currentScenarioId || 0,
      type: "image",
      sceneId: lastSceneEntry.sceneId,
      content: "",
      content_en: "",
      dataUrl,
      prompt: lastSceneEntry.prompt
    };
    const newId = await addSceneEntry(newEntry);
    window.sceneHistory.push({
      ...newEntry,
      entryId: newId
    });

    updateSceneHistory();
    showLastScene();
  } catch (err) {
    console.error("画像生成失敗:", err);
    alert("画像生成に失敗:\n" + err.message);
  } finally {
    showLoadingModal(false);
  }
}

/** カスタム画像生成モーダルを開く */
function openImagePromptModal(scenePrompt = "", index = null) {
  window.editingImageEntry = null;
  if (index !== null) {
    const entry = window.sceneHistory[index];
    if (entry && entry.type === "image") {
      scenePrompt = entry.prompt;
      window.editingImageEntry = { index };
    }
  } else {
    const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
    if (lastSceneEntry && lastSceneEntry.prompt) {
      scenePrompt = lastSceneEntry.prompt;
    }
  }
  document.getElementById("image-custom-prompt").value = scenePrompt;
  const modal = document.getElementById("image-prompt-modal");
  modal.classList.add("active");
}

/** カスタム画像生成モーダルを閉じる */
function closeImagePromptModal() {
  const modal = document.getElementById("image-prompt-modal");
  modal.classList.remove("active");
  window.editingImageEntry = null;
}

/** カスタム画像生成ボタン押下 */
async function onCustomImageGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  const userPromptText = document.getElementById("image-custom-prompt").value.trim();
  if (!userPromptText) {
    alert("プロンプトが空です。");
    return;
  }

  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓\n" +
    userPromptText;

  showLoadingModal(true);
  closeImagePromptModal();

  try {
    const resp = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: "1792x1024",
        response_format: "b64_json"
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);

    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    if (window.editingImageEntry) {
      // 既存画像の再生成
      const idx = window.editingImageEntry.index;
      const entry = window.sceneHistory[idx];
      if (entry && entry.type === "image") {
        entry.dataUrl = dataUrl;
        entry.prompt = userPromptText;
        const upRec = {
          ...entry,
          dataUrl,
          prompt: userPromptText
        };
        await updateSceneEntry(upRec);
      }
    } else {
      // 新規画像
      const lastSceneEntry = [...window.sceneHistory].reverse().find(e => e.type === "scene");
      if (!lastSceneEntry) {
        showLoadingModal(false);
        alert("シーンがありません。");
        return;
      }
      const newRec = {
        scenarioId: window.currentScenarioId || 0,
        type: "image",
        sceneId: lastSceneEntry.sceneId,
        content: "",
        content_en: "",
        dataUrl,
        prompt: userPromptText
      };
      const newId = await addSceneEntry(newRec);
      window.sceneHistory.push({
        ...newRec,
        entryId: newId
      });
    }

    updateSceneHistory();
    showLastScene();
  } catch (e) {
    console.error("カスタム画像生成失敗:", e);
    alert("カスタム画像生成失敗:\n" + e.message);
  } finally {
    showLoadingModal(false);
  }
}

/** 日本語->英語翻訳 */
async function generateEnglishTranslation(japaneseText) {
  if (!japaneseText.trim()) return "";
  const sys = "あなたは優秀な翻訳家です。";
  const u = `以下のテキストを自然な英語に翻訳:\n${japaneseText}`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: u }
        ],
        temperature: 0.3
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("翻訳失敗:", err);
    return "";
  }
}

/** 英語->日本語翻訳 （追加） */
async function generateJapaneseTranslation(englishText) {
  if (!englishText.trim()) return "";
  const sys = "あなたは優秀な翻訳家です。";
  const u = `以下の英文を自然な日本語に翻訳:\n${englishText}`;
  try {
    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: sys },
          { role: "user", content: u }
        ],
        temperature: 0.3
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    return data.choices[0].message.content.trim();
  } catch (err) {
    console.error("翻訳失敗:", err);
    return englishText; // 失敗したら英語のまま
  }
}

// 外部公開
window.generateImageFromCurrentScene = generateImageFromCurrentScenePrompt;
window.onCustomImageGenerate = onCustomImageGenerate;
window.openImagePromptModal = openImagePromptModal;
window.closeImagePromptModal = closeImagePromptModal;
window.onCancelFetch = onCancelFetch;
window.getNextScene = getNextScene;
---- 
warehouse.js 
// js/warehouse.js
// 倉庫表示ロジックを一括管理

(() => {
  let warehouseModal = null;
  let previewModal = null;
  let warehouseMode = "menu";         // "menu" or "party"
  let currentPartyIdForAdd = null;    // パーティID
  let afterAddCallback = null;        // パーティ追加後のコールバック
  let currentTab = "キャラクター";      // タブ (キャラクター / アイテム / モンスター)

  let warehouseSelectionMode = false;
  let allWarehouseCards = [];
  let cardsPerRow = 1;
  let loadedLineCount = 0;
  const LINES_PER_LOAD = 1;

  // === 追加: タブ毎に持つソート設定を保存・取得するユーティリティ =========================
  function setSortConfig(tabName, sortKey, sortDir) {
    localStorage.setItem(`warehouseSortKey_${tabName}`, sortKey);
    localStorage.setItem(`warehouseSortDir_${tabName}`, sortDir);
  }

  function getSortConfig(tabName) {
    const sortKey = localStorage.getItem(`warehouseSortKey_${tabName}`) || "id";  // デフォルトは 取得順
    const sortDir = localStorage.getItem(`warehouseSortDir_${tabName}`) || "asc"; // デフォルトは 昇順
    return { sortKey, sortDir };
  }

  // ソートロジック
  function applySort(array, sortKey, sortDir) {
    array.sort((a, b) => {
      if (sortKey === "id") {
        // 「card_タイムスタンプ_ランダム」の形式 → タイムスタンプ抜き出し
        const tA = getTimeFromId(a.id);
        const tB = getTimeFromId(b.id);
        return tA - tB; // 古い方が先
      } else if (sortKey === "name") {
        const an = a.name || "";
        const bn = b.name || "";
        return an.localeCompare(bn);
      } else if (sortKey === "state") {
        const as = a.state || "";
        const bs = b.state || "";
        return as.localeCompare(bs);
      }
      return 0;
    });
    if (sortDir === "desc") {
      array.reverse();
    }
  }

  function getTimeFromId(cardId) {
    const parts = cardId.split("_");
    if (parts.length < 3) return 0;
    const t = parseInt(parts[1], 10);
    return isNaN(t) ? 0 : t;
  }

  // -------------------------------
  // モーダルHTMLの動的挿入
  // -------------------------------
  function ensureWarehouseModalExists() {
    if (document.getElementById("warehouse-modal")) {
      warehouseModal = document.getElementById("warehouse-modal");
      previewModal = document.getElementById("card-image-preview-modal");
      return;
    }
    // まだ無い場合、body末尾に挿入
    const modalHTML = `
<div id="warehouse-modal" class="modal">
  <div class="modal-content">
  <div class="r-flexbox" style="width:100%"><button id="close-warehouse-btn">✕</button></div>
    <h2>倉庫</h2>

    <!-- ここから：ヘッダー部分を三分割 (左：選択モードボタン類、中央：タブ、右：ソートUI) -->
    <div class="warehouse-header-bar">
      <div class="warehouse-left">
        <button id="toggle-warehouse-selection-mode-btn" style="margin:0;">選択モード</button>
        <button id="delete-selected-warehouse-btn" style="margin:0; display:none;">選択したカードを削除</button>
        <button id="add-to-party-btn" style="margin:0; display:none;">パーティに入れる</button>
      </div>
      <div class="warehouse-center">
        <div class="warehouse-tabs">
          <div class="warehouse-tab" data-tab="キャラクター">キャラクター</div>
          <div class="warehouse-tab" data-tab="アイテム">アイテム</div>
          <div class="warehouse-tab" data-tab="モンスター">モンスター</div>
        </div>
      </div>
      <div class="warehouse-right">
        <select id="warehouse-sort-dropdown">
          <option value="id">取得順</option>
          <option value="name">名前順</option>
          <option value="state">状態順</option>
        </select>
        <button id="warehouse-sort-direction-btn" style="width:30px; margin:0;">↓</button>
      </div>
    </div>
    <!-- ここまでヘッダー -->

    <div id="warehouse-card-scroll-container" style="margin:10px 0; max-height:70vh; overflow-y:auto; width:100%;">
      <div id="warehouse-card-container" style="display:flex; flex-wrap:wrap; gap:20px;"></div>
    </div>
  </div>
</div>

<!-- プレビュー用モーダル -->
<div id="card-image-preview-modal" class="modal">
  <div class="modal-content">
    <img id="card-preview-img" src="" alt="card image" style="max-width:95vw; max-height:95vh;" />
    <button id="card-preview-close-btn" style="margin-top:10px;">閉じる</button>
  </div>
</div>
    `;
    document.body.insertAdjacentHTML("beforeend", modalHTML);

    warehouseModal = document.getElementById("warehouse-modal");
    previewModal = document.getElementById("card-image-preview-modal");

    // 閉じるボタン
    document.getElementById("close-warehouse-btn").addEventListener("click", closeWarehouseModal);

    // 選択モード
    document.getElementById("toggle-warehouse-selection-mode-btn")
      .addEventListener("click", toggleWarehouseSelectionMode);

    // 削除ボタン
    document.getElementById("delete-selected-warehouse-btn")
      .addEventListener("click", deleteSelectedWarehouseCards);

    // パーティに入れる
    document.getElementById("add-to-party-btn")
      .addEventListener("click", addSelectedCardsToParty);

    // タブ切り替え
    const tabEls = warehouseModal.querySelectorAll(".warehouse-tab");
    tabEls.forEach(tabEl => {
      tabEl.addEventListener("click", () => {
        // 全タブリセット
        tabEls.forEach(t => t.classList.remove("active"));
        // クリックしたタブをアクティブに
        tabEl.classList.add("active");

        currentTab = tabEl.getAttribute("data-tab");
        loadCardsByTab();
      });
    });
    // 最初のタブをアクティブ
    tabEls[0].classList.add("active");

    // ソートUIのイベント
    const sortDropdown = document.getElementById("warehouse-sort-dropdown");
    const sortDirBtn = document.getElementById("warehouse-sort-direction-btn");
    sortDropdown.addEventListener("change", onSortChange);
    sortDirBtn.addEventListener("click", onSortDirToggle);

    // プレビュー閉じる
    document.getElementById("card-preview-close-btn").addEventListener("click", () => {
      previewModal.classList.remove("active");
    });
    previewModal.addEventListener("click", (e) => {
      if (e.target === previewModal) {
        previewModal.classList.remove("active");
      }
    });

    // スクロール監視
    const scrollContainer = document.getElementById("warehouse-card-scroll-container");
    scrollContainer.addEventListener("scroll", onScrollCheck);
  }

  // -------------------------------
  // モーダルを開く
  // -------------------------------
  function showWarehouseModal(mode = "menu", partyId = null, onAddCb = null) {
    ensureWarehouseModalExists();

    warehouseMode = mode;
    currentPartyIdForAdd = partyId;
    afterAddCallback = onAddCb || null;

    // 選択モード解除
    warehouseSelectionMode = false;
    document.getElementById("toggle-warehouse-selection-mode-btn").textContent = "選択モード";
    clearSelectedCards();

    // タブ初期化 (デフォルトを「キャラクター」)
    currentTab = "キャラクター";

    // 全タブをアクティブリセットして、キャラクタータブのみ active
    const tabEls = warehouseModal.querySelectorAll(".warehouse-tab");
    tabEls.forEach(t => t.classList.remove("active"));
    const charTab = Array.from(tabEls).find(t => t.getAttribute("data-tab") === "キャラクター");
    if (charTab) charTab.classList.add("active");

    // モーダルを表示
    warehouseModal.classList.add("active");

    // ソートUIの初期状態をローカルストレージから読み込み＆反映
    applySortUIFromStorage(currentTab);

    // カード読み込み
    loadCardsByTab();
  }

  // -------------------------------
  // モーダルを閉じる
  // -------------------------------
  function closeWarehouseModal() {
    warehouseModal.classList.remove("active");
    previewModal.classList.remove("active");
    warehouseMode = "menu";
    currentPartyIdForAdd = null;
    afterAddCallback = null;
  }

  // -------------------------------
  // タブ別にカードをロードして表示
  // -------------------------------
  function loadCardsByTab() {
    const container = document.getElementById("warehouse-card-container");
    const scrollContainer = document.getElementById("warehouse-card-scroll-container");
    if (!container || !scrollContainer) return;

    // いったん不可視化してチラつき防止
    container.style.visibility = "hidden";

    // 既存リセット
    allWarehouseCards = (window.characterData || [])
      .filter(c => c.group === "Warehouse" && c.type === currentTab);
    loadedLineCount = 0;
    container.innerHTML = "";

    // ソート適用
    const config = getSortConfig(currentTab);
    applySort(allWarehouseCards, config.sortKey, config.sortDir);

    // 1行あたり枚数を計算
    cardsPerRow = calcCardsPerRow();

    // とりあえず1行分読み込み
    loadNextLines(LINES_PER_LOAD);

    // スクロールが出るまで繰り返し読み込み
    fillContainerIfNeeded(() => {
      container.style.visibility = "visible";
      container.style.opacity = "1";
    });
  }

  function fillContainerIfNeeded(callback) {
    const scrollContainer = document.getElementById("warehouse-card-scroll-container");
    if (!scrollContainer) {
      if (callback) callback();
      return;
    }
    let safeCounter = 0;
    while (
      scrollContainer.scrollHeight <= scrollContainer.clientHeight &&
      loadedLineCount * cardsPerRow < allWarehouseCards.length &&
      safeCounter < 50
    ) {
      loadNextLines(LINES_PER_LOAD);
      safeCounter++;
    }
    if (callback) callback();
  }

  function onScrollCheck() {
    const scrollC = document.getElementById("warehouse-card-scroll-container");
    if (!scrollC) return;
    const threshold = 50;
    if (scrollC.scrollTop + scrollC.clientHeight + threshold >= scrollC.scrollHeight) {
      loadNextLines(2);
    }
  }

  function loadNextLines(lineCount) {
    const container = document.getElementById("warehouse-card-container");
    if (!container) return;

    const displayedCount = loadedLineCount * cardsPerRow;
    const newCount = lineCount * cardsPerRow;
    const nextCards = allWarehouseCards.slice(displayedCount, displayedCount + newCount);

    nextCards.forEach(card => {
      const cardEl = createWarehouseCardElement(card);
      container.appendChild(cardEl);
    });

    loadedLineCount += lineCount;

    // 追加後にまだスクロールが出ないなら追加
    const scrollContainer = document.getElementById("warehouse-card-scroll-container");
    if (!scrollContainer) return;
    setTimeout(() => {
      const stillNoScroll = (scrollContainer.scrollHeight <= scrollContainer.clientHeight);
      const notAllLoaded = (loadedLineCount * cardsPerRow < allWarehouseCards.length);
      if (stillNoScroll && notAllLoaded) {
        loadNextLines(LINES_PER_LOAD);
      }
    }, 0);
  }

  function calcCardsPerRow() {
    const container = document.getElementById("warehouse-card-container");
    if (!container) return 1;
    const containerWidth = container.clientWidth;
    if (containerWidth <= 0) return 1;

    let cardW = 300;
    let gap = 20;
    let per = 1;
    for (let n = 1; n <= 50; n++) {
      const totalW = n * cardW + (n - 1) * gap;
      if (totalW <= containerWidth) {
        per = n;
      } else {
        break;
      }
    }
    return per;
  }

  // -------------------------------
  // カード生成 (倉庫表示用)
  // -------------------------------
  function createWarehouseCardElement(card) {
    const cardEl = document.createElement("div");
    cardEl.className = "card rarity" + (card.rarity || "").replace("★", "").trim();
    cardEl.setAttribute("data-id", card.id);

    if (card.flipped) {
      cardEl.classList.add("flipped");
    }

    cardEl.addEventListener("click", (e) => {
      if (warehouseSelectionMode) {
        e.stopPropagation();
        cardEl.classList.toggle("selected");
        updateSelectionButtonsVisibility();
      } else {
        // 裏返しか画像プレビュー
        if (cardEl.classList.contains("flipped")) {
          cardEl.classList.remove("flipped");
          card.flipped = false;
          saveFlippedState(card.id, false);
        } else {
          if (card.imageData) {
            openImagePreview(card.imageData);
          } else {
            showToast("画像がありません。");
          }
        }
      }
    });

    const cardInner = document.createElement("div");
    cardInner.className = "card-inner";

    const cardFront = document.createElement("div");
    cardFront.className = "card-front";

    const bgStyle = (card.backgroundcss || "")
      .replace("background-image:", "")
      .replace("background", "")
      .trim();
    if (bgStyle) {
      cardFront.style.backgroundImage = bgStyle;
    }

    // レアリティ光彩
    const rarityValue = (card.rarity || "").replace("★", "").trim();
    cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

    // タイプ
    const typeEl = document.createElement("div");
    typeEl.className = "card-type";
    typeEl.textContent = card.type || "不明";
    cardFront.appendChild(typeEl);

    // 画像領域
    const imageContainer = document.createElement("div");
    imageContainer.className = "card-image";
    if (card.imageData) {
      const imageEl = document.createElement("img");
      imageEl.src = card.imageData;
      imageEl.alt = card.name || "";
      imageContainer.appendChild(imageEl);
    } else {
      // 画像生成ボタン
      const genImgBtn = document.createElement("button");
      genImgBtn.className = "gen-image-btn";
      genImgBtn.textContent = "画像生成";
      genImgBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        generateWarehouseImage(card, genImgBtn);
      });
      imageContainer.appendChild(genImgBtn);
    }
    cardFront.appendChild(imageContainer);

    // 情報
    const infoContainer = document.createElement("div");
    infoContainer.className = "card-info";

    const nameEl = document.createElement("p");
    nameEl.innerHTML = `<h3>${DOMPurify.sanitize(card.name || "")}</h3>`;
    infoContainer.appendChild(nameEl);

    if (card.state) {
      const stateEl = document.createElement("p");
      stateEl.innerHTML = `<strong>状態：</strong>${DOMPurify.sanitize(card.state)}`;
      infoContainer.appendChild(stateEl);
    }
    if (card.special) {
      const specialEl = document.createElement("p");
      specialEl.innerHTML = `<strong>特技：</strong>${DOMPurify.sanitize(card.special)}`;
      infoContainer.appendChild(specialEl);
    }

    const captionEl = document.createElement("p");
    captionEl.innerHTML = `<span>${DOMPurify.sanitize(card.caption || "")}</span>`;
    infoContainer.appendChild(captionEl);

    cardFront.appendChild(infoContainer);

    // 裏面
    const cardBack = document.createElement("div");
    cardBack.className = "card-back";
    cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type || "")}</strong>`;

    cardInner.appendChild(cardFront);
    cardInner.appendChild(cardBack);
    cardEl.appendChild(cardInner);

    return cardEl;
  }

  // 裏返し状態の保存
  async function saveFlippedState(cardId, flipped) {
    const idx = (window.characterData || []).findIndex(c => c.id === cardId);
    if (idx !== -1) {
      window.characterData[idx].flipped = flipped;
      await saveCharacterDataToIndexedDB(window.characterData);
    }
  }

  // 画像プレビュー
  function openImagePreview(imageUrl) {
    if (!previewModal) return;
    const imgEl = document.getElementById("card-preview-img");
    if (!imgEl) return;
    imgEl.src = imageUrl;
    previewModal.classList.add("active");
  }

  // -------------------------------
  // 画像生成 (DALL-E API)
  // -------------------------------
  async function generateWarehouseImage(card, btnElement) {
    const apiKey = window.apiKey || localStorage.getItem("apiKey");
    if (!apiKey) {
      alert("APIキーが設定されていません。");
      return;
    }
    if (btnElement) btnElement.disabled = true;
    showToast("画像を生成しています...");

    const rarityNum = parseInt((card.rarity || "").replace("★", ""), 10) || 0;
    const size = (rarityNum >= 3) ? "1024x1792" : "1792x1024";
    const promptText =
      "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
      "Please do not include text in illustrations for any reason." +
      "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
      (card.imageprompt || "");

    try {
      const response = await fetch("https://api.openai.com/v1/images/generations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${apiKey}`
        },
        body: JSON.stringify({
          model: "dall-e-3",
          prompt: promptText,
          n: 1,
          size,
          response_format: "b64_json",
        }),
      });
      const data = await response.json();
      if (data.error) throw new Error(data.error.message);

      const base64 = data.data[0].b64_json;
      const dataUrl = "data:image/png;base64," + base64;

      // DB更新
      const idx = window.characterData.findIndex(c => c.id === card.id);
      if (idx !== -1) {
        window.characterData[idx].imageData = dataUrl;
        await saveCharacterDataToIndexedDB(window.characterData);
      }

      showToast("画像の生成が完了しました");
      reloadCurrentView();
    } catch (err) {
      console.error(err);
      showToast("画像生成に失敗しました:\n" + err.message);
    } finally {
      if (btnElement) btnElement.disabled = false;
    }
  }

  // -------------------------------
  // 選択モード
  // -------------------------------
  function toggleWarehouseSelectionMode() {
    warehouseSelectionMode = !warehouseSelectionMode;
    const btn = document.getElementById("toggle-warehouse-selection-mode-btn");
    btn.textContent = warehouseSelectionMode ? "選択モード解除" : "選択モード";
    if (!warehouseSelectionMode) {
      clearSelectedCards();
    }
    updateSelectionButtonsVisibility();
  }

  function clearSelectedCards() {
    const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
    selectedCards.forEach(card => card.classList.remove("selected"));
  }

  function updateSelectionButtonsVisibility() {
    if (!warehouseSelectionMode) {
      document.getElementById("delete-selected-warehouse-btn").style.display = "none";
      document.getElementById("add-to-party-btn").style.display = "none";
      return;
    }
    const selected = document.querySelectorAll("#warehouse-card-container .card.selected");
    if (warehouseMode === "menu") {
      // メニューから来た場合のみ「削除」表示
      document.getElementById("delete-selected-warehouse-btn").style.display =
        (selected.length > 0) ? "inline-block" : "none";
      document.getElementById("add-to-party-btn").style.display = "none";
    } else {
      // パーティから来た場合のみ「パーティに入れる」表示
      document.getElementById("delete-selected-warehouse-btn").style.display = "none";
      document.getElementById("add-to-party-btn").style.display =
        (selected.length > 0) ? "inline-block" : "none";
    }
  }

  // -------------------------------
  // 倉庫カード削除 (menuモード)
  // -------------------------------
  async function deleteSelectedWarehouseCards() {
    if (warehouseMode !== "menu") return;
    const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
    if (selectedCards.length === 0) {
      showToast("カードが選択されていません。");
      return;
    }
    if (!confirm("選択したカードを削除します。よろしいですか？")) {
      return;
    }
    selectedCards.forEach(cardEl => {
      const cardId = cardEl.getAttribute("data-id");
      const idx = window.characterData.findIndex(c => c.id === cardId);
      if (idx !== -1) {
        window.characterData.splice(idx, 1);
      }
    });
    await saveCharacterDataToIndexedDB(window.characterData);
    reloadCurrentView();
  }

  // -------------------------------
  // パーティに追加 (partyモード)
  // -------------------------------
  async function addSelectedCardsToParty() {
    if (warehouseMode !== "party") return;
    if (!currentPartyIdForAdd) {
      showToast("パーティIDがありません。");
      return;
    }
    const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
    if (selectedCards.length === 0) {
      showToast("カードが選択されていません。");
      return;
    }
    selectedCards.forEach(el => {
      const cardId = el.getAttribute("data-id");
      const idx = window.characterData.findIndex(c => c.id === cardId);
      if (idx !== -1) {
        window.characterData[idx].group = "Party";
        window.characterData[idx].role = "none";
        window.characterData[idx].partyId = currentPartyIdForAdd;
      }
    });
    await saveCharacterDataToIndexedDB(window.characterData);

    clearSelectedCards();
    reloadCurrentView();

    if (typeof afterAddCallback === "function") {
      afterAddCallback();
    }
    updateSelectionButtonsVisibility();
  }

  // -------------------------------
  // 再描画
  // -------------------------------
  function reloadCurrentView() {
    const container = document.getElementById("warehouse-card-container");
    if (container) container.innerHTML = "";
    loadedLineCount = 0;

    let all = (window.characterData || [])
      .filter(c => c.group === "Warehouse" && c.type === currentTab);

    const config = getSortConfig(currentTab);
    applySort(all, config.sortKey, config.sortDir);
    allWarehouseCards = all;

    loadNextLines(LINES_PER_LOAD);
  }

  // -------------------------------
  // ソートUIの操作ハンドラ
  // -------------------------------
  function onSortChange() {
    const sortKey = document.getElementById("warehouse-sort-dropdown").value;
    const { sortDir } = getSortConfig(currentTab);
    setSortConfig(currentTab, sortKey, sortDir);
    reloadCurrentView();
  }

  function onSortDirToggle() {
    const sortDirBtn = document.getElementById("warehouse-sort-direction-btn");
    const config = getSortConfig(currentTab);
    const newDir = (config.sortDir === "asc") ? "desc" : "asc";
    setSortConfig(currentTab, config.sortKey, newDir);
    sortDirBtn.innerHTML = (newDir === "asc") ? `<span class="iconmoon icon-sort-alpha-asc"></span>` : `<span class="iconmoon icon-sort-alpha-desc"></span>`;
    reloadCurrentView();
  }
  // タブ切り替え時やモーダルを開いたときに、UIの状態をローカルストレージから復元
  function applySortUIFromStorage(tabName) {
    const sortDropdown = document.getElementById("warehouse-sort-dropdown");
    const sortDirBtn = document.getElementById("warehouse-sort-direction-btn");
    if (!sortDropdown || !sortDirBtn) return;

    const config = getSortConfig(tabName);
    sortDropdown.value = config.sortKey;
//    sortDirBtn.textContent = (config.sortDir === "asc") ? "↑" : "↓";
    sortDirBtn.innerHTML = (config.sortDir === "asc") ? `<span class="iconmoon icon-sort-alpha-asc"></span>` : `<span class="iconmoon icon-sort-alpha-desc"></span>`;
  }

  // -------------------------------
  // グローバル公開
  // -------------------------------
  window.showWarehouseModal = showWarehouseModal;
})();
---- 
