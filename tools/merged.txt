characterCreate.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>キャラクタ作成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <!-- DOMPurify等必要なライブラリがあればここに読み込み -->
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
</head>
<body>
  <div class="container" style="max-width:800px;">
    <h1>キャラクタ作成</h1>
    <!-- キャラクタ関連ストレージのクリア -->
    <button id="clear-character-btn" style="background-color:#f44336;">キャラをクリア</button>
    <!-- ガチャボタン -->
    <button id="gacha-btn" style="margin:10px;">ガチャ</button>

    <!-- ガチャ実行中モーダル -->
    <div id="gacha-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <p>生成中...</p>
        <button id="cancel-gacha-btn">キャンセル</button>
      </div>
    </div>

    <!-- 生成されたカード表示領域 -->
    <div id="card-container"></div>

    <!-- メニューボタン -->
    <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>
  </div>

  <script src="js/indexedDB.js"></script>
  <script src="js/characterCreate.js"></script>
  <script>
    // メニューに戻るボタン
    document.getElementById("back-to-menu").addEventListener("click", function () {
      window.location.href = "index.html";
    });
  </script>
</body>
</html>
--- 
index.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>TRPG メニュー</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <div class="container" style="text-align:center; margin-top:50px;">
    <h1>TRPG メニュー</h1>
    <div class="api-key-section">
      <label for="api-key-input">ChatGPT APIキーを入力：</label>
      <input type="text" id="api-key-input" placeholder="APIキーを入力" />
      <button id="set-api-key-button">APIキー設定</button>
      <button id="clear-api-key-button" style="background-color:#f44336;">APIキーをクリア</button>
    </div>
    <!-- キャラクタ作成ボタン有効化 -->
    <button id="character-create" style="margin:10px;">キャラクタ作成</button>
    <button id="party-create" disabled style="margin:10px; cursor:not-allowed;">パーティ作成</button>
    <button id="scenario" style="margin:10px;">シナリオ</button>
  </div>

  <!-- 外部JavaScript -->
  <script src="js/menu.js"></script>
  <script>
    // キャラクタ作成ボタン押下時、characterCreate.htmlへ遷移
    document.getElementById("character-create").addEventListener("click", function () {
      window.location.href = "characterCreate.html";
    });
  </script>
</body>
</html>
--- 
scenario.html 
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>シンプルTRPG</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>
</head>
<body>
  <!-- 履歴をクリア -->
  <button id="clear-history-button" style="margin-top:20px;">履歴をクリア</button>

  <!-- 新たに戻るボタンを追加 -->
  <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>

  <div class="container">
    <!-- シーン履歴やその他のセクション -->
    <div id="scene-history" class="scene-history"></div>
    
    <!-- シナリオ入力セクション -->
    <div class="input-section">
      <label for="scenario-input">シナリオを入力してください：</label>
      <textarea id="scenario-input" rows="6" placeholder="シナリオを入力..."></textarea>
      <button id="start-button">ゲーム開始</button>
    </div>

    <!-- ゲーム画面セクション -->
    <div class="game-section" style="display:none;">
      <div id="story" style="margin-bottom:20px;"></div>
      <div id="last-scene-images" style="margin-bottom:20px;"></div>
      <div>
        <button id="image-auto-generate-button">自動生成(現シーンから)</button>
        <button id="image-prompt-modal-button">編集して生成(カスタム)</button>
      </div>
      <div id="player-action" style="margin-top:20px;"></div>
      <textarea id="player-input" rows="4" placeholder="プレイヤーの行動を入力..."></textarea>
      <button id="next-scene" style="display:none; margin-top:10px;">次のシーン</button>
    </div>
  </div>

  <!-- 応答待ちモーダル -->
  <div id="loading-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>応答を待っています...</p>
      <button id="cancel-request-button">キャンセル</button>
    </div>
  </div>

  <!-- カスタム画像生成モーダル -->
  <div id="image-prompt-modal" class="modal" style="display:none;">
    <div class="modal-content" style="max-width:400px;">
      <p>画像生成のプロンプトを編集してください</p>
      <textarea id="image-custom-prompt" rows="5" style="width:100%;"></textarea>
      <div style="margin-top:10px;">
        <button id="image-custom-generate-button">生成</button>
        <button id="image-custom-cancel-button">キャンセル</button>
      </div>
    </div>
  </div>

  <!-- スクリプトの読み込み -->
  <script src="js/indexedDB.js"></script>
  <script src="js/scene.js"></script>
  <script src="js/image.js"></script>
  <script src="js/main.js"></script>

  <!-- メニューに戻るボタン用のスクリプト -->
  <script>
    document.getElementById("back-to-menu").addEventListener("click", function() {
      window.location.href = "index.html";
    });
  </script>
</body>
</html>
--- 
styles.css 
/* styles.css */

/* ベース */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f5f5f5;
}

.container {
  max-width: 1000px;
  margin: 20px auto;
  padding: 20px;
  background-color: #fff;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
}

h2 {
  font-size: 1.5em;
  margin-bottom: 10px;
}

.api-key-section {
  margin-bottom: 20px;
}

input,
textarea {
  width: 100%;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
}

button:hover {
  background-color: #45a049;
}

/* シーン履歴 */
.scene-history {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #f9f9f9;
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

.history-tile {
  padding: 10px;
  border: 1px solid #ccc;
  background-color: #fff;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* テキスト編集領域 */
.scene-text,
.action-text,
.scenario-text {
  margin: 0;
  padding: 5px;
  font-size: 14px;
  border: 1px dashed transparent;
  cursor: text;
}

.scene-text[contenteditable]:focus,
.action-text[contenteditable]:focus,
.scenario-text[contenteditable]:focus {
  border: 1px dashed #4CAF50;
  outline: none;
}

/* メイン表示するシーン部分 */
#story {
  font-size: 1.4rem;
  padding-bottom: 10px;
  border-bottom: 1px solid #ccc;
  min-height: 60px;
}

/* モーダル */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-content {
  background-color: #fff;
  padding: 20px 40px;
  border-radius: 5px;
  text-align: center;
  max-height: 80vh;
  overflow-y: auto;
}


/* --- styles.css --- */

/* 既存の共通部分はそのままで */

/* カードコンテナをCSS Gridに変更 */
#card-container {
  display: grid;
  gap: 20px;
  /* 1列(スマホ)～3列(PC)になるようにレスポンシブに設定 */
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

/* カードコンテナの共通設定 */
.card {
  /* 横幅はセル幅に合わせる */
  width: 100%;
  /* ブラウザ対応の場合、aspect-ratioプロパティで比率を指定 */
  aspect-ratio: 63 / 88;
  perspective: 1000px;
  /* 3D効果用 */
  cursor: pointer;
  transition: transform 0.3s ease;
  position: relative;
}

/* マウスオーバー時に少し大きく */
.card:hover {
  transform: scale(1.05);
}

/* 内部要素 */
.card-inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  transition: transform 0.6s;
}

/* クリックで反転 */
.card.flipped .card-inner {
  transform: rotateY(180deg);
}

/* 表面 */
.card-front,
.card-back {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;
  backface-visibility: hidden;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

.card-front {
  box-sizing: border-box;
  padding: 3%;
  border-radius: 3%;
}

/* 表面のスタイル */
.card-front {
  background-color: #fff;
  display: flex;
  flex-direction: column;
  position: relative;
}

.card-front h3 {
  padding: 0;
  margin: 0;
  font-size: 1rem;
}

/* 左上にタイプ表示用 */
.card-front .card-type {
  position: absolute;
  right: 10px;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: bold;
  font-size: 0.85rem;
  z-index: 2;
}

/* 画像エリア */
/* ※画像はカード全体の横幅に合わせた高さ（1:1.618）ではなく画像領域は独自の高さ設定
   必要に応じ、ここも調整してください。 */
.card-front .card-image {
  width: 100%;
  /* 高さはカード全体の高さのうち適切な割合（例：40%～50%）に調整する */
  height: 40%;
  background: linear-gradient(135deg, #cccccc70, #eeeeee70);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

/* 画像エリア内の実際の画像 */
.card-front .card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: top;
}

/* 画像生成ボタンは画像エリアに配置（画像が無い場合のみ表示） */
.card-front .gen-image-btn {
  position: absolute;
  bottom: 8px;
  right: 8px;
  padding: 4px 8px;
  background-color: rgba(0, 0, 0, 0.6);
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 0.8rem;
  z-index: 2;
}

/* 下部テキスト情報 */
.card-front .card-info {
  padding: 8px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex-grow: 1;
  overflow: auto;
  background-color: rgba(255, 255, 255, 0.7);
}

/* 状態、特技、キャプションのスタイル */
.card-front .card-info p {
  margin: 0;
  font-size: 0.85rem;
}

/* 状態、特技、キャプションのスタイル */
.card-front .card-info p:last-child {
  padding: 0;
  height: 100%;
  font-size: 0.85rem;
  align-items: center;
  display: flex;
  background-color: #EEE;
  margin-top: 10px;
}

.card-front .card-info p:last-child span {
  transform: skew(-5deg);
  display: flex;
  padding: 10px;
}

/* 裏面：かっこよさげな背景 */
.card-back {
  box-sizing: border-box;
  background: linear-gradient(135deg, #1e3c72, #2a5298);
  color: #fff;
  transform: rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  padding: 10px;
  text-align: center;
}

/* --- レスポンシブ（必要なら追加） --- */
/* 例えば、より狭い画面では最小幅を220pxにするなど */
@media (max-width: 600px) {
  #card-container {
    grid-template-columns: repeat(1, 1fr);
  }
}

.bezel {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  z-index: 100;
  border-radius: 2%;
  padding: 3%;
}

.bezel.rarity0 {
  background: linear-gradient(145deg, #C0C0C0, #D3D3D3, #E0E0E0, #A9A9A9);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
          -webkit-mask-composite: destination-out;
                  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity1 {
  background: linear-gradient(145deg, #B87333, #DA8A67, #E97451, #C35817);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
          -webkit-mask-composite: destination-out;
                  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity2 {
  background: linear-gradient(145deg, #C0C0C0, #D3D3D3, #E0E0E0, #A9A9A9);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
          -webkit-mask-composite: destination-out;
                  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity3 {
  background: linear-gradient(145deg, #b69a00, #ffda64, #ffda6b, #d79000);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
          -webkit-mask-composite: destination-out;
                  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

/* --- レアリティ4: プラチナ (ギラギラ＋パーティクルエフェクト) --- */
.bezel.rarity4 {
  position: absolute; /* 疑似要素配置のため */
  background: linear-gradient(145deg, #d1d1d1, #aeb9ff, #C0C0C0, #ECEBE8);
  background-size: 400% 400%;
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
          -webkit-mask-composite: destination-out;
                  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: platinum-shimmer 5s ease-in-out infinite;
}


/* --- レアリティ5: 宝石 --- */
.bezel.rarity5 {
  background: linear-gradient(145deg, #4B0082, #0000CD, #008080, #fff);
  background-size: 150% 150%;
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
          -webkit-mask-composite: destination-out;
                  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: jewel-glow 5s ease-in-out infinite;
}

/* プラチナ用シマーアニメーション */
@keyframes platinum-shimmer {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* 宝石用輝き・色変化アニメーション */
@keyframes jewel-glow {
  0% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
  50% {
    filter: brightness(1.2);
    background-position: 100% 50%;
  }
  100% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
}
--- 
