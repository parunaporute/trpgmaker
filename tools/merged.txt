貴方は会社の中で一番のエンジニアです。
以下はガチャを生成するコードの一部です。

■カードの演出追加
・最初に生成した時に限り、レア度3以上のカードをfliped状態にしておきたい（cardクラスにflippedを付与）です。
・最初に生成した時に限り、ガチャボタンの右に「すべて見る」というボタンを置き、押下するとcardクラスに付与されているflippedを除去してください。
・リロードした場合は現状の状態と同じで良いです。
■カードの画像確認
・flippedが付与されていないカードを押下したときは、カードに付与されている画像を確認できるモーダルを表示したいです。
・mainも、characterCreateも同様の仕様が望ましいです。

以上を実施し、編集しないファイルを除き完全なコードを下さい。しかしながら、最高の成果物を出すために、少しでも不明な点があれば質問をください。
characterCreate.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>エレメント作成</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <link rel="stylesheet" href="styles.css" />
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- ▼ 追加: 背景管理スクリプト -->
  <script src="js/background.js"></script>
</head>

<body>
  <!-- ▼ 追加: 背景変更ボタン + モーダル -->
  <button id="change-bg-button" style="
      color: #000;
      background-color: #DDD;
      border-radius: 2px;
      box-shadow: inset 0 0 3px #000;
      position: absolute;
      top: 0;
      right: 0;
    ">
    背景を変更する
  </button>

  <!-- 背景選択モーダル -->
  <div id="bg-modal" class="modal" style="display:none;">
    <div class="modal-content bg-modal-content">
      <h2>背景選択</h2>

      <div id="bg-stock-container" class="bg-stock-grid"></div>

      <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>
      <button id="bg-generate-button" style="margin-top:10px;">生成する</button>
      <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
    </div>
  </div>

  <!-- 背景生成中モーダル -->
  <div id="bg-generate-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <p>背景画像を生成中...</p>
    </div>
  </div>

  <button id="back-to-menu" style="margin-top:20px;">メニューに戻る</button>
  <div class="container">
    <h1>エレメント作成</h1>

    <!-- ガチャボタンのみ残し、ガチャ箱の移動関連ボタンは削除 -->
    <button id="gacha-btn" style="margin:10px;">エレメントガチャ</button>

    <!-- ▼ 「ガチャ生成中」モーダル -->
    <div id="gacha-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <p>生成中...</p>
        <button id="cancel-gacha-btn">キャンセル</button>
      </div>
    </div>

    <!-- ▼ エレメントのジャンル設定モーダル -->
    <div id="element-genre-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <h2>エレメントのジャンルを設定</h2>
        <p style="font-size: 0.9em; margin-bottom: 10px;">
          下記の軸を選択してください。<br>
          一度選択すると、ストレージに保存され次回以降も復元されます。
        </p>

        <!-- 舞台（複数可） -->
        <div style="margin-top:10px;">
          <strong>舞台（複数選択可）</strong><br>
          <div id="stage-chips-container" class="chips-container">
            <!-- 例：ファンタジー, SF, 歴史・時代劇... -->
          </div>
        </div>

        <!-- 雰囲気（単一） -->
        <div style="margin-top:10px;">
          <strong>雰囲気（単一選択）</strong><br>
          <div id="mood-chips-container" class="chips-container">
            <!-- 例：ライト/ポップ, 中間/バランス, ダーク/シリアス -->
          </div>
        </div>

        <div style="margin-top:20px;">
          <button id="genre-setting-ok-btn" style="margin-right:10px;">OK</button>
          <button id="genre-setting-cancel-btn">キャンセル</button>
        </div>
      </div>
    </div>

    <!-- ▼ 「その他」登録用モーダル -->
    <div id="other-input-modal" class="modal" style="display:none;">
      <div class="modal-content" style="max-width:400px;">
        <h2>「その他」を追加</h2>
        <p id="other-input-modal-category" style="font-weight:bold;"></p>
        <textarea id="other-input-text" rows="3" placeholder="新しく追加する候補"></textarea>
        <div style="margin-top:10px;">
          <button id="other-generate-btn">生成</button>
          <button id="other-ok-btn">OK</button>
          <button id="other-cancel-btn">キャンセル</button>
        </div>
        <p style="font-size:0.8em; color:#666; margin-top:10px;">
          ※「生成」ボタンを押すと、現状の候補にない新しい案をChatGPTで生成し、<br>
          その結果を上のテキストボックスに自動入力します。
        </p>
      </div>
    </div>

    <!-- ▼ 「削除」確認モーダル -->
    <div id="delete-confirm-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <p>この選択肢を削除しますが、よろしいですか？</p>
        <button id="delete-confirm-ok">OK</button>
        <button id="delete-confirm-cancel">キャンセル</button>
      </div>
    </div>

    <!-- 「選んだジャンルの出力例」 -->
    <div style="margin-top:20px;">
      <p><strong>選んだジャンルの出力例：</strong></p>
      <p id="genre-result-text" style="font-weight:bold; white-space:pre-wrap;"></p>
    </div>

    <!-- 画面上に表示する「最後に生成したカード一覧」 -->
    <div id="card-container"></div>
  </div>

  <!-- IndexedDBなどの共通スクリプト -->
  <script src="js/indexedDB.js"></script>
  <!-- 先にgachaCore.jsを読み込む -->
  <script src="js/gachaCore.js"></script>
  <!-- その後、characterCreate.jsを読み込む（改変版） -->
  <script src="js/characterCreate.js"></script>

  <script>
    // ページ読み込み時にDB初期化 & 背景適用
    window.addEventListener("load", async () => {
      await initIndexedDB();
      // 背景初期化(選択済みがあれば適用)
      await initBackground("characterCreate");
    });

    // メニューに戻るボタン
    document.getElementById("back-to-menu").addEventListener("click", function () {
      window.location.href = "index.html";
    });
  </script>
</body>

</html>--- 
index.html 
<!DOCTYPE html>
<html lang="ja">

<head>
  <meta charset="UTF-8" />
  <title>TRPG メニュー</title>
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <!-- 黒背景 + 白文字ベースのcssを読み込む -->
  <link rel="stylesheet" href="styles.css" />

  <!-- カード表示などでDOMPurifyを使用 -->
  <script src="https://cdn.jsdelivr.net/npm/dompurify@2/dist/purify.min.js"></script>

  <!-- 背景管理用スクリプト（既存） -->
  <script src="js/background.js"></script>
</head>

<body>
  <div class="container" style="text-align:center; margin-top:50px;">
    <h1>TRPG メニュー</h1>

    <!-- ▼ 追加：背景を変更するボタン（デザイン変更） -->
    <button id="change-bg-button" style="
        color: #000;
        background-color: #DDD;
        border-radius: 2px;
        box-shadow: inset 0 0 3px #000;
        position: absolute;
        top: 0;
        right: 0;
      ">
      背景を変更する
    </button>

    <!-- ▼ 背景選択モーダル -->
    <div id="bg-modal" class="modal" style="display:none;">
      <div class="modal-content bg-modal-content">
        <h2>背景選択</h2>

        <!-- ストック画像のサムネイルを並べる領域 -->
        <div id="bg-stock-container" class="bg-stock-grid">
          <!-- ここにIndexedDBから取得した背景画像サムネイルを並べる -->
        </div>

        <!-- 背景無しボタン -->
        <button id="bg-none-button" class="btn-secondary" style="margin-top:10px;">背景無し</button>

        <!-- 生成ボタン -->
        <button id="bg-generate-button" style="margin-top:10px;">生成する</button>

        <!-- 閉じるボタン -->
        <button id="bg-close-modal-button" class="btn-close-modal">閉じる</button>
      </div>
    </div>

    <!-- 生成中モーダル -->
    <div id="bg-generate-modal" class="modal" style="display:none;">
      <div class="modal-content">
        <p>背景画像を生成中...</p>
      </div>
    </div>

    <div class="api-key-section" style="margin-top:20px;">
      <label for="api-key-input">ChatGPT APIキーを入力：</label>
      <input type="text" id="api-key-input" placeholder="APIキーを入力" />
      <button id="set-api-key-button">APIキー設定</button>
      <button id="clear-api-key-button" style="background-color:#f44336;">APIキーをクリア</button>
    </div>

    <div class="element-section">
      <!-- エレメント作成ボタン -->
      <button id="character-create">エレメント作成</button>
      <!-- パーティ一覧ボタン -->
      <button id="party-list" style="margin-left:10px;">パーティ一覧</button>

      <!-- 全エレメントクリアボタン -->
      <button id="clear-character-btn" style="background-color:#f44336;">全エレメントをクリア</button>

      <!-- 倉庫確認ボタン -->
      <button id="show-warehouse-btn" style="margin-left:10px;">倉庫確認</button>
    </div>

    <!-- 新しいシナリオを始めるボタン -->
    <div class="scenario-wizard-section" style="margin-top:20px;">
      <button id="start-new-scenario-button" style="background-color:#2196F3;">
        新しいシナリオを始める
      </button>
    </div>

    <!-- 進行中のシナリオ一覧 -->
    <div id="ongoing-scenarios" style="margin-top:30px;">
      <h2>進行中のシナリオ</h2>
      <div id="active-scenarios-container">
        <!-- 進行中シナリオのリンクがここに表示される（現在未使用） -->
      </div>
      <div id="scenario-list-container">
        <!-- JavaScriptで一覧表示 & 削除ボタン -->
      </div>
    </div>
  </div>

  <!-- シナリオ削除用の確認モーダル -->
  <div id="delete-scenario-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h3>シナリオ削除の確認</h3>
      <p>このシナリオを削除します。よろしいですか？</p>
      <button id="delete-scenario-ok">OK</button>
      <button id="delete-scenario-cancel">キャンセル</button>
    </div>
  </div>

  <!-- 倉庫モーダル -->
  <div id="warehouse-modal" class="modal" style="display:none;">
    <div class="modal-content">
      <h2>倉庫</h2>
      <!-- 倉庫側の選択モードボタン -->
      <button id="toggle-warehouse-selection-mode-btn">選択モード</button>
      <!-- 倉庫選択カードを削除するボタン -->
      <button id="delete-selected-warehouse-btn" style="display:none; margin:10px;">選択したカードを削除</button>
      <button id="close-warehouse-btn" style="margin:10px;">閉じる</button>

      <div id="warehouse-card-container" style="margin:10px 0;"></div>
    </div>
  </div>

  <!-- ▼ ここから追加のエクスポート/インポートボタン -->
  <div style="text-align:center; margin-top:30px;">
    <button id="export-button" style="margin-right:20px;">エクスポート</button>
    <button id="import-button">インポート</button>
    <!-- 非表示のファイル入力要素（インポート時にzipを選択） -->
    <input type="file" id="import-file-input" accept=".zip" style="display:none;" />
  </div>

  <!-- 外部JavaScript(IndexedDB) -->
  <script src="js/indexedDB.js"></script>
  <!-- 新規: 背景管理用スクリプト（すでに<head>で読み込み済み） -->

  <script>

    // ページ読み込み時
    window.addEventListener("load", async () => {
      await initIndexedDB();

      // 背景初期化(選択済みがあれば適用)
      await initBackground("index");

      const scriptEl = document.createElement("script");
      scriptEl.src = "js/menu.js";
      document.head.appendChild(scriptEl);
    });

    // エレメント作成ページへ
    document.getElementById("character-create").addEventListener("click", () => {
      window.location.href = "characterCreate.html";
    });

    // パーティ一覧
    document.getElementById("party-list").addEventListener("click", () => {
      window.location.href = "partyList.html";
    });

    // 新しいシナリオ
    document.getElementById("start-new-scenario-button").addEventListener("click", () => {
      window.location.href = "scenarioWizard.html";
    });
  </script>

  <!-- ▼ 追加: JSZip / FileSaver 読み込み + exportImport.js -->
  <script src="https://cdn.jsdelivr.net/npm/jszip@3.10.1/dist/jszip.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
  <script src="js/exportImport.js"></script>

</body>

</html>--- 
styles.css 
/* styles.css */

/* ベース */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #3d3d3d;
}

.container {
  box-sizing: border-box;
  max-width: calc(100vw - 40px);
  margin: 20px auto;
  padding: 20px;
  background-color: rgba(0, 0, 0, 0.4);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  color: #f0f0f0;
}

h1 {
  text-align: center;
}

h2 {
  font-size: 1.5em;
  margin-bottom: 10px;
}

.api-key-section {
  margin-bottom: 20px;
}

input,
textarea {
  box-sizing: border-box;
  width: 100%;
  padding: 10px;
  font-size: 1.5rem;
  border: 1px solid #ccc;
  background-color: #434343;
  color: #f0f0f0;
  margin-bottom: 10px;
}

button {
  padding: 10px 20px;
  background-color: #4caf50;
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-bottom: 10px;
  min-height: 2.5rem;
}

button:hover {
  background-color: #45a049;
}

/* シーン履歴 */
.scene-history {
  max-height: 300px;
  overflow-y: auto;
  border: 1px solid #ddd;
  padding: 10px;
  background-color: #000000;
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 20px;
}

.history-tile {
  box-sizing: border-box;
  padding: 10px;
  background-color: #000000;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  margin: 0 auto;
  text-align: right;
  width: 100%;
  margin-bottom: 30px;
}

.scene-text,
.action-text,
.scenario-text {
  text-align: left;
  font-family: serif;
  line-height: 1.8em;
  margin: 0;
  padding: 5px;
  font-size: 22px;
  letter-spacing: 0.1em;
  border: 1px dashed transparent;
  cursor: text;
}

.history-tile .scene-text,
.history-tile .action-text,
.history-tile .scenario-text {
  font-size: 0.8rem;
}

.history-tile:last-child .action-text {
  font-size: 1.4rem;
}

.history-tile button {
  max-width: 20rem;
  background-color: #444;
  padding: 5px;
  position: relative;
  width: 100%;
}

.scene-text[contenteditable]:focus,
.action-text[contenteditable]:focus,
.scenario-text[contenteditable]:focus {
  border: 1px dashed #4caf50;
  outline: none;
}

#story {
  font-size: 1.4rem;
  padding-bottom: 10px;
  border-bottom: 1px solid #ccc;
  min-height: 60px;
}

/* モーダル */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.8);
  display: none;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-content {
  box-sizing: border-box;
  width: calc(100% - 20px);
  background-color: rgba(0, 0, 0, 0.6);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  color: #f0f0f0;
  padding: 20px 40px;
  border-radius: 5px;
  text-align: center;
  max-height: 90vh;
  overflow-y: auto;
}

/* カード関連 */
#card-container,
#party-modal-card-container,
#warehouse-card-container {
  box-sizing: border-box;
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
  justify-content: center;
}

.card {
  width: 100%;
  aspect-ratio: 63 / 88;
  perspective: 1000px;
  cursor: pointer;
  transition: transform 0.3s ease;
  position: relative;
  max-width: 300px;
}

.card-inner {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
  transition: transform 0.6s;
}

.card.flipped .card-inner {
  transform: rotateY(180deg);
}

.card-front,
.card-back {
  color: #222;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 15px;
  backface-visibility: hidden;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

.card-front {
  box-sizing: border-box;
  padding: 3%;
  background-color: #fff;
  display: flex;
  flex-direction: column;
  position: relative;
}

.card-front h3 {
  padding: 0;
  margin: 0;
  font-size: 1rem;
}

.card-front .card-type {
  position: absolute;
  right: 10px;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 2px 6px;
  border-radius: 4px;
  font-weight: bold;
  font-size: 0.85rem;
  z-index: 2;
}

.card-front .card-image {
  width: 100%;
  height: 40%;
  background: linear-gradient(135deg, #cccccc70, #eeeeee70);
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.card-front .card-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  object-position: top;
}

.card-front .gen-image-btn {
  position: absolute;
  bottom: 8px;
  right: 8px;
  padding: 4px 8px;
  background-color: rgba(0, 0, 0, 0.6);
  color: #fff;
  border: none;
  border-radius: 4px;
  font-size: 0.8rem;
  z-index: 2;
}

.gen-image-btn:disabled {
  background-color: #999;
  color: #ccc;
  cursor: not-allowed;
  opacity: 0.6;
}

.card-front .card-info {
  padding: 8px;
  display: flex;
  flex-direction: column;
  gap: 4px;
  flex-grow: 1;
  overflow: auto;
  background-color: rgba(255, 255, 255, 0.7);
}

.card-front .card-info p {
  margin: 0;
  font-size: 0.85rem;
}

.card-front .card-info p:last-child {
  padding: 0;
  height: 100%;
  font-size: 0.85rem;
  align-items: center;
  display: flex;
  background-color: #eee;
  margin-top: 10px;
}

.card-front .card-info p:last-child span {
  transform: skew(-5deg);
  display: flex;
  padding: 10px;
}

.card-back {
  box-sizing: border-box;
  background: linear-gradient(135deg, #1e3c72, #2a5298);
  color: #fff;
  transform: rotateY(180deg);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  padding: 10px;
  text-align: center;
}

@media (max-width: 600px) {
  #card-container {
    grid-template-columns: repeat(1, 1fr);
  }
}

.bezel {
  position: absolute;
  top: 0;
  left: 0;
  pointer-events: none;
  height: 100%;
  width: 100%;
  box-sizing: border-box;
  z-index: 100;
  border-radius: 2%;
  padding: 3%;
}

.bezel.rarity0 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity1 {
  background: linear-gradient(145deg, #b87333, #da8a67, #e97451, #c35817);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity2 {
  background: linear-gradient(145deg, #c0c0c0, #d3d3d3, #e0e0e0, #a9a9a9);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity3 {
  background: linear-gradient(145deg, #b69a00, #ffda64, #ffda6b, #d79000);
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
}

.bezel.rarity4 {
  position: absolute;
  background: linear-gradient(145deg, #d1d1d1, #aeb9ff, #c0c0c0, #ecebe8);
  background-size: 400% 400%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: platinum-shimmer 5s ease-in-out infinite;
}

.bezel.rarity5 {
  background: linear-gradient(145deg, #4b0082, #0000cd, #008080, #fff);
  background-size: 150% 150%;
  mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask:
    linear-gradient(#fff 0 0) content-box,
    linear-gradient(#fff 0 0);
  -webkit-mask-composite: destination-out;
  mask-composite: exclude;
  background-clip: padding-box, border-box;
  animation: jewel-glow 5s ease-in-out infinite;
}

@keyframes platinum-shimmer {
  0% {
    background-position: 0% 50%;
  }

  50% {
    background-position: 100% 50%;
  }

  100% {
    background-position: 0% 50%;
  }
}

@keyframes jewel-glow {
  0% {
    filter: brightness(1);
    background-position: 0% 50%;
  }

  50% {
    filter: brightness(1.2);
    background-position: 100% 50%;
  }

  100% {
    filter: brightness(1);
    background-position: 0% 50%;
  }
}

#party-card-container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}

.card.selected {
  outline: 4px solid #f44336;
  outline-offset: -4px;
  transform: scale(1.05);
  box-shadow: 0 0 10px rgba(244, 67, 54, 0.6);
}

.chips-container {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
}

.chip {
  display: inline-flex;
  align-items: center;
  padding: 6px 12px;
  border-radius: 20px;
  background-color: rgba(227, 227, 227, 0.4);
  color: #f0f0f0;
  box-shadow: inset 0px 0px 4px #fff;
  cursor: pointer;
  user-select: none;
  transition: background-color 0.2s;
  min-width: 12rem;
  justify-content: center;
}

.chip:hover {
  background-color: #cfcfcf;
}

.chip.selected {
  background-color: #8bc34a;
  color: #fff;
}

.bg-thumb {
  position: relative;
  cursor: pointer;
  transition: transform 0.2s;
}

.bg-thumb:hover {
  transform: scale(1.02);
}

.bg-thumb-delete {
  position: absolute;
  top: 5px;
  right: 5px;
  background-color: rgba(200, 0, 0, 0.7);
  color: #fff;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.8rem;
  padding: 4px;
  display: none;
}

.bg-thumb:hover .bg-thumb-delete {
  display: inline-block;
}

.bg-stock-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 16px;
  margin: 20px 0;
}

/* ここから追加: ダミー要素用 */
.dummy {
  /* 大きさは .card と同じ or 同程度にして、見た目を完全に消す */
  visibility: hidden;
  pointer-events: none;
  background-color: transparent;
  border: none;
}

.card.rarity3 .card-front .card-image,
.card.rarity4 .card-front .card-image,
.card.rarity5 .card-front .card-image
{
  z-index: 0;
  height: 100%;
  width: 100%;
}

.card.rarity3 .card-front .card-image img,
.card.rarity4 .card-front .card-image img,
.card.rarity5 .card-front .card-image img
{
  object-position: bottom;
  opacity: 0.9;
}

.card.rarity3 .card-info,
.card.rarity4 .card-info,
.card.rarity5 .card-info
{
  position: absolute;
  box-sizing: border-box;
  width: 100%;
  left: 0;
  bottom: 0;
  padding-left: calc(3% + 8px);
  padding-right: calc(3% + 8px);
  padding-top: 3%;
  padding-bottom: 3%;
  border-radius: 0 0 20px 20px;
  background-color: rgba(37, 37, 37, 0.85);
  color: #fff;
  text-shadow: 0 0 10px #FFF;

}

.card.rarity3 .card-front .card-info p:last-child,
.card.rarity4 .card-front .card-info p:last-child,
.card.rarity5 .card-front .card-info p:last-child
{
  margin-left: -3%;
  margin-right: -3%;
  background-color: rgba(0, 0, 0, 0.7);
  color: #fff;
}

.card.rarity3 .card-front .card-info p:last-child span,
.card.rarity4 .card-front .card-info p:last-child span,
.card.rarity5 .card-front .card-info p:last-child span
{
  padding-top: 20px;
  padding-bottom: 20px;
}


.card.rarity3 .card-front .gen-image-btn,
.card.rarity4 .card-front .gen-image-btn,
.card.rarity5 .card-front .gen-image-btn
{
  top: calc(40% - 0.8rem);
  bottom: initial;
}--- 
characterCreate.js 
// characterCreate.js

// トースト表示用の簡易関数
function showToast(message) {
  // 既存トーストがあれば削除
  const oldToast = document.getElementById("toast-message");
  if (oldToast) {
    oldToast.remove();
  }
  // 新規トースト要素
  const toast = document.createElement("div");
  toast.id = "toast-message";
  toast.textContent = message;

  // スタイル適用
  toast.style.position = "fixed";
  toast.style.bottom = "20px";
  toast.style.left = "50%";
  toast.style.transform = "translateX(-50%)";
  toast.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
  toast.style.color = "#fff";
  toast.style.padding = "10px 20px";
  toast.style.borderRadius = "4px";
  toast.style.fontSize = "14px";
  toast.style.zIndex = "9999";
  toast.style.opacity = "0";
  toast.style.transition = "opacity 0.3s ease";
  document.body.appendChild(toast);

  // フェードイン
  requestAnimationFrame(() => {
    toast.style.opacity = "1";
  });

  // 3秒後にフェードアウトして削除
  setTimeout(() => {
    toast.style.opacity = "0";
    toast.addEventListener("transitionend", () => {
      toast.remove();
    });
  }, 3000);
}

// グローバル変数
window.apiKey = localStorage.getItem("apiKey") || "";
window.characterData = [];

// 「舞台」は複数 => 配列
// 「雰囲気」は単一
let storedStageArr = [];
let storedMood = "";

// カスタム候補
let customStageChips = [];
let customMoodChips = [];

// 「その他」モーダルで現在操作中のカテゴリ
let currentOtherCategory = "";

// 削除確認用
let deletingChipLabel = "";
let deletingChipCategory = "";

// ページ読み込み時
window.addEventListener("load", async function () {
  // 1) IndexedDB初期化 & キャラデータロード
  await initIndexedDB();
  const storedChars = await loadCharacterDataFromIndexedDB();
  if (storedChars) {
    window.characterData = storedChars;
  }

  // 2) localStorage から読み込み(舞台, 雰囲気)
  const stageJson = localStorage.getItem("elementStageArr");
  if (stageJson) {
    try {
      storedStageArr = JSON.parse(stageJson);
    } catch (e) {
      storedStageArr = [];
    }
  } else {
    storedStageArr = [];
  }
  storedMood = localStorage.getItem("elementMood") || "";

  // カスタムチップ読み込み
  customStageChips = loadCustomChipsFromLocalStorage("customStageChips");
  customMoodChips = loadCustomChipsFromLocalStorage("customMoodChips");

  // 3) UIイベント登録
  document.getElementById("gacha-btn").addEventListener("click", onGachaButton);
  document.getElementById("genre-setting-ok-btn").addEventListener("click", onGenreSettingOk);
  document.getElementById("genre-setting-cancel-btn").addEventListener("click", onGenreSettingCancel);

  // 「その他」モーダル
  document.getElementById("other-generate-btn").addEventListener("click", onOtherGenerate);
  document.getElementById("other-ok-btn").addEventListener("click", onOtherOk);
  document.getElementById("other-cancel-btn").addEventListener("click", onOtherCancel);

  // 「削除」確認モーダル
  document.getElementById("delete-confirm-ok").addEventListener("click", onDeleteConfirmOk);
  document.getElementById("delete-confirm-cancel").addEventListener("click", onDeleteConfirmCancel);

  // 4) チップ表示
  initStageChips();
  initMoodChips();

  // 5) 「選んだジャンルの出力例」 ラベル更新
  updateGenreResultLabel();

  // 6) ローカルストレージに記録されている「直近生成カード」一覧を表示
  const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
  let storedIds = [];
  try {
    storedIds = JSON.parse(storedIdsStr);
  } catch (e) {
    storedIds = [];
  }
  displayRecentlyCreatedCards(storedIds);

  // ★ 追加: リサイズ時に再度「直近生成カード」を描画し直す
  window.addEventListener("resize", () => {
    const reIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let reIds = [];
    try {
      reIds = JSON.parse(reIdsStr);
    } catch (e) {
      reIds = [];
    }
    displayRecentlyCreatedCards(reIds);
  });
});

/** 「その他」カスタムチップ用 */
function loadCustomChipsFromLocalStorage(key) {
  try {
    const j = localStorage.getItem(key);
    if (!j) return [];
    return JSON.parse(j);
  } catch (e) {
    return [];
  }
}
function saveCustomChipsToLocalStorage(key, arr) {
  localStorage.setItem(key, JSON.stringify(arr));
}

/* -------------------------
   チップ生成・表示
------------------------- */
function initStageChips() {
  const defaultStageCandidates = [
    "ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク"
  ];
  const container = document.getElementById("stage-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const allStageChips = [...defaultStageCandidates, ...customStageChips, "その他"];
  allStageChips.forEach(label => {
    const chip = createChipElement(label, "stage");
    container.appendChild(chip);
  });
}

function initMoodChips() {
  const defaultMoodCandidates = [
    "ライト / ポップ",
    "中間 / バランス型",
    "ダーク / シリアス"
  ];
  const container = document.getElementById("mood-chips-container");
  if (!container) return;
  container.innerHTML = "";

  const allMoodChips = [...defaultMoodCandidates, ...customMoodChips, "その他"];
  allMoodChips.forEach(label => {
    const chip = createChipElement(label, "mood");
    container.appendChild(chip);
  });
}

function createChipElement(label, category) {
  const isOther = (label === "その他");

  const chip = document.createElement("div");
  chip.className = "chip";
  chip.textContent = label;

  // 選択状態
  if (category === "stage") {
    if (storedStageArr.includes(label)) {
      chip.classList.add("selected");
    }
  } else if (category === "mood") {
    if (storedMood === label) {
      chip.classList.add("selected");
    }
  }

  // クリック動作
  chip.addEventListener("click", () => {
    if (isOther) {
      openOtherModal(category);
      return;
    }
    if (category === "stage") {
      // 複数選択
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        storedStageArr = storedStageArr.filter(x => x !== label);
      } else {
        chip.classList.add("selected");
        storedStageArr.push(label);
      }
      localStorage.setItem("elementStageArr", JSON.stringify(storedStageArr));
    } else if (category === "mood") {
      // 単一
      if (chip.classList.contains("selected")) {
        chip.classList.remove("selected");
        storedMood = "";
        localStorage.setItem("elementMood", "");
      } else {
        const container = document.getElementById("mood-chips-container");
        const all = container.querySelectorAll(".chip");
        all.forEach(c => c.classList.remove("selected"));
        chip.classList.add("selected");
        storedMood = label;
        localStorage.setItem("elementMood", storedMood);
      }
    }
    updateGenreResultLabel();
  });

  // カスタム削除ボタン
  if (!isOther) {
    if (category === "stage" && customStageChips.includes(label)) {
      addRemoveButton(chip, label, "stage");
    } else if (category === "mood" && customMoodChips.includes(label)) {
      addRemoveButton(chip, label, "mood");
    }
  }

  return chip;
}

function addRemoveButton(chip, label, category) {
  const span = document.createElement("span");
  span.textContent = "×";
  span.style.marginLeft = "4px";
  span.style.cursor = "pointer";
  span.style.color = "red";
  span.addEventListener("click", (e) => {
    e.stopPropagation();
    deletingChipLabel = label;
    deletingChipCategory = category;
    document.getElementById("delete-confirm-modal").style.display = "flex";
  });
  chip.appendChild(span);
}

/** 「その他」モーダル */
function openOtherModal(category) {
  currentOtherCategory = category;
  document.getElementById("other-input-modal-category").textContent =
    (category === "stage") ? "舞台に追加する「その他」" : "雰囲気に追加する「その他」";
  document.getElementById("other-input-text").value = "";
  document.getElementById("other-input-modal").style.display = "flex";
}
async function onOtherGenerate() {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  let existingList = [];
  if (currentOtherCategory === "stage") {
    existingList = ["ファンタジー", "SF", "歴史・時代劇", "現代", "ホラー / ダーク", ...customStageChips];
  } else {
    existingList = ["ライト / ポップ", "中間 / バランス型", "ダーク / シリアス", ...customMoodChips];
  }

  const gachaModal = document.getElementById("gacha-modal");
  gachaModal.style.display = "flex";
  try {
    const systemPrompt = "あなたは創造力豊かなアシスタントです。回答は1つだけ。";
    const userPrompt = `既存候補:${existingList.join(" / ")}\nこれらに無い新しい案を1つ提案してください。`;

    const resp = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${window.apiKey}`
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userPrompt }
        ],
        temperature: 0.7
      })
    });
    const data = await resp.json();
    if (data.error) throw new Error(data.error.message);
    const newCandidate = (data.choices[0].message.content || "").trim();
    document.getElementById("other-input-text").value = newCandidate;
  } catch (err) {
    console.error(err);
    showToast("その他生成失敗:\n" + err.message);
  } finally {
    gachaModal.style.display = "none";
  }
}
function onOtherOk() {
  const text = document.getElementById("other-input-text").value.trim();
  if (!text) {
    document.getElementById("other-input-modal").style.display = "none";
    return;
  }
  if (currentOtherCategory === "stage") {
    if (!customStageChips.includes(text)) {
      customStageChips.push(text);
      saveCustomChipsToLocalStorage("customStageChips", customStageChips);
    }
    initStageChips();
  } else {
    if (!customMoodChips.includes(text)) {
      customMoodChips.push(text);
      saveCustomChipsToLocalStorage("customMoodChips", customMoodChips);
    }
    initMoodChips();
  }
  document.getElementById("other-input-modal").style.display = "none";
}
function onOtherCancel() {
  document.getElementById("other-input-modal").style.display = "none";
}

/** 削除確認モーダル */
function onDeleteConfirmOk() {
  if (deletingChipCategory === "stage") {
    customStageChips = customStageChips.filter(c => c !== deletingChipLabel);
    saveCustomChipsToLocalStorage("customStageChips", customStageChips);
    storedStageArr = storedStageArr.filter(x => x !== deletingChipLabel);
    localStorage.setItem("elementStageArr", JSON.stringify(storedStageArr));
    initStageChips();
  } else {
    customMoodChips = customMoodChips.filter(c => c !== deletingChipLabel);
    saveCustomChipsToLocalStorage("customMoodChips", customMoodChips);
    if (storedMood === deletingChipLabel) {
      storedMood = "";
      localStorage.setItem("elementMood", "");
    }
    initMoodChips();
  }
  deletingChipLabel = "";
  deletingChipCategory = "";
  document.getElementById("delete-confirm-modal").style.display = "none";
  updateGenreResultLabel();
}
function onDeleteConfirmCancel() {
  deletingChipLabel = "";
  deletingChipCategory = "";
  document.getElementById("delete-confirm-modal").style.display = "none";
}

/** ジャンルラベル更新 */
function updateGenreResultLabel() {
  let stagePart = storedStageArr.length > 0 ? "【舞台】" + storedStageArr.join(" / ") : "";
  let moodPart = storedMood ? "【雰囲気】" + storedMood : "";
  let text = stagePart + moodPart;
  document.getElementById("genre-result-text").textContent = text;
}

/* -------------------------
   ガチャ関連
------------------------- */
function onGachaButton() {
  // ジャンル選択モーダルを開く
  initStageChips();
  initMoodChips();
  document.getElementById("element-genre-modal").style.display = "flex";
}
function onGenreSettingOk() {
  document.getElementById("element-genre-modal").style.display = "none";
  // すぐガチャを実行
  const axisPrompt = buildAxisPrompt();
  document.getElementById("gacha-modal").style.display = "flex";
  runGacha(10, axisPrompt).then(() => {
    hideGachaModal();
    const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let storedIds = [];
    try {
      storedIds = JSON.parse(storedIdsStr);
    } catch (e) {
      storedIds = [];
    }
    displayRecentlyCreatedCards(storedIds);
  }).catch(err => {
    console.error(err);
    hideGachaModal();
  });
}
function onGenreSettingCancel() {
  document.getElementById("element-genre-modal").style.display = "none";
}
function buildAxisPrompt() {
  // 舞台 + 雰囲気
  const lines = [];
  if (storedStageArr.length > 0) {
    lines.push("【舞台】" + storedStageArr.join(" / "));
  }
  if (storedMood) {
    lines.push("【雰囲気】" + storedMood);
  }
  return lines.join("\n");
}
function hideGachaModal() {
  const m = document.getElementById("gacha-modal");
  if (m) m.style.display = "none";
}

/** 直近生成したカードを表示 -> 最終行ダミー挿入で左揃え */
function displayRecentlyCreatedCards(cardIds) {
  const container = document.getElementById("card-container");
  if (!container) return;
  container.innerHTML = "";

  if (!cardIds || cardIds.length === 0) {
    container.textContent = "まだエレメントが生成されていません。";
    return;
  }

  // DB上のキャラから該当idだけ抽出
  const toShow = window.characterData.filter(c => cardIds.includes(c.id));
  if (toShow.length === 0) {
    container.textContent = "まだエレメントが生成されていません。";
    return;
  }

  // 1) 本物のカードを並べる
  toShow.forEach(ch => {
    const cardEl = createCardElement(ch);
    container.appendChild(cardEl);
  });

  // 2) ダミー要素で最終行を埋める
  fillDummyItemsForLastRow(container, toShow.length);
}

/** カードDOM生成 */
function createCardElement(char) {
  const card = document.createElement("div");
  card.className = "card ";
  card.className += "rarity" + char.rarity.replace("★", "").trim();
  card.setAttribute("data-id", char.id);

  card.addEventListener("click", () => {
    card.classList.toggle("flipped");
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";
  const bgStyle = (char.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  cardFront.style = "background-image:" + bgStyle;

  // レア度
  const rarityValue = (typeof char.rarity === "string")
    ? char.rarity.replace("★", "").trim()
    : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  // タイプ表示
  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = char.type || "不明";
  cardFront.appendChild(typeEl);

  // 画像
  const imageContainer = document.createElement("div");
  imageContainer.className = "card-image";
  if (char.imageData) {
    const imageEl = document.createElement("img");
    imageEl.src = char.imageData;
    imageEl.alt = char.name;
    imageContainer.appendChild(imageEl);
  } else {
    // 画像未生成 → 生成ボタン
    const genImgBtn = document.createElement("button");
    genImgBtn.setAttribute("data-imageprompt", char.imageprompt);
    genImgBtn.className = "gen-image-btn";
    genImgBtn.textContent = "画像生成";

    genImgBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      generateCharacterImage(char, genImgBtn);
    });
    imageContainer.appendChild(genImgBtn);
  }
  cardFront.appendChild(imageContainer);

  // 情報
  const infoContainer = document.createElement("div");
  infoContainer.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(char.name) + "</h3>";
  infoContainer.appendChild(nameEl);

  if (char.state) {
    const stateEl = document.createElement("p");
    stateEl.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(char.state);
    infoContainer.appendChild(stateEl);
  }
  const specialEl = document.createElement("p");
  specialEl.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(char.special);
  infoContainer.appendChild(specialEl);

  const captionEl = document.createElement("p");
  captionEl.innerHTML = "<span>" + DOMPurify.sanitize(char.caption) + "</span>";
  infoContainer.appendChild(captionEl);

  cardFront.appendChild(infoContainer);

  // 裏面
  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(char.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  card.appendChild(cardInner);

  return card;
}

/** 画像生成 */
async function generateCharacterImage(char, btnElement) {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  if (btnElement) {
    btnElement.disabled = true;
  }
  showToast("画像を生成しています...");

  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
    (char.imageprompt || "");

  try {
    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: (parseInt(char.rarity.replace("★", "").trim()) >= 3) ? "1024x1792" : "1792x1024",
        response_format: "b64_json",
      }),
    });

    console.log(char.rarity);
    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // characterData 更新
    const idx = window.characterData.findIndex(c => c.id === char.id);
    if (idx !== -1) {
      window.characterData[idx].imageData = dataUrl;
      await saveCharacterDataToIndexedDB(window.characterData);
    }

    showToast("画像の生成が完了しました");
    // 再描画
    const storedIdsStr = localStorage.getItem("latestCreatedIds") || "[]";
    let storedIds = [];
    try {
      storedIds = JSON.parse(storedIdsStr);
    } catch (e) {
      storedIds = [];
    }
    displayRecentlyCreatedCards(storedIds);

  } catch (err) {
    console.error("画像生成失敗:", err);
    showToast("画像生成に失敗しました:\n" + err.message);
  } finally {
    if (btnElement) {
      btnElement.disabled = false;
    }
  }
}

/* ------------------------------------------
   (追加) 最終行をダミーで埋める関数 (gap考慮)
------------------------------------------ */
function fillDummyItemsForLastRow(container, realCount) {
  // 1) 先頭カード(ダミー以外)を探す
  const firstCard = container.querySelector(".card:not(.dummy)");
  if (!firstCard) return;

  // 2) カード幅
  const style = getComputedStyle(firstCard);
  const cardWidth = parseFloat(style.width);

  // 3) コンテナ幅
  const containerWidth = container.clientWidth;
  if (containerWidth <= 0 || isNaN(cardWidth)) return;

  // 4) gap(横方向)を取得
  const containerStyle = getComputedStyle(container);
  const gapStr = containerStyle.columnGap || containerStyle.gap || "0";
  const gap = parseFloat(gapStr) || 0;

  // 5) 1行に入る数を厳密に算出
  //   n個 => totalWidth = n*cardWidth + (n-1)*gap
  let itemsPerRow = 1;
  for (let n = 1; n < 999; n++) {
    const total = n * cardWidth + (n - 1) * gap;
    if (total <= containerWidth) {
      itemsPerRow = n;
    } else {
      break;
    }
  }

  // 6) 余り
  const remainder = realCount % itemsPerRow;
  if (remainder === 0) return; // ぴったり埋まってる

  const dummyCount = itemsPerRow - remainder;

  // 7) ダミーを追加
  for (let i = 0; i < dummyCount; i++) {
    const dummyEl = document.createElement("div");
    dummyEl.className = "card dummy"; // .card も付与して同サイズに
    container.appendChild(dummyEl);
  }
}
--- 
gachaCore.js 
// gachaCore.js
// ------------------------------------------
// 「ガチャ処理」のロジックだけを集めたファイル
// ------------------------------------------

// グローバルに必要な変数 (characterData, apiKey など) は
// すでに window に存在すると仮定 (indexedDB や parse等も)


// --------------------------------------------------------
// 1. runGacha(cardCount, addPrompt, onlyTitle = "", onlyType = "")
//
//   - 指定枚数のエレメントをChatGPTで生成し、window.characterDataに加える
//   - 生成カードは最初から group="Warehouse" として保存する
//   - 生成完了後、localStorage["latestCreatedIds"] を
//     「今回生成したIDのみに」上書き保存し、
//     画面側でそれらを表示する
// --------------------------------------------------------
async function runGacha(cardCount, addPrompt, onlyTitle = "", onlyType = "") {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  // キャンセル用
  window.currentGachaController = new AbortController();
  const signal = window.currentGachaController.signal;

  // レア度をランダムで決定
  const rarities = pickRaritiesForNCards(cardCount);
  const countMap = makeRarityCountMap(rarities);

  // system
  let systemContent = `
  あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
  以下の6段階のレア度「★0～★5」のうち、
  今回の${cardCount}件では以下の内訳を厳密に守って生成してください：
  - ★0: ${countMap["★0"]}件
  - ★1: ${countMap["★1"]}件
  - ★2: ${countMap["★2"]}件
  - ★3: ${countMap["★3"]}件
  - ★4: ${countMap["★4"]}件
  - ★5: ${countMap["★5"]}件

  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：...
  【タイプ】：キャラクターまたはモンスター
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：...
  【タイプ】：アイテム
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;

  let userContent = `${addPrompt}合計${cardCount}件、順番は問わないので上記レア度数で生成してください。`;
  if (onlyTitle) {
    // タイトル指定がある場合
    systemContent = `
    あなたはTRPG用のキャラクター、装備品、モンスター作成のエキスパートです。
    6段階のレア度「★0～★5」のどれかを${onlyTitle}の名称から判断して設定してください。

  生成するのがキャラクターやモンスターの場合
  【レア度】：...
  【名前】：${onlyTitle}
  【タイプ】：${onlyType}
  【状態】：...
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...
  
  生成するのがアイテムの場合
  【レア度】：...
  【名前】：${onlyType}
  【タイプ】：${onlyType}
  【特技】：...
  【キャプション】：...
  【カード背景】：...
  【外見】：...

  各項目の説明は以下の通りです。
【名前】は、対象の名称です。【レア度】が高い場合凝った名前を付けてください。
【タイプ】は、キャラクターかモンスターかアイテムです。
【状態】は、対象の心身の状態を書いてください。複数の状態が合わさっていても構いません（例：毒/麻痺/睡眠/出血/負傷/石化/病気/混乱/恐怖/魅了/狂乱/沈黙/精神汚染/絶望/疲労/ストレス/トラウマ/憑依/呪い）
【特技】は、対象の得意な事を表現してください。体言止めで書いてください。【レア度】が高い場合より強い特技を表現してください。

生成するのがキャラクターやモンスターの場合【キャプション】は、セリフと説明です。レア度に応じて長文にしてください。
生成するのがアイテムの場合【キャプション】は、説明です。レア度に応じて長文にしてください。
【カード背景】は、キャラクター、装備品、モンスターをカードにした場合にふさわしいCSSのbackground-image:の値を書いてください。カードのフォントは#000となります。
linear-gradientを巧みに用いて背景を設定してください。left top, right bottom以外にも色々と試してみてください。
【外見】は、画像生成用のスクリプトです。英語でOpenAI社の規定に沿うように書いてください。NGワードはゴブリンです。
`;
    userContent = `${addPrompt}上記レア度数で生成してください。`;
  }

  const messages = [
    { role: "system", content: systemContent },
    { role: "user", content: userContent },
  ];

  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages,
        temperature: 0.7,
      }),
      signal,
    });
    if (signal.aborted) {
      return;
    }

    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }

    const text = data?.choices?.[0]?.message?.content;
    if (typeof text !== "string") {
      throw new Error("エレメント生成APIレスポンスが不正です。");
    }
    console.log("text", text);

    // 生成結果をパース
    const newCards = parseCharacterData(text);

    // ガチャ箱は廃止 → 生成後は group="Warehouse" に
    newCards.forEach(card => {
      card.group = "Warehouse";
    });

    // 既存 characterData に追加
    window.characterData.push(...newCards);

    // IndexedDB に保存
    await saveCharacterDataToIndexedDB(window.characterData);

    // localStorage["latestCreatedIds"] を
    // 「今回生成したIDのみに」上書き (＝以前のIDはクリア)
    const newIds = newCards.map(c => c.id);
    localStorage.setItem("latestCreatedIds", JSON.stringify(newIds));
    console.log("【最新生成IDsを上書き】:", newIds);

  } catch (err) {
    if (err.name === "AbortError") {
      console.log("runGachaキャンセル");
    } else {
      console.error("runGacha失敗:", err);
      alert("エレメント生成に失敗しました:\n" + err.message);
    }
  }
}


// --------------------------------------------------------
// 2. parseCharacterData( text )
//    - GPTレスポンスを解析してカード配列を生成
// --------------------------------------------------------
function parseCharacterData(text) {
  const lines = text.split("\n");
  const characters = [];
  let currentChar = {
    id: "",
    type: "",
    name: "",
    state: "",
    special: "",
    caption: "",
    rarity: "★0",
    backgroundcss: "",
    imageprompt: "",
    group: "Warehouse",
  };

  function pushCurrentChar() {
    currentChar.id = "card_" + Date.now() + "_" + Math.random().toString(36).substring(2);
    characters.push({ ...currentChar });
    currentChar = {
      id: "",
      type: "",
      name: "",
      state: "",
      special: "",
      caption: "",
      rarity: "★0",
      backgroundcss: "",
      imageprompt: "",
      group: "Warehouse",
    };
  }

  lines.forEach((line) => {
    line = line.trim();
    if (line.startsWith("【名前】")) {
      // 名前が続けて出てきたら新キャラ扱い
      if (currentChar.name) pushCurrentChar();
      currentChar.name = line.replace("【名前】", "").replace("：", "").trim();
    } else if (line.startsWith("【タイプ】")) {
      currentChar.type = line.replace("【タイプ】", "").replace("：", "").trim();
    } else if (line.startsWith("【状態】")) {
      currentChar.state = line.replace("【状態】", "").replace("：", "").trim();
    } else if (line.startsWith("【特技】")) {
      currentChar.special = line.replace("【特技】", "").replace("：", "").trim();
    } else if (line.startsWith("【キャプション】")) {
      currentChar.caption = line.replace("【キャプション】", "").replace("：", "").trim();
    } else if (line.startsWith("【レア度】")) {
      currentChar.rarity = line.replace("【レア度】", "").replace("：", "").trim();
    } else if (line.startsWith("【カード背景】")) {
      currentChar.backgroundcss = line.replace("【カード背景】", "").replace("：", "").trim();
    } else if (line.startsWith("【外見】")) {
      currentChar.imageprompt = line.replace("【外見】", "").replace("：", "").trim();
    }
  });
  // 最後にキャラがあればプッシュ
  if (currentChar.name) {
    pushCurrentChar();
  }
  return characters;
}


// --------------------------------------------------------
// 3. pickRaritiesForNCards( n ), makeRarityCountMap( rarities )
// --------------------------------------------------------
function pickRaritiesForNCards(n) {
  const rarityDist = [
    { star: "★0", probability: 0.50 },
    { star: "★1", probability: 0.20 },
    { star: "★2", probability: 0.15 },
    { star: "★3", probability: 0.10 },
    { star: "★4", probability: 0.045 },
    { star: "★5", probability: 0.005 },
  ];
  const results = [];
  for (let i = 0; i < n; i++) {
    const rand = Math.random();
    let cum = 0;
    for (const r of rarityDist) {
      cum += r.probability;
      if (rand <= cum) {
        results.push(r.star);
        break;
      }
    }
  }
  return results;
}

function makeRarityCountMap(rarities) {
  const counts = { "★0": 0, "★1": 0, "★2": 0, "★3": 0, "★4": 0, "★5": 0 };
  rarities.forEach((r) => {
    counts[r] = (counts[r] || 0) + 1;
  });
  return counts;
}
--- 
indexedDB.js 
/********************************
 * indexedDB.js
 * IndexedDB関連の初期化・保存・読み込み等を担当
 ********************************/

let db = null;

/**
 * DB初期化
 * バージョン5:
 *  - scenarios ストア (keyPath: 'scenarioId', autoIncrement)
 *  - sceneEntries ストア (keyPath: 'entryId', autoIncrement)
 *  - characterData ストア (keyPath: 'id')
 *  - wizardState ストア (keyPath: 'id')
 *  - parties ストア (keyPath: 'partyId', autoIncrement)
 *  - ★追加: bgImages ストア (keyPath: 'id', autoIncrement)
 */
function initIndexedDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("trpgDB", 7);
    request.onupgradeneeded = (event) => {
      db = event.target.result;

      // 1) characterData
      if (!db.objectStoreNames.contains("characterData")) {
        db.createObjectStore("characterData", { keyPath: "id" });
      }

      // 2) scenarios
      if (!db.objectStoreNames.contains("scenarios")) {
        const scenarioStore = db.createObjectStore("scenarios", {
          keyPath: "scenarioId",
          autoIncrement: true
        });
        scenarioStore.createIndex("updatedAt", "updatedAt", { unique: false });
      }

      // 3) sceneEntries
      if (!db.objectStoreNames.contains("sceneEntries")) {
        const sceneStore = db.createObjectStore("sceneEntries", {
          keyPath: "entryId",
          autoIncrement: true
        });
        sceneStore.createIndex("scenarioId", "scenarioId", { unique: false });
      }

      // 4) wizardState
      if (!db.objectStoreNames.contains("wizardState")) {
        db.createObjectStore("wizardState", { keyPath: "id" });
      }

      // 5) parties
      if (!db.objectStoreNames.contains("parties")) {
        const partyStore = db.createObjectStore("parties", {
          keyPath: "partyId",
          autoIncrement: true
        });
        partyStore.createIndex("updatedAt", "updatedAt", { unique: false });
      }

      // 6) ★ 追加: 背景画像ストア
      if (!db.objectStoreNames.contains("bgImages")) {
        const bgStore = db.createObjectStore("bgImages", {
          keyPath: "id",
          autoIncrement: true
        });
        // 例: bgStore.createIndex("createdAt", "createdAt", { unique: false });
      }
    };
    request.onsuccess = (event) => {
      db = event.target.result;
      resolve();
    };
    request.onerror = (event) => {
      console.error("IndexedDBの初期化に失敗:", event.target.error);
      reject(event.target.error);
    };
  });
}

/**
 * characterData を保存
 */
function saveCharacterDataToIndexedDB(characterData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve();
      return;
    }
    const tx = db.transaction("characterData", "readwrite");
    const store = tx.objectStore("characterData");
    const record = { id: "characterData", data: characterData };
    const putReq = store.put(record);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/**
 * characterData をロード
 */
function loadCharacterDataFromIndexedDB() {
  return new Promise((resolve) => {
    if (!db) {
      console.warn("DBが未初期化です。");
      resolve([]);
      return;
    }
    const tx = db.transaction("characterData", "readonly");
    const store = tx.objectStore("characterData");
    const getReq = store.get("characterData");
    getReq.onsuccess = (event) => {
      if (event.target.result && event.target.result.data) {
        resolve(event.target.result.data);
      } else {
        resolve([]);
      }
    };
    getReq.onerror = () => {
      resolve([]);
    };
  });
}

/**
 * wizardData を保存
 */
function saveWizardDataToIndexedDB(wizardData) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readwrite");
    const store = tx.objectStore("wizardState");
    const record = { id: "wizardData", data: wizardData };
    const req = store.put(record);
    req.onsuccess = () => resolve();
    req.onerror = (err) => reject(err);
  });
}

/**
 * wizardData をロード
 */
function loadWizardDataFromIndexedDB() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("wizardState", "readonly");
    const store = tx.objectStore("wizardState");
    const getReq = store.get("wizardData");
    getReq.onsuccess = (evt) => {
      if (evt.target.result) {
        resolve(evt.target.result.data);
      } else {
        resolve(null);
      }
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
    新しいシナリオの追加・読み込み用API
-------------------------------------------*/
function createNewScenario(wizardData, title = "新シナリオ") {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");

    const now = new Date();
    const record = {
      title: title,
      wizardData: wizardData,
      createdAt: now.toISOString(),
      updatedAt: now.toISOString()
    };

    const addReq = store.add(record);
    addReq.onsuccess = (evt) => {
      const newId = evt.target.result;
      resolve(newId);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

function getScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const getReq = store.get(scenarioId);
    getReq.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    getReq.onerror = (err) => {
      reject(err);
    };
  });
}

function listAllScenarios() {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("scenarios", "readonly");
    const store = tx.objectStore("scenarios");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const result = evt.target.result || [];
      result.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(result);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
}

function updateScenario(scenario) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    scenario.updatedAt = new Date().toISOString();
    const tx = db.transaction("scenarios", "readwrite");
    const store = tx.objectStore("scenarios");
    const putReq = store.put(scenario);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
    シーン履歴 (sceneEntries) の操作
-------------------------------------------*/
function addSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const addReq = store.add(entry);
    addReq.onsuccess = (evt) => {
      resolve(evt.target.result);
    };
    addReq.onerror = (err) => {
      reject(err);
    };
  });
}

function getSceneEntriesByScenarioId(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readonly");
    const store = tx.objectStore("sceneEntries");
    const index = store.index("scenarioId");

    const range = IDBKeyRange.only(scenarioId);
    const results = [];
    index.openCursor(range).onsuccess = (evt) => {
      const cursor = evt.target.result;
      if (cursor) {
        results.push(cursor.value);
        cursor.continue();
      } else {
        results.sort((a, b) => (a.entryId - b.entryId));
        resolve(results);
      }
    };
    index.openCursor(range).onerror = (err) => {
      reject(err);
    };
  });
}

function updateSceneEntry(entry) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const putReq = store.put(entry);
    putReq.onsuccess = () => {
      resolve();
    };
    putReq.onerror = (err) => {
      reject(err);
    };
  });
}

function deleteSceneEntry(entryId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("sceneEntries", "readwrite");
    const store = tx.objectStore("sceneEntries");
    const delReq = store.delete(entryId);
    delReq.onsuccess = () => {
      resolve();
    };
    delReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* ★ シナリオ削除 */
function deleteScenarioById(scenarioId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction(["scenarios", "sceneEntries"], "readwrite");
    const scenarioStore = tx.objectStore("scenarios");
    const sceneEntriesStore = tx.objectStore("sceneEntries");

    // 1) シナリオ本体を削除
    const deleteReq = scenarioStore.delete(scenarioId);
    deleteReq.onsuccess = () => {
      // 2) sceneEntriesで scenarioId === scenarioId のものを全削除
      const idx = sceneEntriesStore.index("scenarioId");
      const range = IDBKeyRange.only(scenarioId);

      idx.openCursor(range).onsuccess = (evt) => {
        const cursor = evt.target.result;
        if (cursor) {
          sceneEntriesStore.delete(cursor.primaryKey);
          cursor.continue();
        }
      };

      tx.oncomplete = () => {
        resolve();
      };
      tx.onerror = (err) => {
        reject(err);
      };
    };
    deleteReq.onerror = (err) => {
      reject(err);
    };
  });
}

/* -------------------------------------------
   パーティ管理
-------------------------------------------*/
window.initIndexedDB = initIndexedDB;

window.saveCharacterDataToIndexedDB = saveCharacterDataToIndexedDB;
window.loadCharacterDataFromIndexedDB = loadCharacterDataFromIndexedDB;

window.saveWizardDataToIndexedDB = saveWizardDataToIndexedDB;
window.loadWizardDataFromIndexedDB = loadWizardDataFromIndexedDB;

window.createNewScenario = createNewScenario;
window.getScenarioById = getScenarioById;
window.listAllScenarios = listAllScenarios;
window.updateScenario = updateScenario;

window.addSceneEntry = addSceneEntry;
window.getSceneEntriesByScenarioId = getSceneEntriesByScenarioId;
window.updateSceneEntry = updateSceneEntry;
window.deleteSceneEntry = deleteSceneEntry;

window.deleteScenarioById = deleteScenarioById;

/** 新規パーティ作成 */
window.createParty = function (name) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const now = new Date().toISOString();
    const rec = {
      name: name,
      createdAt: now,
      updatedAt: now
    };
    const req = store.add(rec);
    req.onsuccess = (evt) => {
      resolve(evt.target.result); // partyId
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.getPartyById = function (partyId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readonly");
    const store = tx.objectStore("parties");
    const req = store.get(partyId);
    req.onsuccess = (evt) => {
      resolve(evt.target.result || null);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.listAllParties = function () {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readonly");
    const store = tx.objectStore("parties");
    const req = store.getAll();
    req.onsuccess = (evt) => {
      const list = evt.target.result || [];
      list.sort((a, b) => (b.updatedAt || "").localeCompare(a.updatedAt || ""));
      resolve(list);
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.updateParty = function (party) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    party.updatedAt = new Date().toISOString();
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");
    const req = store.put(party);
    req.onsuccess = () => {
      resolve();
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};

window.deletePartyById = function (partyId) {
  return new Promise((resolve, reject) => {
    if (!db) {
      return reject("DB未初期化");
    }
    const tx = db.transaction("parties", "readwrite");
    const store = tx.objectStore("parties");

    const req = store.delete(partyId);
    req.onsuccess = () => {
      resolve();
    };
    req.onerror = (err) => {
      reject(err);
    };
  });
};
--- 
main.js 
/********************************
 * main.js
 * - ページ全体の初期化・イベント登録
 * - 複数シナリオ対応
 ********************************/

window.onload = async () => {
  // 1) IndexedDB初期化
  await initIndexedDB();

  // 2) APIキー読み込み
  const savedApiKey = localStorage.getItem('apiKey');
  if (savedApiKey) {
    window.apiKey = savedApiKey;
  }

  // 3) URLパラメータで scenarioId を読み取る
  const urlParams = new URLSearchParams(window.location.search);
  const scenarioIdStr = urlParams.get("scenarioId");
  const scenarioId = scenarioIdStr ? parseInt(scenarioIdStr, 10) : null;

  window.currentScenarioId = scenarioId || null;

  // 4) シナリオIDがあれば、DBから読み込んで画面を構築
  if (window.currentScenarioId) {
    // 旧の「入力セクション」は非表示、ゲーム画面のみ表示
    const inputSec = document.querySelector('.input-section');
    if (inputSec) inputSec.style.display = 'none';

    const gameSec = document.querySelector('.game-section');
    if (gameSec) gameSec.style.display = 'block';

    // scene.js 側の「loadScenarioData」でシナリオ＆履歴を取得して表示
    await loadScenarioData(window.currentScenarioId);
    updateSceneHistory();
    showLastScene();
  }

  // ---------- ネタバレ（目的達成型）関連 ----------
  const spoilerModal = document.getElementById("spoiler-modal");
  const spoilerButton = document.getElementById("spoiler-button");
  const closeSpoilerModalBtn = document.getElementById("close-spoiler-modal");
  if (spoilerButton) {
    spoilerButton.addEventListener("click", () => {
      spoilerModal.style.display = "flex";
    });
  }
  if (closeSpoilerModalBtn) {
    closeSpoilerModalBtn.addEventListener("click", () => {
      spoilerModal.style.display = "none";
    });
  }

  // ---------- 探索型「カードを取得する」ボタン ----------
  const getCardButton = document.getElementById("get-card-button");
  if (getCardButton) {
    // ※ 実際の処理は scenarioPage.js で定義
  }

  // ---------- シーン遷移ボタン ----------
  const nextSceneBtn = document.getElementById('next-scene');
  if (nextSceneBtn) {
    nextSceneBtn.addEventListener('click', () => {
      getNextScene();
    });
  }

  // 画像生成 (自動)
  const autoGenBtn = document.getElementById('image-auto-generate-button');
  if (autoGenBtn) {
    autoGenBtn.addEventListener('click', () => {
      generateImageFromCurrentScene();
    });
  }

  // 画像生成 (カスタム)
  const promptModalBtn = document.getElementById('image-prompt-modal-button');
  if (promptModalBtn) {
    promptModalBtn.addEventListener('click', () => {
      openImagePromptModal();
    });
  }

  // カスタム画像生成 決定
  const customGenBtn = document.getElementById('image-custom-generate-button');
  if (customGenBtn) {
    customGenBtn.addEventListener('click', () => {
      onCustomImageGenerate();
    });
  }

  // カスタム画像生成 キャンセル
  const customCancelBtn = document.getElementById('image-custom-cancel-button');
  if (customCancelBtn) {
    customCancelBtn.addEventListener('click', () => {
      closeImagePromptModal();
    });
  }

  // リクエストキャンセル
  const cancelRequestBtn = document.getElementById('cancel-request-button');
  if (cancelRequestBtn) {
    cancelRequestBtn.addEventListener('click', onCancelFetch);
  }

  // メニューに戻る
  const backMenuBtn = document.getElementById('back-to-menu');
  if (backMenuBtn) {
    backMenuBtn.addEventListener('click', () => {
      window.location.href = "index.html";
    });
  }
};
--- 
menu.js 
// menu.js

// ★ 追加：ここでグローバルにAPIキーをロード
window.apiKey = localStorage.getItem("apiKey") || "";

let scenarioIdToDelete = null;
let warehouseSelectionMode = false; // ★追加: 倉庫側の選択モードフラグ

// -----------------------------------------
// トースト表示用のユーティリティ関数
// -----------------------------------------
function showToast(message) {
  const oldToast = document.getElementById("toast-message");
  if (oldToast) {
    oldToast.remove();
  }

  const toast = document.createElement("div");
  toast.id = "toast-message";
  toast.textContent = message;

  // スタイルを付与（シンプルな例）
  toast.style.position = "fixed";
  toast.style.bottom = "20px";
  toast.style.left = "50%";
  toast.style.transform = "translateX(-50%)";
  toast.style.backgroundColor = "rgba(0, 0, 0, 0.8)";
  toast.style.color = "#fff";
  toast.style.padding = "10px 20px";
  toast.style.borderRadius = "4px";
  toast.style.fontSize = "14px";
  toast.style.zIndex = "9999";
  toast.style.opacity = "0";
  toast.style.transition = "opacity 0.3s ease";

  document.body.appendChild(toast);

  requestAnimationFrame(() => {
    toast.style.opacity = "1";
  });

  // 3秒後にフェードアウトして消す
  setTimeout(() => {
    toast.style.opacity = "0";
    toast.addEventListener("transitionend", () => {
      toast.remove();
    });
  }, 3000);
}

// -----------------------------------------
// 初期化：シナリオ一覧の取得 & characterDataのロード
// -----------------------------------------
(async function initMenuPage() {
  // 1) APIキーを入力欄に表示
  const savedApiKey = localStorage.getItem("apiKey");
  if (savedApiKey) {
    document.getElementById("api-key-input").value = savedApiKey;
  }

  // 2) シナリオ一覧を取得して表示
  try {
    const scenarioList = await listAllScenarios();  // indexedDB.js の関数
    const container = document.getElementById("scenario-list-container");
    container.innerHTML = "";

    if (scenarioList.length === 0) {
      container.textContent = "進行中のシナリオはありません。";
    } else {
      scenarioList.forEach(scenario => {
        const div = document.createElement("div");
        div.style.margin = "10px 0";

        // シナリオ情報
        const infoText = document.createElement("span");
        infoText.textContent = `ID:${scenario.scenarioId} / ${scenario.title} (更新:${scenario.updatedAt}) `;
        div.appendChild(infoText);

        // 「続きへ」ボタン
        const btnContinue = document.createElement("button");
        btnContinue.textContent = "続きへ";
        btnContinue.style.marginRight = "6px";
        btnContinue.addEventListener("click", () => {
          window.location.href = `scenario.html?scenarioId=${scenario.scenarioId}`;
        });
        div.appendChild(btnContinue);

        // 「コピーする」ボタン
        const btnCopy = document.createElement("button");
        btnCopy.textContent = "コピーする";
        btnCopy.style.marginRight = "6px";
        btnCopy.addEventListener("click", async () => {
          try {
            const newScenarioId = await copyScenarioById(scenario.scenarioId);
            showToast(`シナリオ(ID:${scenario.scenarioId})をコピーしました。\n新ID: ${newScenarioId}`);
            // リスト更新のためリロード
            location.reload();
          } catch (err) {
            console.error(err);
            showToast("シナリオのコピーに失敗:\n" + err.message);
          }
        });
        div.appendChild(btnCopy);

        // 「削除」ボタン
        const btnDelete = document.createElement("button");
        btnDelete.textContent = "削除";
        btnDelete.style.backgroundColor = "#f44336";
        btnDelete.addEventListener("click", () => {
          scenarioIdToDelete = scenario.scenarioId;
          showDeleteScenarioModal(true);
        });
        div.appendChild(btnDelete);

        container.appendChild(div);
      });
    }
  } catch (err) {
    console.error("シナリオ一覧の取得に失敗:", err);
    const container = document.getElementById("scenario-list-container");
    container.textContent = "シナリオ一覧の取得に失敗しました。再読み込みしてください。";
  }

  // 3) characterDataをロード
  try {
    const stored = await loadCharacterDataFromIndexedDB();
    window.characterData = stored || [];
  } catch (err) {
    console.error("characterDataのロードに失敗:", err);
    window.characterData = [];
  }

  // 4) 倉庫ボタン・倉庫モーダル関連のイベント設定
  const showWarehouseBtn = document.getElementById("show-warehouse-btn");
  if (showWarehouseBtn) {
    showWarehouseBtn.addEventListener("click", showWarehouseModal);
  }

  const toggleModeBtn = document.getElementById("toggle-warehouse-selection-mode-btn");
  if (toggleModeBtn) {
    toggleModeBtn.addEventListener("click", toggleWarehouseSelectionMode);
  }

  const closeWarehouseBtn = document.getElementById("close-warehouse-btn");
  if (closeWarehouseBtn) {
    closeWarehouseBtn.addEventListener("click", closeWarehouseModal);
  }

  const deleteWarehouseBtn = document.getElementById("delete-selected-warehouse-btn");
  if (deleteWarehouseBtn) {
    deleteWarehouseBtn.addEventListener("click", deleteSelectedWarehouse);
  }

  // ★ 追加: 画面リサイズのたび、倉庫モーダルが開いていたら再描画
  window.addEventListener("resize", () => {
    const modal = document.getElementById("warehouse-modal");
    if (modal && modal.style.display === "flex") {
      renderWarehouseCards();
    }
  });
})();

// -----------------------------------------
// APIキー関連
// -----------------------------------------
document.getElementById("set-api-key-button").addEventListener("click", function () {
  const apiKey = document.getElementById("api-key-input").value.trim();
  if (apiKey) {
    localStorage.setItem("apiKey", apiKey);
    window.apiKey = apiKey;
    showToast("APIキーが設定されました。");
  } else {
    showToast("APIキーを入力してください。");
  }
});

document.getElementById("clear-api-key-button").addEventListener("click", function () {
  const confirmClear = confirm("APIキーをクリアすると操作ができなくなります。よろしいですか？");
  if (confirmClear) {
    localStorage.removeItem("apiKey");
    window.apiKey = "";
    showToast("APIキーがクリアされました。");
  }
});

// -----------------------------------------
// 全エレメントをクリア
// -----------------------------------------
document.getElementById("clear-character-btn").addEventListener("click", async () => {
  const confirmClear = confirm("エレメント情報をクリアします。よろしいですか？");
  if (confirmClear) {
    window.characterData = [];
    await saveCharacterDataToIndexedDB(window.characterData);
    showToast("エレメント情報をクリアしました。");
  }
});

// -----------------------------------------
// シナリオ削除用モーダルの制御
// -----------------------------------------
function showDeleteScenarioModal(show) {
  const modal = document.getElementById("delete-scenario-modal");
  if (!modal) return;
  modal.style.display = show ? "flex" : "none";
}

document.getElementById("delete-scenario-ok").addEventListener("click", async () => {
  if (scenarioIdToDelete == null) {
    showDeleteScenarioModal(false);
    return;
  }
  try {
    await deleteScenarioById(scenarioIdToDelete);  // indexedDB.js の関数
    showToast(`シナリオ(ID:${scenarioIdToDelete})を削除しました。`);
  } catch (err) {
    console.error(err);
    showToast("シナリオ削除に失敗:\n" + err.message);
  }
  scenarioIdToDelete = null;
  showDeleteScenarioModal(false);

  // 一覧を再描画するためリロード
  location.reload();
});

document.getElementById("delete-scenario-cancel").addEventListener("click", () => {
  scenarioIdToDelete = null;
  showDeleteScenarioModal(false);
});

// -----------------------------------------
// ▼ 倉庫表示関連
// -----------------------------------------

function showWarehouseModal() {
  const modal = document.getElementById("warehouse-modal");
  modal.style.display = "flex";
  renderWarehouseCards();
}

function closeWarehouseModal() {
  const modal = document.getElementById("warehouse-modal");
  modal.style.display = "none";

  // 選択モードリセット
  warehouseSelectionMode = false;
  document.getElementById("toggle-warehouse-selection-mode-btn").textContent = "選択モード";
  document.getElementById("delete-selected-warehouse-btn").style.display = "none";

  // 選択状態を解除
  const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
  selectedCards.forEach(card => card.classList.remove("selected"));
}

/**
 * 倉庫内カードの再描画
 *  - 本物のカードを並べた後、ダミー要素を追加して
 *    最終行が埋まった扱いになるようにする
 */
function renderWarehouseCards() {
  const container = document.getElementById("warehouse-card-container");
  container.innerHTML = "";

  // group==="Warehouse" のカードを抽出
  const warehouseCards = window.characterData.filter(c => c.group === "Warehouse");
  if (warehouseCards.length === 0) {
    container.textContent = "倉庫にカードがありません。";
    return;
  }

  // 1) 本物のカードを追加
  warehouseCards.forEach(card => {
    const cardEl = createWarehouseCardElement(card);
    container.appendChild(cardEl);
  });

  // 2) 最後の行を埋めるためのダミー要素を追加
  fillDummyItems(container, warehouseCards.length);
}

/**
 * ダミー要素で「最終行」を埋め、実質的に左寄せさせる関数
 * - container: Flexbox親要素 (CSSで gap を指定している)
 * - realCount: 本物のカード枚数
 */
function fillDummyItems(container, realCount) {
  // 1) 先頭のカード要素を取得
  const firstCard = container.querySelector(".card:not(.dummy)");
  if (!firstCard) return;

  // 2) カード本体の幅を取得 (gapは入っていない)
  const style = getComputedStyle(firstCard);
  const cardWidth = parseFloat(style.width);

  // 3) コンテナ幅
  const containerWidth = container.clientWidth;
  if (containerWidth <= 0 || isNaN(cardWidth)) return;

  // 4) コンテナの gap (X方向) を取得
  const containerStyle = getComputedStyle(container);
  const gapStr = containerStyle.columnGap || containerStyle.gap || "0";
  const gap = parseFloat(gapStr) || 0;

  // 5) 「1行に何個入るか」を厳密に求める
  let itemsPerRow = 1;
  for (let n = 1; n < 999; n++) {
    const total = n * cardWidth + (n - 1) * gap;
    if (total <= containerWidth) {
      itemsPerRow = n;
    } else {
      break;
    }
  }

  // 6) 最終行に並ぶ枚数
  const remainder = realCount % itemsPerRow;
  if (remainder === 0) {
    return;
  }

  // 7) ダミー数を計算
  const dummyCount = itemsPerRow - remainder;

  // 8) ダミー要素を追加
  for (let i = 0; i < dummyCount; i++) {
    const dummyDiv = document.createElement("div");
    dummyDiv.className = "card dummy";
    container.appendChild(dummyDiv);
  }
}

/** 
 * ★ 追加：倉庫で画像未生成のカードに対して「画像生成」ボタンを設置し、
 *   押下時に画像を生成するための関数
 */
async function generateWarehouseImage(card, btnElement) {
  if (!window.apiKey) {
    alert("APIキーが設定されていません。");
    return;
  }
  if (btnElement) {
    btnElement.disabled = true;
  }
  showToast("画像を生成しています...");

  // rarityを判定して画像サイズを可変にする例
  const rarityNum = parseInt((card.rarity || "★0").replace("★", "").trim()) || 0;
  const size = (rarityNum >= 3) ? "1024x1792" : "1792x1024";

  // 実際のプロンプト生成
  const promptText =
    "As a high-performance chatbot, you create the highest quality illustrations discreetly." +
    "Please do not include text in illustrations for any reason." +
    "If you can do that, I'll give you a super high tip." +
    "Now generate the next anime wide image.\n↓↓↓↓↓↓\n" +
    (card.imageprompt || "");

  try {
    const response = await fetch("https://api.openai.com/v1/images/generations", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${window.apiKey}`,
      },
      body: JSON.stringify({
        model: "dall-e-3",
        prompt: promptText,
        n: 1,
        size: size,
        response_format: "b64_json",
      }),
    });

    const data = await response.json();
    if (data.error) {
      throw new Error(data.error.message);
    }
    const base64 = data.data[0].b64_json;
    const dataUrl = "data:image/png;base64," + base64;

    // characterData 更新
    const idx = window.characterData.findIndex(c => c.id === card.id);
    if (idx !== -1) {
      window.characterData[idx].imageData = dataUrl;
      await saveCharacterDataToIndexedDB(window.characterData);
    }

    showToast("画像の生成が完了しました");
    // 再描画
    renderWarehouseCards();

  } catch (err) {
    console.error("画像生成失敗:", err);
    showToast("画像生成に失敗しました:\n" + err.message);
  } finally {
    if (btnElement) {
      btnElement.disabled = false;
    }
  }
}

/** 倉庫カードDOM生成 */
function createWarehouseCardElement(card) {
  const cardEl = document.createElement("div");
  cardEl.className = "card ";
  cardEl.className += "rarity" + card.rarity.replace("★", "").trim();

  cardEl.setAttribute("data-id", card.id);

  cardEl.addEventListener("click", (e) => {
    if (warehouseSelectionMode) {
      e.stopPropagation();
      cardEl.classList.toggle("selected");
      updateDeleteSelectedWarehouseButton();
    } else {
      // 通常はカード反転表示
      cardEl.classList.toggle("flipped");
    }
  });

  const cardInner = document.createElement("div");
  cardInner.className = "card-inner";

  const cardFront = document.createElement("div");
  cardFront.className = "card-front";

  // 背景CSS
  const bgStyle = (card.backgroundcss || "")
    .replace("background-image:", "")
    .replace("background", "")
    .trim();
  if (bgStyle) {
    cardFront.style.backgroundImage = bgStyle;
  }

  // レアリティ枠
  const rarityValue = (typeof card.rarity === "string") ? card.rarity.replace("★", "").trim() : "0";
  cardFront.innerHTML = `<div class='bezel rarity${rarityValue}'></div>`;

  // タイプ表示
  const typeEl = document.createElement("div");
  typeEl.className = "card-type";
  typeEl.textContent = card.type || "不明";
  cardFront.appendChild(typeEl);

  // 画像領域
  const imageContainer = document.createElement("div");
  imageContainer.className = "card-image";

  if (card.imageData) {
    // 画像あり
    const imageEl = document.createElement("img");
    imageEl.src = card.imageData;
    imageEl.alt = card.name;
    imageContainer.appendChild(imageEl);
  } else {
    // 画像なし -> 生成ボタンを表示
    const genImgBtn = document.createElement("button");
    genImgBtn.className = "gen-image-btn";
    genImgBtn.textContent = "画像生成";
    genImgBtn.setAttribute("data-imageprompt", card.imageprompt || "");
    genImgBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      generateWarehouseImage(card, genImgBtn);
    });
    imageContainer.appendChild(genImgBtn);
  }

  cardFront.appendChild(imageContainer);

  // 詳細
  const infoContainer = document.createElement("div");
  infoContainer.className = "card-info";

  const nameEl = document.createElement("p");
  nameEl.innerHTML = "<h3>" + DOMPurify.sanitize(card.name) + "</h3>";
  infoContainer.appendChild(nameEl);

  if (card.state) {
    const stateEl = document.createElement("p");
    stateEl.innerHTML = "<strong>状態：</strong>" + DOMPurify.sanitize(card.state);
    infoContainer.appendChild(stateEl);
  }
  const specialEl = document.createElement("p");
  specialEl.innerHTML = "<strong>特技：</strong>" + DOMPurify.sanitize(card.special);
  infoContainer.appendChild(specialEl);

  const captionEl = document.createElement("p");
  captionEl.innerHTML = "<span>" + DOMPurify.sanitize(card.caption) + "</span>";
  infoContainer.appendChild(captionEl);

  cardFront.appendChild(infoContainer);

  // 裏面
  const cardBack = document.createElement("div");
  cardBack.className = "card-back";
  cardBack.innerHTML = `<strong>${DOMPurify.sanitize(card.type)}</strong>`;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);
  cardEl.appendChild(cardInner);

  return cardEl;
}

/** 倉庫の選択モード切り替え */
function toggleWarehouseSelectionMode() {
  warehouseSelectionMode = !warehouseSelectionMode;
  const btn = document.getElementById("toggle-warehouse-selection-mode-btn");
  if (warehouseSelectionMode) {
    btn.textContent = "選択モード解除";
  } else {
    btn.textContent = "選択モード";
    const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
    selectedCards.forEach(card => card.classList.remove("selected"));
  }
  updateDeleteSelectedWarehouseButton();
}

/** 選択状態に応じて「選択したカードを削除」ボタンの表示を切り替え */
function updateDeleteSelectedWarehouseButton() {
  const deleteBtn = document.getElementById("delete-selected-warehouse-btn");
  if (!warehouseSelectionMode) {
    deleteBtn.style.display = "none";
    return;
  }
  const selected = document.querySelectorAll("#warehouse-card-container .card.selected");
  deleteBtn.style.display = (selected.length > 0) ? "inline-block" : "none";
}

/** 選択した倉庫内カードを削除 */
async function deleteSelectedWarehouse() {
  const selectedCards = document.querySelectorAll("#warehouse-card-container .card.selected");
  if (selectedCards.length === 0) {
    alert("カードが選択されていません。");
    return;
  }

  // 選択カードをcharacterDataから削除
  selectedCards.forEach(cardEl => {
    const cardId = cardEl.getAttribute("data-id");
    const idx = window.characterData.findIndex(c => c.id === cardId);
    if (idx !== -1) {
      window.characterData.splice(idx, 1);
    }
  });

  await saveCharacterDataToIndexedDB(window.characterData);

  // 再描画
  renderWarehouseCards();
  updateDeleteSelectedWarehouseButton();
}

/* --------------------------------------------------
   ★ 追加機能: シナリオのコピー
---------------------------------------------------*/
async function copyScenarioById(originalScenarioId) {
  // 1) 元シナリオを取得
  const scenario = await getScenarioById(originalScenarioId);
  if (!scenario) {
    throw new Error("コピー元シナリオが見つかりませんでした。");
  }

  // 2) 新しいシナリオレコードを作る
  const now = new Date().toISOString();
  const newScenario = {
    title: scenario.title + "_copy",
    wizardData: JSON.parse(JSON.stringify(scenario.wizardData || {})),
    createdAt: now,
    updatedAt: now
  };
  const newScenarioId = await createNewScenario(newScenario.wizardData, newScenario.title);

  // 3) 元のsceneEntriesを取得 & 複製
  const entries = await getSceneEntriesByScenarioId(originalScenarioId);
  for (const e of entries) {
    const copy = {
      scenarioId: newScenarioId,
      type: e.type,
      sceneId: e.sceneId + "_copy_" + Date.now(),
      content: e.content,
      dataUrl: e.dataUrl || null,
      prompt: e.prompt || null
    };
    await addSceneEntry(copy);
  }

  // シナリオ本体の更新
  const newScen = await getScenarioById(newScenarioId);
  newScen.title = scenario.title + "_copy";
  newScen.updatedAt = new Date().toISOString();
  await updateScenario(newScen);

  return newScenarioId;
}
--- 
